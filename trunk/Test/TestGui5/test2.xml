<?xml version="1.0" encoding="utf-8"?>

<helpItems schema="maml">

<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-Member
		</command:name>
		<maml:description>
			<maml:para>向 Windows PowerShell 对象的实例中添加用户定义的自定义成员。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>Member</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Add-Member cmdlet 可向 Windows PowerShell 对象的实例中添加用户定义的自定义成员。允许添加的成员类型包括：AliasProperty、CodeProperty、NoteProperty、ScriptProperty、PropertySet、CodeMethod、MemberSet 和 ScriptMethod。通过使用 Value 参数可设置成员的初始值。在成员的类型为 AliasProperty、ScriptProperty、CodeProperty 和 CodeMethod 的情况下，可以使用 SecondValue 参数来提供附加信息。

附加成员将添加到通过管道传递给 Add-Member 或使用 InputObject 参数指定的对象的特定实例中。只有在该实例存在时，附加成员才可用。可使用 Export-Clixml cmdlet 将该实例（包括附加成员）保存到文件中。Import-Clixml cmdlet 可以使用该文件中存储的信息来重新创建相应对象的实例。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-Member</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
				<maml:name>MemberType</maml:name>
				<maml:description>
					<maml:para>指定要添加的成员类型。此参数是强制参数。

此参数的有效值为：
-- AliasProperty：一种可为现有属性定义新名称的属性。
-- CodeMethod：一种可引用 Microsoft .NET Framework 类的静态方法的方法。
-- CodeProperty：一种可引用 .NET Framework 类的静态属性的属性。
-- MemberSet：属性和方法的预定义集合，如 PSBase、PSObject 和 PSTypeNames。
-- Method：基础 .NET Framework 对象的方法。
-- NoteProperty：具有静态值的属性。
-- ParameterizedProperty：具有参数和参数值的属性。
-- Property：基础 .NET Framework 对象的属性。
-- PropertySet：对象属性的预定义集合。
-- ScriptMethod：其值是脚本输出的方法。
-- ScriptProperty：其值是脚本输出的属性。

-- All：获取全部成员类型。
-- Methods：获取对象的所有类型的方法（如 method、codemethod、scriptmethod）
-- Properties：获取对象的所有类型的属性（如 property、codeproperty、aliasproperty、scriptproperty）。

并非所有对象都具有成员的全部类型。如果您指定的成员类型不是对象所具有的，则 Windows PowerShell 会返回错误。

Event 成员类型对 Add-Member 无效。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">AliasProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CodeProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Property</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NoteProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ScriptProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Properties</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">PropertySet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Method</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CodeMethod</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ScriptMethod</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Methods</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ParameterizedProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">MemberSet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Event</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要添加的成员名称。

如果省略“Name”参数名称，则 -Name 参数的值必须为命令中第二个未命名的参数值。如果包含参数名称，则该参数可以以任何顺序出现。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要向其添加新成员的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>指定添加成员的初始值。若要添加 AliasProperty、CodeProperty 或 CodeMethod 成员，则可通过使用 SecondValue 参数提供可选的附加信息。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>SecondValue</maml:name>
				<maml:description>
					<maml:para>指定有关 AliasProperty、ScriptProperty、CodeProperty 或 CodeMethod 成员的可选附加信息。如果在添加 AliasProperty 时使用此参数，则此参数必须为数据类型。向指定数据类型的转换将添加到 AliasProperty 的值中。例如，如果添加了为字符串属性提供替代名称的 AliasProperty，则也可指定 System.Int32 的 SecondValue 参数来指示该字符串属性的值在使用对应的 AliasProperty 进行访问时应转换为整数。

在添加 ScriptProperty 成员时，可以使用 SecondValue 参数来指定附加的 ScriptBlock。这种情况下，将使用 Value 参数中指定的第一个 ScriptBlock 来获取变量的值。SecondValue 参数中指定的第二个 ScriptBlock 可用于设置变量的值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>添加新成员，即使与其同名的成员已存在。但不适用于核心成员类型。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>将新扩展的对象传递至管道。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>添加新成员，即使与其同名的成员已存在。但不适用于核心成员类型。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要向其添加新成员的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
			<maml:name>MemberType</maml:name>
			<maml:description>
				<maml:para>指定要添加的成员类型。此参数是强制参数。

此参数的有效值为：
-- AliasProperty：一种可为现有属性定义新名称的属性。
-- CodeMethod：一种可引用 Microsoft .NET Framework 类的静态方法的方法。
-- CodeProperty：一种可引用 .NET Framework 类的静态属性的属性。
-- MemberSet：属性和方法的预定义集合，如 PSBase、PSObject 和 PSTypeNames。
-- Method：基础 .NET Framework 对象的方法。
-- NoteProperty：具有静态值的属性。
-- ParameterizedProperty：具有参数和参数值的属性。
-- Property：基础 .NET Framework 对象的属性。
-- PropertySet：对象属性的预定义集合。
-- ScriptMethod：其值是脚本输出的方法。
-- ScriptProperty：其值是脚本输出的属性。

-- All：获取全部成员类型。
-- Methods：获取对象的所有类型的方法（如 method、codemethod、scriptmethod）
-- Properties：获取对象的所有类型的属性（如 property、codeproperty、aliasproperty、scriptproperty）。

并非所有对象都具有成员的全部类型。如果您指定的成员类型不是对象所具有的，则 Windows PowerShell 会返回错误。

Event 成员类型对 Add-Member 无效。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSMemberTypes</command:parameterValue>
			<dev:type>
				<maml:name>PSMemberTypes</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要添加的成员名称。

如果省略“Name”参数名称，则 -Name 参数的值必须为命令中第二个未命名的参数值。如果包含参数名称，则该参数可以以任何顺序出现。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>将新扩展的对象传递至管道。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>SecondValue</maml:name>
			<maml:description>
				<maml:para>指定有关 AliasProperty、ScriptProperty、CodeProperty 或 CodeMethod 成员的可选附加信息。如果在添加 AliasProperty 时使用此参数，则此参数必须为数据类型。向指定数据类型的转换将添加到 AliasProperty 的值中。例如，如果添加了为字符串属性提供替代名称的 AliasProperty，则也可指定 System.Int32 的 SecondValue 参数来指示该字符串属性的值在使用对应的 AliasProperty 进行访问时应转换为整数。

在添加 ScriptProperty 成员时，可以使用 SecondValue 参数来指定附加的 ScriptBlock。这种情况下，将使用 Value 参数中指定的第一个 ScriptBlock 来获取变量的值。SecondValue 参数中指定的第二个 ScriptBlock 可用于设置变量的值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>指定添加成员的初始值。若要添加 AliasProperty、CodeProperty 或 CodeMethod 成员，则可通过使用 SecondValue 参数提供可选的附加信息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可将任何对象类型通过管道传递至 Add-Member。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Add-Member 返回新扩展的对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          只能向 PSObject 对象添加成员。若要确定对象是否为 PSObject 对象，请使用“is”运算符。例如，若要测试 $obj 变量中存储的对象，请键入“$obj -is [PSObject]”。

MemberType、Name、Value 和 SecondValue 参数的名称为可选项。如果省略参数名称，则未命名参数的值必须按以下顺序出现：MemberType、Name、Value、SecondValue。如果包括参数名称，则参数能够以任何顺序出现
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = (get-childitem)[0]

C:\PS&gt; $a | add-member -membertype noteproperty -name Status -value done

C:\PS&gt; $a | get-member -type noteproperty

   TypeName: System.IO.DirectoryInfo

Name          MemberType   Definition
----          ----------   ----------
PSChildName   NoteProperty System.String PSChildName=Co
PSDrive       NoteProperty System.Management.Automation
PSIsContainer NoteProperty System.Boolean PSIsContainer
PSParentPath  NoteProperty System.String PSParentPath=M
PSPath        NoteProperty System.String PSPath=Microso
PSProvider    NoteProperty System.Management.Automation
Status        NoteProperty System.String Status=done                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将状态注释属性添加到 Get-ChildItem 返回的 DirectoryInfo 对象，并向该对象赋予一个“done”值。

第一个命令获取 Get-Childitem 返回的第一个对象（索引 0）。

第二个命令用于添加注释属性。

第三个命令使用管道运算符 (|) 将更新后的对象发送到 Get-Member cmdlet。输出显示已添加属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = (get-childitem)[0]

C:\PS&gt; $a | add-member -membertype aliasproperty -name FileLength -value Length 

C:\PS&gt; $a.filelength                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将向 Get-ChildItem 返回的 DirectoryInfo 对象添加 FileLength 别名属性。新属性是 Length 属性的别名。

第一个命令获取 Get-Childitem 返回的第一个对象（索引 0）。

第二个命令用于添加别名属性。

第三个命令将返回新 FileLength 属性的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = &quot;a string&quot;

C:\PS&gt; $a = $a | add-member -membertype noteproperty -name StringUse -value Display -passthru

C:\PS&gt; $a.StringUse                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令用于将 StringUse 属性添加到字符串。由于字符串不是 PSObject 对象，因此必须将 PassThru 参数包括在命令中，以将扩展的字符串保存到变量中。示例中的最后一个命令用于显示新属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = &quot;this is a string&quot;

C:\PS&gt; $a = add-member -inputobject $a -membertype scriptmethod -name words `
-value {$this.split()} -passthru

C:\PS&gt; $a.words()                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将向字符串对象添加脚本方法。脚本方法公开了 .NET Framework 类库类 System.String 的 Split() 方法，以便于通过对字符串对象调用名为“Words”的方法来返回字符串中的各个单词。请注意，指定 PassThru 参数可强制 Add-Member 返回扩展的字符串对象作为将存储在 $a 变量中的输出。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$event = get-eventlog -logname system -newest 1

C:\PS&gt; $event.TimeWritten | get-member

C:\PS&gt; add-member -inputobject $event -membertype aliasproperty -name When `
-value TimeWritten -secondvalue System.String

C:\PS&gt; $event.When | get-member                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将向由 Get-EventLog cmdlet 返回的 EventLogEntry 对象添加 AliasProperty。AliasProperty 将命名为“When”，且此属性是该对象的 TimeWritten 属性的别名。SecondValue 参数用于指定在使用 AliasProperty 进行访问时属性值应转换为类型 System.String；TimeWritten 属性为 DateTime 对象。

第一个命令使用 Get-EventLog cmdlet 从 System 事件日志中检索最近发生的事件，并将其存储在 $event 变量中。

第二个命令用于访问该事件的 TimeWritten 属性，并通过管道将其传递给 Get-Member cmdlet 以表明该属性是 DateTime 类型。然后使用 Add-Member 向存储在 $event 变量中的 EventLogEntry 对象的实例添加 AliasProperty 成员。Name 参数用于将新成员的名称设置为“When”，而 Value 参数用于指定该新成员名称为 TimeWritten 属性的别名。SecondValue 参数用于指示，在使用此新成员时，它所返回的值应从其原来的 System.DateTime 类型转换为 System.String 类型。

第三个命令用于访问新成员，并通过管道将其传递给 Get-Member cmdlet 以确认它属于 System.String 类型。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function Copy-Property ($From, $To)

{
  foreach ($p in Get-Member -InputObject $From -MemberType Property)
  {
     Add-Member -InputObject $To -MemberType NoteProperty -Name $p.Name 
     -Value $From.$($p.Name) -Force

     $To.$($p.Name) = $From.$($p.Name)
   }
}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此函数将一个对象的所有属性复制到另一个对象中。

函数中的第一个命令声明了函数名称并列出其参数。

Foreach 循环使用 Get-Member cmdlet 来获取 From 对象的每个属性。将针对每个属性依次执行 Foreach 循环中的命令。

Add-Member 命令将该 From 对象的属性当作 NoteProperty 添加到 To 对象中。它采用 Force 参数以便该命令可以添加同名的成员。

函数中的最后一个命令为新属性指定的名称与原属性的名称相同。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113280</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Member</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Clixml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Clixml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-Type
		</command:name>
		<maml:description>
			<maml:para>向 Windows PowerShell 会话中添加 Microsoft .NET Framework 类型（一种类）。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Add</command:verb>
		<command:noun>Type</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>使用 Add-Type cmdlet，可以在 Windows PowerShell 会话中定义 .NET Framework 类。然后可将对象实例化（通过使用 New-Object cmdlet）并使用这些对象，就像使用任何 .NET Framework 对象一样。如果将 Add-Type 命令添加到 Windows PowerShell 配置文件中，则在所有 Windows PowerShell 会话中都可使用该类。

可通过指定现有的程序集或源代码文件来指定类型，也可通过内联方式指定源代码或将源代码保存在变量中。甚至可以仅指定一种方法，此时，Add-Type 便可以定义并生成该类。可使用该功能来执行 Platform Invoke (P/Invoke) 以调用 Windows PowerShell 中的非托管函数。如果指定源代码，Add-Type 将编译所指定的源代码并生成包含新 .NET Framework 类型的内存中程序集。

可使用 Add-Type 的参数来指定替代语言、编译器（默认为 CSharp）、编译器选项、程序集依赖关系、类命名空间，以及该类型和所获得的程序集的名称。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-Type</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>AssemblyName</maml:name>
				<maml:description>
					<maml:para>指定包括相应类型的程序集的名称。Add-Type 从所指定的程序集中获取相应类型。在基于程序集名称创建类型时需要此参数。

输入程序集的全称或简称（也称为“部分名称”）。在程序集名称中允许使用通配符。如果输入简称（即部分名称），Add-Type 会将其解析为全称，然后使用全称来加载程序集。

此参数不接受路径或文件名。若要输入程序集动态链接库 (DLL) 文件的路径，请使用 Path 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IgnoreWarnings</maml:name>
				<maml:description>
					<maml:para>忽略编译器警告。使用此参数可阻止 Add-Type 将编译器警告作为错误处理。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示添加的类型的 System.Runtime 对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Add-Type</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要创建的类的名称。基于成员定义生成类型时需要此参数。

类型名称和命名空间在一个会话中必须是唯一的。无法对类型进行卸载或更改。如果需要更改类型的代码，则必须更改名称或启动新的 Windows PowerShell 会话。否则，命令将失败。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>MemberDefinition</maml:name>
				<maml:description>
					<maml:para>指定类的新属性或方法。Add-Type 可生成支持属性或方法所需的模板代码。

可使用该功能来执行 Platform Invoke (P/Invoke) 以调用 Windows PowerShell 中的非托管函数。有关详细信息，请参阅示例。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CodeDomProvider</maml:name>
				<maml:description>
					<maml:para>指定代码生成器或编译器。Add-Type 使用指定的编译器来编译源代码。默认为 CSharp 编译器。如果无法通过 Language 参数来指定所使用的语言，请使用此参数。所指定的 CodeDomProvider 必须可基于源代码生成程序集。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">CodeDomProvider</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CompilerParameters</maml:name>
				<maml:description>
					<maml:para>指定用于源代码编译器的选项。这些选项未经修改就发送至编译器。

使用此参数，可以指示编译器生成可执行文件、嵌入资源或设置命令行选项，如“/unsafe”选项。此参数可实现 CompilerParameters 类 (System.CodeDom.Compiler.CompilerParameters)。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">CompilerParameters</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Language</maml:name>
				<maml:description>
					<maml:para>指定在源代码中使用的语言。Add-Type 使用该语言来选择正确的代码编译器。

有效值为：“CSharp”、“CSharpVersion3”、“VisualBasic”和“JScript”。默认值为“CSharp”。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">CSharp</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CSharpVersion3</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">VisualBasic</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">JScript</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Namespace</maml:name>
				<maml:description>
					<maml:para>指定类型的命名空间。

如果命令中没有包括此参数，则在 Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes 命名空间中创建该类型。如果在含有空字符串值或 $null 值的命令中包括此参数，则在全局命名空间中生成该类型。
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>OutputAssembly</maml:name>
				<maml:description>
					<maml:para>在该位置为具有指定名称的程序集生成 DLL 文件。输入路径（可选）和文件名。允许使用通配符。默认情况下，Add-Type 仅在内存中生成程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OutputType</maml:name>
				<maml:description>
					<maml:para>指定输出程序集的输出类型。有效值为 Library、ConsoleApplication 和 WindowsApplication。
默认情况下，将不指定输出类型。

仅当该命令中指定了输出程序集时，此参数才有效。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">OutputAssemblyType</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ReferencedAssemblies</maml:name>
				<maml:description>
					<maml:para>指定类型所依赖的程序集。默认情况下，Add-Type 引用 System.dll 和 System.Management.Automation.dll。除默认程序集以外，还会引用使用此参数指定的程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>UsingNamespace</maml:name>
				<maml:description>
					<maml:para>指定类所需的其他命名空间。这与 C# 中的 Using 关键字很相似。

默认情况下，Add-Type 引用 System 命名空间。在使用 MemberDefinition 参数时，Add-Type 默认情况下还引用 System.Runtime.InteropServices 命名空间。除默认命名空间以外，还会引用使用 UsingNamespace 参数添加的命名空间。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IgnoreWarnings</maml:name>
				<maml:description>
					<maml:para>忽略编译器警告。使用此参数可阻止 Add-Type 将编译器警告作为错误处理。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示添加的类型的 System.Runtime 对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Add-Type</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定包含相应类型的源代码文件或程序集 DLL 文件的路径。

如果提交源代码文件，则 Add-Type 会编译这些文件中的代码并在内存中创建相应类型的程序集。在 Path 值中所指定的文件扩展名确定 Add-Type 使用的编译器。

如果提交程序集文件，Add-Type 将从该程序集中获取相应类型。若要指定内存中程序集或全局程序集缓存，请使用 AssemblyName 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CompilerParameters</maml:name>
				<maml:description>
					<maml:para>指定用于源代码编译器的选项。这些选项未经修改就发送至编译器。

使用此参数，可以指示编译器生成可执行文件、嵌入资源或设置命令行选项，如“/unsafe”选项。此参数可实现 CompilerParameters 类 (System.CodeDom.Compiler.CompilerParameters)。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">CompilerParameters</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>OutputAssembly</maml:name>
				<maml:description>
					<maml:para>在该位置为具有指定名称的程序集生成 DLL 文件。输入路径（可选）和文件名。允许使用通配符。默认情况下，Add-Type 仅在内存中生成程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OutputType</maml:name>
				<maml:description>
					<maml:para>指定输出程序集的输出类型。有效值为 Library、ConsoleApplication 和 WindowsApplication。
默认情况下，将不指定输出类型。

仅当该命令中指定了输出程序集时，此参数才有效。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">OutputAssemblyType</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ReferencedAssemblies</maml:name>
				<maml:description>
					<maml:para>指定类型所依赖的程序集。默认情况下，Add-Type 引用 System.dll 和 System.Management.Automation.dll。除默认程序集以外，还会引用使用此参数指定的程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IgnoreWarnings</maml:name>
				<maml:description>
					<maml:para>忽略编译器警告。使用此参数可阻止 Add-Type 将编译器警告作为错误处理。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示添加的类型的 System.Runtime 对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Add-Type</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>TypeDefinition</maml:name>
				<maml:description>
					<maml:para>指定包含类型定义的源代码。输入字符串或 here-string 格式的源代码，或输入包含源代码的变量。有关 here-string 的详细信息，请参阅 about_Quoting_Rules。

在类型定义中需包括命名空间声明。如果省略命名空间声明，您的类型可能会与其他类型或其他类型的快捷方式同名，从而导致意外覆盖。例如，如果定义的类型名为“Exception”，则使用“Exception”作为 System.Exception 的快捷方式的脚本将失败。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CodeDomProvider</maml:name>
				<maml:description>
					<maml:para>指定代码生成器或编译器。Add-Type 使用指定的编译器来编译源代码。默认为 CSharp 编译器。如果无法通过 Language 参数来指定所使用的语言，请使用此参数。所指定的 CodeDomProvider 必须可基于源代码生成程序集。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">CodeDomProvider</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CompilerParameters</maml:name>
				<maml:description>
					<maml:para>指定用于源代码编译器的选项。这些选项未经修改就发送至编译器。

使用此参数，可以指示编译器生成可执行文件、嵌入资源或设置命令行选项，如“/unsafe”选项。此参数可实现 CompilerParameters 类 (System.CodeDom.Compiler.CompilerParameters)。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">CompilerParameters</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Language</maml:name>
				<maml:description>
					<maml:para>指定在源代码中使用的语言。Add-Type 使用该语言来选择正确的代码编译器。

有效值为：“CSharp”、“CSharpVersion3”、“VisualBasic”和“JScript”。默认值为“CSharp”。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">CSharp</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CSharpVersion3</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">VisualBasic</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">JScript</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>OutputAssembly</maml:name>
				<maml:description>
					<maml:para>在该位置为具有指定名称的程序集生成 DLL 文件。输入路径（可选）和文件名。允许使用通配符。默认情况下，Add-Type 仅在内存中生成程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OutputType</maml:name>
				<maml:description>
					<maml:para>指定输出程序集的输出类型。有效值为 Library、ConsoleApplication 和 WindowsApplication。
默认情况下，将不指定输出类型。

仅当该命令中指定了输出程序集时，此参数才有效。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">OutputAssemblyType</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ReferencedAssemblies</maml:name>
				<maml:description>
					<maml:para>指定类型所依赖的程序集。默认情况下，Add-Type 引用 System.dll 和 System.Management.Automation.dll。除默认程序集以外，还会引用使用此参数指定的程序集。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IgnoreWarnings</maml:name>
				<maml:description>
					<maml:para>忽略编译器警告。使用此参数可阻止 Add-Type 将编译器警告作为错误处理。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示添加的类型的 System.Runtime 对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>AssemblyName</maml:name>
			<maml:description>
				<maml:para>指定包括相应类型的程序集的名称。Add-Type 从所指定的程序集中获取相应类型。在基于程序集名称创建类型时需要此参数。

输入程序集的全称或简称（也称为“部分名称”）。在程序集名称中允许使用通配符。如果输入简称（即部分名称），Add-Type 会将其解析为全称，然后使用全称来加载程序集。

此参数不接受路径或文件名。若要输入程序集动态链接库 (DLL) 文件的路径，请使用 Path 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CodeDomProvider</maml:name>
			<maml:description>
				<maml:para>指定代码生成器或编译器。Add-Type 使用指定的编译器来编译源代码。默认为 CSharp 编译器。如果无法通过 Language 参数来指定所使用的语言，请使用此参数。所指定的 CodeDomProvider 必须可基于源代码生成程序集。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">CodeDomProvider</command:parameterValue>
			<dev:type>
				<maml:name>CodeDomProvider</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>CSharp 编译器</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CompilerParameters</maml:name>
			<maml:description>
				<maml:para>指定用于源代码编译器的选项。这些选项未经修改就发送至编译器。

使用此参数，可以指示编译器生成可执行文件、嵌入资源或设置命令行选项，如“/unsafe”选项。此参数可实现 CompilerParameters 类 (System.CodeDom.Compiler.CompilerParameters)。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">CompilerParameters</command:parameterValue>
			<dev:type>
				<maml:name>CompilerParameters</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IgnoreWarnings</maml:name>
			<maml:description>
				<maml:para>忽略编译器警告。使用此参数可阻止 Add-Type 将编译器警告作为错误处理。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Language</maml:name>
			<maml:description>
				<maml:para>指定在源代码中使用的语言。Add-Type 使用该语言来选择正确的代码编译器。

有效值为：“CSharp”、“CSharpVersion3”、“VisualBasic”和“JScript”。默认值为“CSharp”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Language</command:parameterValue>
			<dev:type>
				<maml:name>Language</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>CSharp</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>MemberDefinition</maml:name>
			<maml:description>
				<maml:para>指定类的新属性或方法。Add-Type 可生成支持属性或方法所需的模板代码。

可使用该功能来执行 Platform Invoke (P/Invoke) 以调用 Windows PowerShell 中的非托管函数。有关详细信息，请参阅示例。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要创建的类的名称。基于成员定义生成类型时需要此参数。

类型名称和命名空间在一个会话中必须是唯一的。无法对类型进行卸载或更改。如果需要更改类型的代码，则必须更改名称或启动新的 Windows PowerShell 会话。否则，命令将失败。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Namespace</maml:name>
			<maml:description>
				<maml:para>指定类型的命名空间。

如果命令中没有包括此参数，则在 Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes 命名空间中创建该类型。如果在含有空字符串值或 $null 值的命令中包括此参数，则在全局命名空间中生成该类型。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>OutputAssembly</maml:name>
			<maml:description>
				<maml:para>在该位置为具有指定名称的程序集生成 DLL 文件。输入路径（可选）和文件名。允许使用通配符。默认情况下，Add-Type 仅在内存中生成程序集。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OutputType</maml:name>
			<maml:description>
				<maml:para>指定输出程序集的输出类型。有效值为 Library、ConsoleApplication 和 WindowsApplication。
默认情况下，将不指定输出类型。

仅当该命令中指定了输出程序集时，此参数才有效。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">OutputAssemblyType</command:parameterValue>
			<dev:type>
				<maml:name>OutputAssemblyType</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示添加的类型的 System.Runtime 对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定包含相应类型的源代码文件或程序集 DLL 文件的路径。

如果提交源代码文件，则 Add-Type 会编译这些文件中的代码并在内存中创建相应类型的程序集。在 Path 值中所指定的文件扩展名确定 Add-Type 使用的编译器。

如果提交程序集文件，Add-Type 将从该程序集中获取相应类型。若要指定内存中程序集或全局程序集缓存，请使用 AssemblyName 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>ReferencedAssemblies</maml:name>
			<maml:description>
				<maml:para>指定类型所依赖的程序集。默认情况下，Add-Type 引用 System.dll 和 System.Management.Automation.dll。除默认程序集以外，还会引用使用此参数指定的程序集。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>TypeDefinition</maml:name>
			<maml:description>
				<maml:para>指定包含类型定义的源代码。输入字符串或 here-string 格式的源代码，或输入包含源代码的变量。有关 here-string 的详细信息，请参阅 about_Quoting_Rules。

在类型定义中需包括命名空间声明。如果省略命名空间声明，您的类型可能会与其他类型或其他类型的快捷方式同名，从而导致意外覆盖。例如，如果定义的类型名为“Exception”，则使用“Exception”作为 System.Exception 的快捷方式的脚本将失败。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>UsingNamespace</maml:name>
			<maml:description>
				<maml:para>指定类所需的其他命名空间。这与 C# 中的 Using 关键字很相似。

默认情况下，Add-Type 引用 System 命名空间。在使用 MemberDefinition 参数时，Add-Type 默认情况下还引用 System.Runtime.InteropServices 命名空间。除默认命名空间以外，还会引用使用 UsingNamespace 参数添加的命名空间。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递到 Add-Type。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.RuntimeType</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Add-Type 返回表示新类型的 System.RuntimeType 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          添加的类型仅存在于当前会话中。要在所有会话中使用这些类型，请将其添加到 Windows PowerShell 配置文件中。有关配置文件的详细信息，请参阅 about_Profiles。

类型名称（和命名空间）在一个会话中必须是唯一的。无法对类型进行卸载或更改。如果需要更改类型的代码，则必须更改名称或启动新的 Windows PowerShell 会话。否则，命令将失败。

某些语言的 CodeDomProvider 类（如 IronPython 和 JSharp）不会生成输出。因此，使用这些语言编写的类型将无法与 Add-Type 一起使用。

此 cmdlet 基于 CodeDomProvider 类。有关该类的详细信息，请参阅 Microsoft .NET Framework SDK。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$source = @&quot;
public class BasicTest
{
    public static int Add(int a, int b)
    {
        return (a + b);
    }

    public int Multiply(int a, int b)
    {
        return (a * b);
    }
}
&quot;@

C:\PS&gt; Add-Type -TypeDefinition $source

C:\PS&gt; [BasicTest]::Add(4, 3)

C:\PS&gt; $basicTestObject = New-Object BasicTest 
C:\PS&gt; $basicTestObject.Multiply(5, 2)
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令通过指定存储在变量中的源代码，将 BasicTest 类添加到会话中。该类型具有一个名为 Add 的静态方法和一个名为 Multiply 的非静态方法。

第一条命令在 $source 变量中存储该类的源代码。

第二条命令使用 Add-Type cmdlet 将该类添加到会话中。由于它使用的是内联源代码，所以该命令使用 TypeDefinition 参数来指定 $source 变量中的代码。

其余命令使用新类。

第三条命令调用 BasicTest 类的 Add 的静态方法。它使用双冒号字符 (::) 来指定类的静态成员。

第四条命令使用 New-Object cmdlet 来实例化 BasicTest 类的实例。它将新对象保存在 $basicTestObject 变量中。

第五条命令使用 $basicTestObject 的 Multiply 方法。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
[BasicTest] | get-member

C:\PS&gt; [BasicTest] | get-member -static

C:\PS&gt; $basicTestObject | get-member

C:\PS&gt; [BasicTest] | get-member


   TypeName: System.RuntimeType

Name                           MemberType Definition
----                           ---------- ----------
Clone                          Method     System.Object Clone()
Equals                         Method     System.Boolean Equals
FindInterfaces                 Method     System.Type[] FindInt
...


C:\PS&gt; [BasicTest] | get-member -static

   TypeName: BasicTest

Name            MemberType Definition
----            ---------- ----------
Add             Method     static System.Int32 Add(Int32 a, Int32 b)
Equals          Method     static System.Boolean Equals(Object objA,
ReferenceEquals Method     static System.Boolean ReferenceEquals(Obj


C:\PS&gt; $basicTestObject | get-member

   TypeName: BasicTest

Name        MemberType Definition
----        ---------- ----------
Equals      Method     System.Boolean Equals(Object obj)
GetHashCode Method     System.Int32 GetHashCode()
GetType     Method     System.Type GetType()
Multiply    Method     System.Int32 Multiply(Int32 a, Int32 b)
ToString    Method     System.String ToString()
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令使用 Get-Member cmdlet 来检查 Add-Type 和 New-Object cmdlet 在上一个示例中创建的对象。

第一条命令使用 Get-Member cmdlet 来获取 Add-Type 添加到会话中的 BasicTest 类的类型和成员。Get-Member 命令表明它是从 System.Object 类派生的 System.RuntimeType 对象。

第二条命令使用 Get-Member 的 Static 参数来获取 BasicTest 类的静态属性和方法。输出显示已包含了 Add 方法。

第三条命令使用 Get-Member 来获取 $BasicTestObject 变量中存储的对象成员。这是使用具有 $BasicType 类的 New-Object cmdlet 创建的对象实例。

输出内容表明 $basicTestObject 变量的值是 BasicTest 类的实例，并且它包括名为 Multiply 的成员。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$accType = add-type -assemblyname accessib* -passthru                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将类从 Accessibility 程序集添加到当前会话中。此命令使用 AssemblyName 参数来指定程序集的名称。甚至在您不能确定程序集名称或其拼写时，可以使用通配符来获取正确的程序集。

该命令使用 PassThru 参数来生成可表示已添加到会话中的类的对象，并在 $accType 变量中保存这些对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
add-type -path c:\ps-test\Hello.vb

[VBFromFile]::SayHello(&quot;, World&quot;)

# From Hello.vb
Public Class VBFromFile

Public Shared Function SayHello(sourceName As String) As String
Dim myValue As String = &quot;Hello&quot;

return myValue + sourceName
End Function
End Class

C:\PS&gt; [VBFromFile]::SayHello(&quot;, World&quot;)
Hello, World                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该示例使用 Add-Type cmdlet 来向当前会话中添加在 Hello.vb 文件中定义的 VBFromFile 类。在该命令的输出中会显示 Hello.vb 文件的文本。

第一条命令使用 Add-Type cmdlet 将 Hello.vb 文件中定义的类型添加到当前会话中。该命令使用 path 参数来指定源文件。

第二条命令将 SayHello 函数作为 VBFromFile 类的静态方法进行调用。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$signature = @&quot;
[DllImport(&quot;user32.dll&quot;)]
public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
&quot;@

$showWindowAsync = Add-Type -memberDefinition $signature -name &quot;Win32ShowWindowAsync&quot; -namespace Win32Functions -passThru

# Minimize the Windows PowerShell console
$showWindowAsync::ShowWindowAsync((Get-Process -id $pid).MainWindowHandle, 2) 

# Restore it
$showWindowAsync::ShowWindowAsync((Get-Process -id $pid).MainWindowHandle, 4)                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例中的命令演示了如何在 Windows PowerShell 中调用本机的 Windows API。Add-Type 使用 Platform Invoke (P/Invoke) 机制来从 Windows PowerShell 调用 User32.dll 中的函数。

第一条命令在 $signature 变量中存储 ShowWindowAsync 函数的 C# 签名。（有关详细信息，请参阅 MSDN Library 中的“ShowWindowAsync 函数”，网址为 http://go.microsoft.com/fwlink/?LinkId=143643。）要确保所得到的方法在 Windows PowerShell 会话中可见，请将“public”关键字添加到标准签名中。

第二条命令使用 Add-Type cmdlet 将 ShowWindowAsync 函数作为 Add-Type 创建的类的静态方法添加到 Windows PowerShell 会话中。该命令使用 MemberDefinition 参数来指定保存在 $signature 变量中的方法定义。
 
该命令使用 Name 和 Namespace 参数来指定类的名称和命名空间。它使用 PassThru 参数来生成表示类型的对象，并将该对象保存在 $showWindowAsync 变量中。

第三条和第四条命令使用新的 ShowWindowAsync 静态方法。该方法采用两个参数：窗口句柄和指定如何显示窗口的整数。

第三个命令调用 ShowWindowAsync。它使用具有 $pid 自动变量的 Get-Process cmdlet 来获取承载当前 Windows PowerShell 会话的进程。然后使用当前进程的 MainWindowHandle 属性和值“2”（表示 SW_MINIMIZE 值）。

为了还原窗口，第四条命令使用窗口位置的值“4”，它表示 SW_RESTORE 值。（SW_MAXIMIZE 是 3。）</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Add-Type -MemberDefinition $jsMethod -Name &quot;PrintInfo&quot; -Language JScript                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Add-Type cmdlet 将方法从内联 JScript 代码添加到 Windows PowerShell 会话中。它使用 MemberDefinition 参数来提交存储在 $jsMethod 变量中的源代码。它使用 Name 变量来指定 Add-Type 为该方法创建的类的名称，使用 Language 参数来指定 JScript 语言。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Add-Type -Path FSharp.Compiler.CodeDom.dll


C:\PS&gt; Add-Type -Path FSharp.Compiler.CodeDom.dll
C:\PS&gt; $provider = New-Object Microsoft.FSharp.Compiler.CodeDom.FSharpCodeProvider

C:\PS&gt; $fSharpCode = @&quot; 
let rec loop n = 
if n &lt;= 0 then () else begin
print_endline (string_of_int n);
loop (n-1)
end
&quot;@

C:\PS&gt; $fsharpType = Add-Type -TypeDefinition $fSharpCode -CodeDomProvider $provider -PassThru | where { $_.IsPublic }
C:\PS&gt; $fsharpType::loop(4)
4
3
2
1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Add-Type cmdlet 将 FSharp 代码编译器添加到 Windows PowerShell 会话中。要在 Windows PowerShell 中运行此示例，必须具有使用 FSharp 语言安装的 FSharp.Compiler.CodeDom.dll。

示例中的第一条命令使用具有 Path 参数的 Add-Type cmdlet 来指定程序集。Add-Type 可获取程序集中的类型。

第二条命令使用 New-Object cmdlet 来创建 FSharp 代码提供程序的实例，并将结果保存在 $provider 变量中。

第三个命令保存 FSharp 代码，该代码在 $FSharpCode 变量中定义了 Loop 方法。

第四条命令使用 Add-Type cmdlet 将 $fSharpCode 中定义的公共类型保存在 $fSharpType 变量中。TypeDefinition 参数指定用于定义类型的源代码。CodeDomProvider 参数指定源代码编译器。

PassThru 参数指示 Add-Type 返回表示类型的 Runtime 对象，管道运算符 (|) 将 Runtime 对象发送到仅返回公共类型的 Where-Object cmdlet。由于 FSharp 提供程序生成非公共类型以支持所得到的公共类型，所以需使用 Where-Object 筛选器。

第五条命令将 Loop 方法作为存储在 $fSharpType 变量中的类型的静态方法进行调用。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135195</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-Member</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-Variable
		</command:name>
		<maml:description>
			<maml:para>删除变量的值。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Clear</command:verb>
		<command:noun>Variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Clear-Variable cmdlet 将删除变量中存储的数据，但不删除该变量。因此，该变量的值为 NULL（空）。如果变量具有指定的数据或对象类型，则 Clear-Variable 将保留该变量中存储的对象类型。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要清除的变量的名称。允许使用通配符。此参数为必需参数，但参数名（“Name”）为可选项。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 清除变量（即使该变量是只读的）。但 cmdlet 无法清除常量，既便使用了 Force 参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>只清除指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已清除的变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>忽略指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 清除变量（即使该变量是只读的）。但 cmdlet 无法清除常量，既便使用了 Force 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>只清除指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要清除的变量的名称。允许使用通配符。此参数为必需参数，但参数名（“Name”）为可选项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示已清除的变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递到 Clear-Variable。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.PSVariable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Clear-Variable 生成一个表示已清除变量的 System.Management.Automation.PSVariable 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          若要删除变量及其值，请使用 Remove-Variable 或 Remove-Item。

Clear-Variable 将不会删除那些设置为常量或归系统所有的变量的值，即使使用 -Force 参数也是如此。

如果正在清除的变量不存在，则 cmdlet 不执行任何操作。它不会创建具有空值的变量。

还可以使用 Clear-Variable 的内置别名“clv”来对其进行引用。有关详细信息，请参阅 about_Aliases。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
clear-variable my* -global                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除以“my”开头的全局变量的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a=3

C:\PS&gt;&amp;{ clear-variable a }

C:\PS&gt;$a
3                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令演示了在子作用域中清除变量将不会清除父作用域中的值。第一个命令将变量 $a 的值设置为“3”。第二个命令使用调用运算符 (&amp;) 在新作用域中运行 Clear-Variable 命令。在子作用域中清除该变量（尽管它不存在），但不会在本地作用域中清除它。第三个命令用于获取 $a 的值，结果显示值“3”未受影响。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
clear-variable -name processes                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除 $processes 变量的值。$processes 变量仍存在，但其为空值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113285</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Compare-Object
		</command:name>
		<maml:description>
			<maml:para>比较两组对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Compare</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Compare-Object cmdlet 将两组对象进行比较。一组对象为 Reference 组，而另一组为 Difference 组。

比较的结果将指示属性值是只出现在 Reference 组中的对象中（由 &lt;= 符号指示），或是只出现在 Difference 组中的对象中（由 =&gt; 符号指示），抑或（在指定了 IncludeEqual 参数的情况下）同时出现在这两个对象中（由 == 符号指示）。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Compare-Object</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>ReferenceObject</maml:name>
				<maml:description>
					<maml:para>用作比较参照的对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
				<maml:name>DifferenceObject</maml:name>
				<maml:description>
					<maml:para>指定与参考对象进行比较的对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CaseSensitive</maml:name>
				<maml:description>
					<maml:para>指示比较应区分大小写。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Culture</maml:name>
				<maml:description>
					<maml:para>指定比较中要使用的区域性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ExcludeDifferent</maml:name>
				<maml:description>
					<maml:para>只显示相等的比较对象的特征。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeEqual</maml:name>
				<maml:description>
					<maml:para>显示相等的比较对象的特征。默认情况下，只显示 reference 对象与 difference 对象之间的不同特征。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>将不同的对象传递至管道。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要比较的 reference 对象和 difference 对象的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SyncWindow</maml:name>
				<maml:description>
					<maml:para>定义搜索范围，在没有匹配的情况下在此范围中尝试重新同步顺序。默认值为 [Int32]::MaxValue。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CaseSensitive</maml:name>
			<maml:description>
				<maml:para>指示比较应区分大小写。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Culture</maml:name>
			<maml:description>
				<maml:para>指定比较中要使用的区域性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="2">
			<maml:name>DifferenceObject</maml:name>
			<maml:description>
				<maml:para>指定与参考对象进行比较的对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ExcludeDifferent</maml:name>
			<maml:description>
				<maml:para>只显示相等的比较对象的特征。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IncludeEqual</maml:name>
			<maml:description>
				<maml:para>显示相等的比较对象的特征。默认情况下，只显示 reference 对象与 difference 对象之间的不同特征。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>将不同的对象传递至管道。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要比较的 reference 对象和 difference 对象的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>ReferenceObject</maml:name>
			<maml:description>
				<maml:para>用作比较参照的对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SyncWindow</maml:name>
			<maml:description>
				<maml:para>定义搜索范围，在没有匹配的情况下在此范围中尝试重新同步顺序。默认值为 [Int32]::MaxValue。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>[Int32]::MaxValue</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将 DifferenceObject 对象传送到 Compare-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无，或不同的对象</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Compare-Object 返回不同的对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
compare-object -referenceobject $(get-content C:\test\testfile1.txt) -differenceobject $(get-content C:\test\testfile2.txt)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将比较两个文本文件的内容。该命令显示只出现在一个文件中或另一个文件中的行，而不显示在两个文件中都出现的行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
compare-object -referenceobject $(get-content C:\Test\testfile1.txt) -differenceobject $(get-content C:\Test\testfile2.txt) -includeequal                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将比较两个文本文件中的每行内容。该命令显示两个文件中的所有行内容，以指示每一行是只出现在 Textfile1.txt 或 Textfile2.txt 中，还是在这两个文件中都出现。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$processes_before = get-process

C:\PS&gt; notepad

C:\PS&gt; $processes_after  = get-process

C:\PS&gt; compare-object -referenceobject $processes_before -differenceobject $processes_after                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令比较两组进程对象。

第一个命令使用 Get-Process cmdlet 来获取计算机上的进程。它将它们存储在 $processes_before 变量中。

第二个命令用于启动记事本。

第三个命令再次使用 Get-Process cmdlet，并将得到的进程存储在 $processes_after 变量中。

第四个命令使用 Compare-Object cmdlet 来比较两组进程对象。该命令显示进程对象之间的差别，包括记事本的新实例。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113286</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertFrom-CSV
		</command:name>
		<maml:description>
			<maml:para>将逗号分隔值 (CSV) 格式的对象属性转换为原始对象的 CSV 版本。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>ConvertFrom</command:verb>
		<command:noun>CSV</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>ConvertFrom-CSV cmdlet 通过 ConvertTo-CSV cmdlet 生成的 CSV 长度可变字符串来创建对象。

可使用 ConvertFrom-CSV cmdlet 的参数来指定列标题行（列标题行确定所获得的对象的属性名称）、指定项目分隔符，或指示 ConvertFrom-CSV 使用当前区域性的列表分隔符作为分隔符。

ConvertFrom-CSV 创建的对象是原始对象的 CSV 版本。CSV 对象的属性值是原始对象的属性值的字符串版本。对象的 CSV 版本不含任何方法。

也可使用 Export-CSV 和 Import-CSV cmdlet 将对象转为 CSV 字符串（或将 CSV 字符串转换为变量）。这些 cmdlet 和 ConvertTo-CSV、ConvertFrom-CSV cmdlet 一样，只是它们是将 CSV 字符串保存在文件中。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertFrom-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Delimiter</maml:name>
				<maml:description>
					<maml:para>指定在 CSV 字符串中用来分隔属性值的分隔符。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。

如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要转换为对象的 CSV 字符串。请输入包含 CSV 字符串的变量，或者键入可获取 CSV 字符串的命令或表达式。也可通过管道将 CSV 字符串传递至 ConvertFrom-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Header</maml:name>
				<maml:description>
					<maml:para>为导入的字符串指定备用的列标题行。列标题确定由 ConvertFrom-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，剩余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

在使用 Header 参数时将省略来自 CSV 字符串的列标题字符串。否则，ConvertFrom-CSV 将基于标题行中的项目创建多余对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>ConvertFrom-CSV</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseCulture</maml:name>
				<maml:description>
					<maml:para>使用当前区域性的列表分隔符作为字符串分隔符。默认值为逗号 (,)。

要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要转换为对象的 CSV 字符串。请输入包含 CSV 字符串的变量，或者键入可获取 CSV 字符串的命令或表达式。也可通过管道将 CSV 字符串传递至 ConvertFrom-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Header</maml:name>
				<maml:description>
					<maml:para>为导入的字符串指定备用的列标题行。列标题确定由 ConvertFrom-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，剩余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

在使用 Header 参数时将省略来自 CSV 字符串的列标题字符串。否则，ConvertFrom-CSV 将基于标题行中的项目创建多余对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Delimiter</maml:name>
			<maml:description>
				<maml:para>指定在 CSV 字符串中用来分隔属性值的分隔符。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。

如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			<dev:type>
				<maml:name>char</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>','</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Header</maml:name>
			<maml:description>
				<maml:para>为导入的字符串指定备用的列标题行。列标题确定由 ConvertFrom-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，剩余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

在使用 Header 参数时将省略来自 CSV 字符串的列标题字符串。否则，ConvertFrom-CSV 将基于标题行中的项目创建多余对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要转换为对象的 CSV 字符串。请输入包含 CSV 字符串的变量，或者键入可获取 CSV 字符串的命令或表达式。也可通过管道将 CSV 字符串传递至 ConvertFrom-CSV。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseCulture</maml:name>
			<maml:description>
				<maml:para>使用当前区域性的列表分隔符作为字符串分隔符。默认值为逗号 (,)。

要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>逗号</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将 CSV 字符串传递至 ConvertFrom-CSV。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					ConvertFrom-CSV 返回 CSV 字符串中的属性所描述的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          因为导入的对象是该对象类型的 CSV 版本，所以 Windows PowerShell 类型格式化条目无法对其进行识别和格式化，而只能对该对象类型的非 CSV 版本进行格式化。

在 CSV 格式中，通过以逗号分隔的对象属性值列表来表示每个对象。将属性值转换为字符串（通过使用对象的 ToString() 方法），这样它们通常就可由属性值的名称来表示。ConvertTo-Csv 无法导出对象的方法。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$p = get-process | convertto-csv

C:\PS&gt; $p | convertfrom-csv                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将本地计算机中的进程转换为 CSV 格式，然后将其还原为对象形式。

第一条命令使用 Get-Process cmdlet 来获取本地计算机中的进程。管道运算符 (|) 将它们发送至 ConvertTo-CSV cmdlet，该 cmdlet 将进程对象转换为 CSV 格式。CSV 字符串保存在 $p 变量中。

第二个命令使用管道运算符将 $p 变量中的 CSV 字符串发送至 ConvertFrom-CSV cmdlet。该 cmdlet 将 CSV 字符串转换为原进程对象的 CSV 版本。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$date = get-date | convertto-csv -delimiter &quot;;&quot;

C:\PS&gt; convertfrom-csv -inputobject $date -delimiter &quot;;&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令先将数据对象转换为 CSV 格式，然后再转换为 CSV 对象格式。

第一条命令使用 Get-Date cmdlet 来获取当前日期和时间。管道对象 (|) 将日期发送至可将数据对象转换为一系列 CSV 字符串的 ConvertTo-CSV cmdlet。该命令使用 Delimiter 参数来指定分号分隔符。字符串保存在 $date 变量中。

第二条命令使用 ConvertFrom-CSV cmdlet 来将 $date 变量中的 CSV 字符串转换回对象格式。该命令使用 InputObject 参数来指定 CSV 字符串，使用 Delimiter 参数来指定分号分隔符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$j = start-job -scriptblock { get-process } | convertto-csv

C:\PS&gt; $header = &quot;MoreData&quot;,&quot;StatusMessage&quot;,&quot;Location&quot;,&quot;Command&quot;,&quot;State&quot;,&quot;Finished&quot;,&quot;InstanceId&quot;,&quot;SessionId&quot;,&quot;Name&quot;,&quot;ChildJobs&quot;,&quot;Output&quot;,&quot;Error&quot;,&quot;Progress&quot;,&quot;Verbose&quot;,&quot;Debug&quot;,&quot;Warning&quot;,&quot;StateChanged&quot;

# Delete header from $j
C:\PS&gt; $j = $j[0], $j[2..($j.count - 1)]

$j | convertfrom-csv -header $header

MoreData      : True
StatusMessage : 
Location      : localhost
Command       : get-process
State         : Running
Finished      : System.Threading.ManualResetEvent
InstanceId    : 6fcb6578-7f42-4d93-9f23-9937f6aac1a2
SessionId     : 1
Name          : Job1
ChildJobs     : System.Collections.Generic.List`1[System.Management.Automation.Job]
Output        : System.Management.Automation.PSDataCollection`1[System.Management.Automation.PSObject]
Error         : System.Management.Automation.PSDataCollection`1[System.Management.Automation.ErrorRecord]
Progress      : System.Management.Automation.PSDataCollection`1[System.Management.Automation.ProgressRecord]
Verbose       : System.Management.Automation.PSDataCollection`1[System.String]
Debug         : System.Management.Automation.PSDataCollection`1[System.String]
Warning       : System.Management.Automation.PSDataCollection`1[System.String]
StateChanged  :                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 ConvertFrom-Csv 的 Header 参数来更改所得到的导入对象中的属性名称。

第一条命令使用 Start-Job cmdlet 启动一个后台作业，该作业在本地计算机上运行 Get-Process 命令。管道运算符 (|) 将生成的作业对象发送至 ConvertTo-CSV cmdlet，该 cmdlet 可将作业对象转换为 CSV 格式。分配运算符 (=) 将所得到的 CSV 保存在 $j 变量中。

第二条命令将标题保存在 $header 变量中。与默认标题不同，该标题使用“MoreData”和“State”，而不是“HasMoreData”和“JobStateInfo”。

第三条命令从 CSV 字符串中删除原标题（第二行），并将它返回到 $j 变量中。

第四条命令使用 ConvertFrom-CSV cmdlet 将 CSV 字符串转换为该作业对象的 CSV 版本。该命令使用管道运算符将 $j 中的内容发送至 ConvertFrom-CSV。所得到的对象具有“MoreData”和“State”属性，与标题所指定的一样。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-culture).textinfo.listseparator

C:\PS&gt; ConvertFrom-Csv -inputobject $services -UseCulture                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令使用 ConvertFrom-CSV cmdlet 将服务对象的 CSV 字符串进行转换，该字符串已由 ConvertTo-CSV cmdlet 转换过。该命令使用 UseCulture 参数来指示 ConvertFrom-CSV 使用当前区域性的分隔符（列表分隔符）。

在使用 UseCulture 参数时，请确保当前区域性的列表分隔符与 CSV 字符串中使用的分隔符相匹配。否则，ConvertFrom-CSV 无法基于 CSV 字符串生成对象。

此示例中，在使用 ConvertFrom-CSV 命令之前，使用 Get-Culture 命令来验证列表分隔符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135201</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertFrom-StringData
		</command:name>
		<maml:description>
			<maml:para>将包含一个或多个键-值对的字符串转换为哈希表。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>ConvertFrom</command:verb>
		<command:noun>StringData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>ConvertFrom-StringData cmdlet 将包含一个或多个键-值对的字符串转换为哈希表。由于每个键-值对必须位于一个单独的行上，所以经常使用 here-string 作为输入格式。

可将 ConvertFrom-StringData cmdlet 视为可在脚本或函数的 DATA 节中使用的安全 cmdlet。在 DATA 节中使用时，字符串的内容必须遵循 DATA 节的规则。有关详细信息，请参阅 about_Data_Sections。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertFrom-StringData</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>StringData</maml:name>
				<maml:description>
					<maml:para>指定要转换的字符串。可使用该参数或通过管道将字符串传递至 ConvertFrom-StringData。参数名为可选项。

该参数的值必须是括在单引号中的字符串（单引号字符串）或括在双引号中的字符串（双引号字符串），或包含一个或多个键-值对的 here-string。每个键-值对必须位于一个单独的行上，或每个键-值对必须由换行符 (`n) 分隔。
        
字符串中可包括注释，但是注释不能以键-值对的形式位于同一行上。哈希表中不包括注释。
        
here-string 是由一行或多行组成的字符串，在其中，按照字义解释引号。有关详细信息，请参阅 about_Quoting_Rules。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>StringData</maml:name>
			<maml:description>
				<maml:para>指定要转换的字符串。可使用该参数或通过管道将字符串传递至 ConvertFrom-StringData。参数名为可选项。

该参数的值必须是括在单引号中的字符串（单引号字符串）或括在双引号中的字符串（双引号字符串），或包含一个或多个键-值对的 here-string。每个键-值对必须位于一个单独的行上，或每个键-值对必须由换行符 (`n) 分隔。
        
字符串中可包括注释，但是注释不能以键-值对的形式位于同一行上。哈希表中不包括注释。
        
here-string 是由一行或多行组成的字符串，在其中，按照字义解释引号。有关详细信息，请参阅 about_Quoting_Rules。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可将包含一个键-值对的字符串通过管道传送至 ConvertFrom-StringData。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Collections.Hashtable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					ConvertFrom-StringData 返回它基于键-值对创建的哈希表。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          here-string 是由一行或多行组成的字符串，在其中，按照字义解释引号。有关详细信息，请参阅 about_Quoting_Rules。

在以多种口语显示用户消息的脚本中，ConvertFrom-StringData 非常有用。可使用字典风格的哈希表来从代码中隔离文本字符串（如在资源文件中），并为文本字符串设置格式以便在转换工具中使用。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$here = @'
Msg1 = The string parameter is required.
Msg2 = Credentials are required for this command.
Msg3 = The specified variable does not exist.
'@

C:\PS&gt; convertfrom-stringdata -stringdata $here

Name                           Value
----                           -----
Msg3                           The specified variable does not exist.
Msg2                           Credentials are required for this command.
Msg1                           The string parameter is required.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将用户消息中带单引号的 here-string 转换为一个哈希表。在带单引号的字符串中，不能使用变量和无法计算的表达式来代替其值。

第一个命令将创建一个 here-string，并将它保存在 $here 变量中。

第二个命令使用 ConvertFrom-StringData cmdlet 将 $here 变量中的 here-string 转换为哈希表。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$p = @&quot;
ISE = Windows PowerShell Integrated Scripting Environment
&quot;@

C:\PS&gt; $p | get-member

   TypeName: System.String

Name             MemberType            Definition
----             ----------            ----------
Clone            Method                System.Object Clone()
...


C:\PS&gt; $hash = convertfrom-stringdata -stringdata $p

C:\PS&gt; $hash | get-member

   TypeName: System.Collections.Hashtable

Name              MemberType            Definition
----              ----------            ----------
Add               Method                System.Void Add(Object key, Object
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令表明 ConvertFrom-StringData 实际上是将 here-string 转换为一个哈希表。

第一个命令创建一个带双引号的 here-string（该 here-string 包含一个键-值对），并将它保存在 $p 变量中。

第二条命令使用管道运算符 (|) 将 $p 变量发送至 Get-Member cmdlet。结果表明 $p 是一个字符串 (System.String)。

第三条命令使用 ConvertFrom-StringData cmdlet 将 $p 中的 here-string 转换为一个哈希表。该命令将结果存储在 $hash 变量中。

最后一个命令使用管道运算符 (|) 将 $hash 变量传送到 Get-Member cmdlet。结果表明 $hash 变量的内容是一个哈希表 (System.Collections.Hashtable)。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
convertfrom-stringdata -stringdata @'
   Name = Disks.ps1
   # Category is optional.
   Category = Storage
   Cost = Free
'@

Name                           Value
----                           -----
Cost                           Free
Category                       Storage
Name                           Disks.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将包含多个键-值对的带单引号的 here-string 转换为哈希表。

在此命令中，StringData 参数的值是一个 here-string，而不是一个包含 here-string 的变量。两种格式都有效。

here-string 包括有关某字符串的注释。假如注释与键-值对不在同一行上，则注释在字符串中是有效的。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = convertfrom-stringdata -stringdata &quot;Top = Red `n Bottom = Blue&quot;

C:\PS&gt; &quot;Top = &quot; + $a.Top
Top = Red

C:\PS&gt; &quot;Bottom = &quot; + $a.Bottom
Bottom = Blue                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例将一个带双引号的常规字符串（非 here-string）转换为一个哈希表，并将其保存在 $a 变量中。

为了满足每个键-值对必须在一个单独的行上的条件，它使用 Windows PowerShell 换行符 (`n) 来分隔这些对。

结果为一个由输入内容组成的哈希表。其余命令显示输出内容。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$TextMsgs = DATA {
  ConvertFrom-StringData @'
	Text001 = The $Notebook variable contains the 	name of the user's system notebook.
	Text002 = The $MyNotebook variable contains the 	name of the user's private notebook.
'@
}

C:\PS&gt; $TextMsgs.Text001
The $Notebook variable contains the name of the user's system notebook.


C:\PS&gt; $TextMsgs.Text002
The $MyNotebook variable contains the name of the user's private notebook.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了在脚本的 DATA 节中使用的 ConvertFrom-StringData 命令。DATA 节下面的语句向用户显示该文本。

由于文本包括变量名称，所以必须用单引号将它括起来，以便按照字义解释变量，而不是展开它。在 DATA 节中允许使用变量。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$here = @'
Msg1 = The string parameter is required.
Msg2 = Credentials are required for this command.
Msg3 = The specified variable does not exist.
'@

C:\PS&gt; $hash = $here | convertfrom-stringdata 

C:\PS&gt; $hash

Name     Value
----     -----
Msg3     The specified variable does not exist.
Msg2     Credentials are required for this command.
Msg1     The string parameter is required.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例表明您可使用管道运算符 (|) 将字符串发送至 ConvertFrom-StringData。

第一条命令将 here-string 保存在 $here 变量中。第二条命令使用管道运算符 (|) 将 $here 变量发送至 ConvertFrom-StringData。该命令将结果保存在 $hash 变量中。

最后一条命令显示 $hash 变量的内容。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113288</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Data_Sections</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Quoting_Rules</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Script_Internationalization</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertTo-CSV
		</command:name>
		<maml:description>
			<maml:para>将 Microsoft .NET Framework 对象转换为一系列以逗号分隔的 (CSV)、长度可变的字符串。
</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>ConvertTo</command:verb>
		<command:noun>CSV</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>ConvertTo-CSV cmdlet 返回一系列以逗号分隔的、长度可变的 (CSV) 字符串，该字符串表示您所提交的对象。然后可使用 ConvertFrom-CSV cmdlet 基于 CSV 字符串来重新创建对象。所得到的对象是原始对象的 CSV 版本，这些对象由属性值的字符串表示形式组成，且不含方法。

也可使用 Export-CSV 和 Import-CSV cmdlet 将 .NET Framework 对象转换为 CSV 字符串（或将 CSV 字符串转换为 .NET Framework 对象）。Export-CSV 与 ConvertTo-CSV 相同，区别是它将 CSV 字符串保存在文件中。

可使用 ConvertTo-CSV cmdlet 的参数来指定逗号以外的分隔符，或指示 ConvertTo-CSV 使用当前区域性的默认分隔符。

有关详细信息，请参阅 Export-CSV 和“注释”部分。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertTo-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Delimiter</maml:name>
				<maml:description>
					<maml:para>指定分隔符以分隔属性值。默认值为逗号 (,)。输入字符，例如冒号 (:)。

若要指定分号 (;)，请将它括在引号内。否则，会将它解释为命令分隔符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 ConvertTo-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoTypeInformation</maml:name>
				<maml:description>
					<maml:para>输出内容省略类型信息标题。默认情况下，输出内容中的字符串包含“#TYPE ”，其后为 .NET Framework 对象类型的完全限定名称。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>ConvertTo-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseCulture</maml:name>
				<maml:description>
					<maml:para>使用当前区域性的列表分隔符作为数据分隔符。默认值为逗号 (,)。

该参数对于向全球用户发布的脚本而言很有用。要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 ConvertTo-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoTypeInformation</maml:name>
				<maml:description>
					<maml:para>输出内容省略类型信息标题。默认情况下，输出内容中的字符串包含“#TYPE ”，其后为 .NET Framework 对象类型的完全限定名称。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Delimiter</maml:name>
			<maml:description>
				<maml:para>指定分隔符以分隔属性值。默认值为逗号 (,)。输入字符，例如冒号 (:)。

若要指定分号 (;)，请将它括在引号内。否则，会将它解释为命令分隔符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			<dev:type>
				<maml:name>char</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>,（逗号）</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 ConvertTo-CSV。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoTypeInformation</maml:name>
			<maml:description>
				<maml:para>输出内容省略类型信息标题。默认情况下，输出内容中的字符串包含“#TYPE ”，其后为 .NET Framework 对象类型的完全限定名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseCulture</maml:name>
			<maml:description>
				<maml:para>使用当前区域性的列表分隔符作为数据分隔符。默认值为逗号 (,)。

该参数对于向全球用户发布的脚本而言很有用。要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>逗号</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可将任何 .NET Framework 对象通过管道传递至 ConvertTo-CSV。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					返回 CSV 输出以作为字符串的集合。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          在 CSV 格式中，通过以逗号分隔的对象属性值列表来表示每个对象。将属性值转换为字符串（通过使用对象的 ToString() 方法），这样它们通常就可由属性值的名称来表示。ConvertTo-CSV 无法导出对象的方法。

所得到的 CSV 字符串的格式如下：

-- 第一个字符串包含“#TYPE”，后面为对象的 .NET Framework 类型的完全限定名称，如 #TYPE System.Diagnostics.Process。要取消显示该字符串，请使用 NoTypeInformation 参数。

-- 下一个字符串表示列标题。它包含以逗号分隔的列表，该列表列出了第一个对象的所有属性的名称。

-- 其余的字符串由以逗号分隔的列表组成，该列表列出了每个对象的属性值。

当向 ConvertTo-CSV 提交多个对象时，ConvertTo-CSV 基于所提交的第一个对象的属性来对字符串进行排序。如果其余对象不具有所指定的属性之一，则该对象的属性值为 null，即用两个相连的逗号表示。如果其余对象具有附加属性，则忽略这些属性。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process powershell | convertto-csv

#TYPE System.Diagnostics.Process
&quot;__NounName&quot;,&quot;Name&quot;,&quot;Handles&quot;,&quot;VM&quot;,&quot;WS&quot;,&quot;PM&quot;,&quot;NPM&quot;,&quot;Path&quot;,&quot;Company&quot;,&quot;CPU&quot;,&quot;FileVersion&quot;,&quot;ProductVersion&quot;,&quot;Description&quot;,
&quot;Product&quot;,&quot;BasePriority&quot;,&quot;ExitCode&quot;,&quot;HasExited&quot;,&quot;ExitTime&quot;,&quot;Handle&quot;,&quot;HandleCount&quot;,&quot;Id&quot;,&quot;MachineName&quot;,&quot;MainWindowHandle&quot;
,&quot;MainWindowTitle&quot;,&quot;MainModule&quot;,&quot;MaxWorkingSet&quot;,&quot;MinWorkingSet&quot;,&quot;Modules&quot;,&quot;NonpagedSystemMemorySize&quot;,&quot;NonpagedSystemMem
orySize64&quot;,&quot;PagedMemorySize&quot;,&quot;PagedMemorySize64&quot;,&quot;PagedSystemMemorySize&quot;,&quot;PagedSystemMemorySize64&quot;,&quot;PeakPagedMemorySize
&quot;,&quot;PeakPagedMemorySize64&quot;,&quot;PeakWorkingSet&quot;,&quot;PeakWorkingSet64&quot;,&quot;PeakVirtualMemorySize&quot;,&quot;PeakVirtualMemorySize64&quot;,&quot;Priori
tyBoostEnabled&quot;,&quot;PriorityClass&quot;,&quot;PrivateMemorySize&quot;,&quot;PrivateMemorySize64&quot;,&quot;PrivilegedProcessorTime&quot;,&quot;ProcessName&quot;,&quot;Proc
essorAffinity&quot;,&quot;Responding&quot;,&quot;SessionId&quot;,&quot;StartInfo&quot;,&quot;StartTime&quot;,&quot;SynchronizingObject&quot;,&quot;Threads&quot;,&quot;TotalProcessorTime&quot;,&quot;U
serProcessorTime&quot;,&quot;VirtualMemorySize&quot;,&quot;VirtualMemorySize64&quot;,&quot;EnableRaisingEvents&quot;,&quot;StandardInput&quot;,&quot;StandardOutput&quot;,&quot;Sta
ndardError&quot;,&quot;WorkingSet&quot;,&quot;WorkingSet64&quot;,&quot;Site&quot;,&quot;Container&quot;
&quot;Process&quot;,&quot;powershell&quot;,&quot;216&quot;,&quot;597544960&quot;,&quot;60399616&quot;,&quot;63197184&quot;,&quot;21692&quot;,&quot;C:\WINDOWS\system32\WindowsPowerShell\v1.0\powe
rshell.exe&quot;,&quot;Microsoft Corporation&quot;,&quot;3.4788223&quot;,&quot;6.1.6587.1 (fbl_srv_powershell(nigels).070711-0102)&quot;,&quot;6.1.6587.1&quot;,&quot;Win
dows PowerShell&quot;,&quot;Microsoft&#174; Windows&#174; Operating System&quot;,&quot;8&quot;,,&quot;False&quot;,,&quot;860&quot;,&quot;216&quot;,&quot;5132&quot;,&quot;.&quot;,&quot;5636936&quot;,&quot;Windows PowerSh
ell 2.0 (04/17/2008 00:10:40)&quot;,&quot;System.Diagnostics.ProcessModule (powershell.exe)&quot;,&quot;1413120&quot;,&quot;204800&quot;,&quot;System.Diagnosti
cs.ProcessModuleCollection&quot;,&quot;21692&quot;,&quot;21692&quot;,&quot;63197184&quot;,&quot;63197184&quot;,&quot;320080&quot;,&quot;320080&quot;,&quot;63868928&quot;,&quot;63868928&quot;,&quot;60715008&quot;,&quot;6
0715008&quot;,&quot;598642688&quot;,&quot;598642688&quot;,&quot;True&quot;,&quot;Normal&quot;,&quot;63197184&quot;,&quot;63197184&quot;,&quot;00:00:00.2028013&quot;,&quot;powershell&quot;,&quot;15&quot;,&quot;True&quot;,&quot;1&quot;,
&quot;System.Diagnostics.ProcessStartInfo&quot;,&quot;4/21/2008 3:49:19 PM&quot;,,&quot;System.Diagnostics.ProcessThreadCollection&quot;,&quot;00:00:03.51
00225&quot;,&quot;00:00:03.3072212&quot;,&quot;597544960&quot;,&quot;597544960&quot;,&quot;False&quot;,,,,&quot;60399616&quot;,&quot;60399616&quot;,,                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将单个进程对象转换为 CSV 格式。该命令使用 Get-Process cmdlet 来获取本地计算机中的 PowerShell 进程。它使用管道运算符 (|) 将命令发送至 ConvertTo-CSV cmdlet，该 cmdlet 将其转换为一系列以逗号分隔的字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$date = get-date

C:\PS&gt; convertto-csv -inputobject $date -delimiter &quot;;&quot; -notypeinformation                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例将日期对象转换为 CSV 格式。

第一条命令使用 Get-Date cmdlet 来获取当前日期，并将日期保存在 $date 变量中。

第二条命令使用 ConvertTo-CSV cmdlet 将 $date 变量中的 DateTime 对象转换为 CSV 格式。该命令使用 InputObject 参数来指定要转换的对象。它使用 Delimiter 参数来指定用来分隔对象属性的分隔符。它使用 NoTypeInformation 参数来取消显示 #TYPE 字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -log &quot;windows powershell&quot; | convertto-csv -useculture                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将本地计算机中的 Windows PowerShell 事件日志转换为一系列 CSV 字符串。

该命令使用 Get-EventLog cmdlet 来获取 Windows PowerShell 日志中的事件。管道运算符 (|) 将事件发送至 ConvertTo-CSV cmdlet，该 cmdlet 将事件转换为 CSV 格式。该命令使用 UseCulture 参数，该参数使用当前区域性的列表分隔符作为分隔符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135203</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertFrom-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertTo-Html
		</command:name>
		<maml:description>
			<maml:para>将 Microsoft .NET Framework 对象转换为可在 Web 浏览器中显示的 HTML。


</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>ConvertTo</command:verb>
		<command:noun>Html</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>ConvertTo-Html cmdlet 将 .NET Framework 对象转换为可在 Web 浏览器中显示的 HTML。可使用此 cmdlet 在网页上显示命令的输出内容。

可使用 ConvertTo-Html 的参数来选择对象属性、指定表格或列表格式、指定 HTML 页面标题，在对象前后添加文本，以及仅返回表格或列表片段，而不是完整的 DTD 页面。

当向 ConvertTo-Html 提交多个对象时，Windows PowerShell 基于所提交的第一个对象的属性来创建表格（或列表）。如果其余对象不具有所指定的属性之一，则该对象的属性值为空单元。如果其余对象具有附加属性，则在文件中不会包括这些属性。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertTo-Html</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>Head</maml:name>
				<maml:description>
					<maml:para>指定 &lt;HEAD&gt; 标记的内容。默认值为“&lt;title&gt;HTML TABLE&lt;/title&gt;”。如果使用 Head 参数，则忽略 Title 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Title</maml:name>
				<maml:description>
					<maml:para>指定 HTML 文件的标题，即在 &lt;TITLE&gt; 标记之间显示的文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="4">
				<maml:name>Body</maml:name>
				<maml:description>
					<maml:para>指定要在左 &lt;BODY&gt; 标记之后添加的文本。默认情况下，该位置没有文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CssUri</maml:name>
				<maml:description>
					<maml:para>指定层叠样式表 (CSS) 的统一资源标识符 (URI)，该 URI 将应用在 HTML 文件中。输出中的样式表链接中将包括该 URI。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Uri</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>在 HTML 中包括所指定的对象属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>As</maml:name>
				<maml:description>
					<maml:para>确定将对象设置为表格格式还是列表格式。有效值为 TABLE 和 LIST。默认值为 TABLE。

TABLE 值生成类似 Windows PowerShell 表格格式的 HTML 表。标题行显示属性名称。表格的每一行表示一个对象，并显示该对象的每个属性值。

LIST 值为每个对象生成一个包含两列的 HTML 表，该表类似于 Windows PowerShell 列表格式。第一列显示属性名称，第二列显示属性值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要用 HTML 表示的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

如果使用此参数来提交多个对象（如计算机中的所有服务），则 ConvertTo-Html 会创建一个表格，该表格显示集合的属性或对象数组 (System.Object[]) 的属性。要创建由单个对象组成的表格，请使用管道运算符通过管道将对象传递至 ConvertTo-Html。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PostContent</maml:name>
				<maml:description>
					<maml:para>指定要在右 &lt;/TABLE&gt; 标记之后添加的文本。默认情况下，该位置没有文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PreContent</maml:name>
				<maml:description>
					<maml:para>指定要在左 &lt;TABLE&gt; 标记之前添加的文本。默认情况下，该位置没有文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>ConvertTo-Html</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Fragment</maml:name>
				<maml:description>
					<maml:para>仅生成一个 HTML 表。省略了 HTML、HEAD、TITLE 和 BODY 标记。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>在 HTML 中包括所指定的对象属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>As</maml:name>
				<maml:description>
					<maml:para>确定将对象设置为表格格式还是列表格式。有效值为 TABLE 和 LIST。默认值为 TABLE。

TABLE 值生成类似 Windows PowerShell 表格格式的 HTML 表。标题行显示属性名称。表格的每一行表示一个对象，并显示该对象的每个属性值。

LIST 值为每个对象生成一个包含两列的 HTML 表，该表类似于 Windows PowerShell 列表格式。第一列显示属性名称，第二列显示属性值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要用 HTML 表示的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

如果使用此参数来提交多个对象（如计算机中的所有服务），则 ConvertTo-Html 会创建一个表格，该表格显示集合的属性或对象数组 (System.Object[]) 的属性。要创建由单个对象组成的表格，请使用管道运算符通过管道将对象传递至 ConvertTo-Html。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PostContent</maml:name>
				<maml:description>
					<maml:para>指定要在右 &lt;/TABLE&gt; 标记之后添加的文本。默认情况下，该位置没有文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PreContent</maml:name>
				<maml:description>
					<maml:para>指定要在左 &lt;TABLE&gt; 标记之前添加的文本。默认情况下，该位置没有文本。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>As</maml:name>
			<maml:description>
				<maml:para>确定将对象设置为表格格式还是列表格式。有效值为 TABLE 和 LIST。默认值为 TABLE。

TABLE 值生成类似 Windows PowerShell 表格格式的 HTML 表。标题行显示属性名称。表格的每一行表示一个对象，并显示该对象的每个属性值。

LIST 值为每个对象生成一个包含两列的 HTML 表，该表类似于 Windows PowerShell 列表格式。第一列显示属性名称，第二列显示属性值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>表格</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="4">
			<maml:name>Body</maml:name>
			<maml:description>
				<maml:para>指定要在左 &lt;BODY&gt; 标记之后添加的文本。默认情况下，该位置没有文本。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无文本。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CssUri</maml:name>
			<maml:description>
				<maml:para>指定层叠样式表 (CSS) 的统一资源标识符 (URI)，该 URI 将应用在 HTML 文件中。输出中的样式表链接中将包括该 URI。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Uri</command:parameterValue>
			<dev:type>
				<maml:name>Uri</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Fragment</maml:name>
			<maml:description>
				<maml:para>仅生成一个 HTML 表。省略了 HTML、HEAD、TITLE 和 BODY 标记。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Head</maml:name>
			<maml:description>
				<maml:para>指定 &lt;HEAD&gt; 标记的内容。默认值为“&lt;title&gt;HTML TABLE&lt;/title&gt;”。如果使用 Head 参数，则忽略 Title 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>&lt;title&gt;HTML TABLE&lt;/title&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要用 HTML 表示的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

如果使用此参数来提交多个对象（如计算机中的所有服务），则 ConvertTo-Html 会创建一个表格，该表格显示集合的属性或对象数组 (System.Object[]) 的属性。要创建由单个对象组成的表格，请使用管道运算符通过管道将对象传递至 ConvertTo-Html。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>PostContent</maml:name>
			<maml:description>
				<maml:para>指定要在右 &lt;/TABLE&gt; 标记之后添加的文本。默认情况下，该位置没有文本。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无文本</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>PreContent</maml:name>
			<maml:description>
				<maml:para>指定要在左 &lt;TABLE&gt; 标记之前添加的文本。默认情况下，该位置没有文本。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无文本</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>在 HTML 中包括所指定的对象属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Title</maml:name>
			<maml:description>
				<maml:para>指定 HTML 文件的标题，即在 &lt;TITLE&gt; 标记之间显示的文本。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将任何 .NET 对象传递至 ConvertTo-Html。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					ConvertTo-Html 返回一系列包含有效 HTML 的字符串。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          要使用该 cmdlet，请通过管道将一个或多个对象传递至该 cmdlet，或使用 InputObject 参数来指定该对象。当输入内容由多个对象组成时，这两种方法的输出将完全不同。

--  当通过管道将多个对象传递至某个 cmdlet 时，Windows PowerShell 会将这些对象按照每次一个的方式发送至该 cmdlet。因此，ConvertTo-Html 会创建一个显示单个对象的表格。例如，如果通过管道将计算机上的进程传递至 ConvertTo-Html，则所得到的表格会将这些进程全部显示出来。

--  当使用 InputObject 参数来提交多个对象时，ConvertTo-Html 会将这些对象作为一个集合或数组来接收。因此，它会创建一个表格，该表格显示数组及其属性，数组中没有项。例如，如果使用 InputObject 向 ConvertTo-Html 提交计算机中的进程，则所得到的表格会显示一个对象数组 (System.Object[]) 及其属性。

为了与 XHTML Strict DTD 一致，将相应修改 DOCTYPE 标记：
(&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;)
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
convertto-html -inputobject (get-date)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建用来显示当前日期的属性的 HTML 页。它使用 InputObject 参数将 Get-Date 命令的结果提交到 ConvertTo-Html cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias | convertto-html &gt; aliases.htm

C:\PS&gt; invoke-item aliases.htm                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建 HTML 页，该页列出当前控制台中的 Windows PowerShell 别名。

该命令使用 Get-Alias cmdlet 来获取这些别名。它使用管道运算符 (|) 将别名发送至 ConvertTo-Html cmdlet，该 cmdlet 将创建 HTML 页。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -logname &quot;Windows PowerShell | convertto-html &gt; pslog.htm                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建一个名为 pslog.htm 的 HTML 页，该页显示本地计算机上 Windows PowerShell 事件日志中的事件。

它使用 Get-EventLog cmdlet 获取 Windows PowerShell 日志中的事件，然后使用管道运算符 (|) 将事件发送至 ConvertTo-Html cmdlet。

该命令还使用重定向运算符 (&gt;) 将 HTML 代码发送至 pslog.htm 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | convertto-html -property Name, Path, Company -title &quot;Process Information&quot; &gt; proc.htm; ii proc.htm                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令创建并打开的 HTML 页列出本地计算机上进程的名称、路径和所属公司。

第一条命令使用 Get-Process cmdlet 获取用来表示计算机中运行的进程的对象。该命令使用管道运算符 (|) 将进程对象发送至 ConvertTo-Html cmdlet。

该命令使用 Property 参数来选择表中要包括的进程对象的三个属性。该命令使用 Title 参数来指定 HTML 页的标题。它还使用重定向运算符 (&gt;) 将所得到的 HTML 发送至名为 Proc.htm 的文件。

第二条命令使用 Invoke-Item cmdlet （别名为 ii）在默认浏览器中打开 Proc.htm。这两个命令以分号 (;) 来分隔。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | convertto-html -CssUri &quot;test.css&quot;

&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;       &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;HTML TABLE&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;test.css&quot; /&gt;
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令创建 Get-Service cmdlet 返回的服务对象的 HTML 页。该命令使用 CssUri 参数来指定 HTML 页的层叠样式表。

CssUri 参数向所得到的 HTML 添加附加的“&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css”标记。标记中的 HREF 属性包含样式表的名称。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | convertto-html -as LIST &gt; services.htm                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令创建 Get-Service cmdlet 返回的服务对象的 HTML 页。该命令使用 As 参数来指定列表格式。重定向运算符 (&gt;) 将得到的 HTML 发送至 Services.htm 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date | cth -fragment

&lt;table&gt;
&lt;colgroup&gt;...&lt;/colgroup&gt;
&lt;tr&gt;&lt;th&gt;DisplayHint&lt;/th&gt;&lt;th&gt;DateTime&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Day&lt;/th&gt;&lt;th&gt;DayOfWeek&lt;/th&gt;&lt;th&gt;DayOfYear&lt;/th&gt;&lt;th&gt;Hour&lt;/th&gt;&lt;th&gt;
Kind&lt;/th&gt;&lt;th&gt;Millisecond&lt;/th&gt;&lt;th&gt;Minute&lt;/th&gt;&lt;th&gt;Month&lt;/th&gt;&lt;th&gt;Second&lt;/th&gt;&lt;th&gt;Ticks&lt;/th&gt;&lt;th&gt;TimeOfDay&lt;/th&gt;&lt;th&gt;Year&lt;/th&gt;&lt;
/tr&gt;
&lt;tr&gt;&lt;td&gt;DateTime&lt;/td&gt;&lt;td&gt;Monday, May 05, 2008 10:40:04 AM&lt;/td&gt;&lt;td&gt;5/5/2008 12:00:00 AM&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Monday&lt;/td&gt;&lt;td
&gt;126&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;Local&lt;/td&gt;&lt;td&gt;123&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;633455808041237213&lt;/td&gt;&lt;td&gt;10:40:04.12
37213&lt;/td&gt;&lt;td&gt;2008&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令使用 ConvertTo-Html 来生成当前日期的 HTML 表。该命令使用 Get-Date cmdlet 获取当前日期。它还使用管道运算符 (|) 将结果发送至 ConvertTo-Html cmdlet（别名为“cth”）。

该 ConvertTo-Html 命令包括 Fragment 参数，该参数限制向 HTML 表进行的输出。因此，将忽略 HTML 页的其他元素，如 &lt;HEAD&gt; 和 &lt;BODY&gt; 标记。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -log &quot;Windows PowerShell&quot; | convertto-html -property id, level, task                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令使用 Get-EventLog cmdlet 从“Windows PowerShell”事件日志中获取事件。

它使用管道运算符 (|) 将事件发送至 ConvertTo-Html cmdlet，该 cmdlet 将事件转换为 HTML 格式。

ConvertTo-Html 命令使用 Property 参数来仅选择事件的 ID、Level 和 Task 属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service A* | ConvertTo-Html -title &quot;Windows Services: Server01&quot; -body (get-date) -pre &quot;&lt;P&gt;Generated by Corporate IT&lt;/P
&gt;&quot; -post &quot;For details, contact Corporate IT.&quot; &gt; services.htm; ii services.htm                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令创建并打开网页，该页显示计算机中以“A”开头的服务。它使用 ConvertTo-Html 的 Title、Body、PreContent 和 PostContent 参数来自定义输出。

该命令的第一部分使用 Get-Service cmdlet 来获取计算机中以“A”开头的服务。命令使用管道运算符 (|) 将结果发送至 ConvertTo-Html cmdlet。命令还使用重定向运算符 (&gt;) 将输出发送至 Services.htm 文件。

分号 (;) 结束第一个命令并启动第二个命令，第二个命令使用 Invoke-Item cmdlet（别名为“ii”）在默认浏览器中打开 Services.htm 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113290</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Xml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertTo-XML
		</command:name>
		<maml:description>
			<maml:para>创建对象的基于 XML 的表示形式。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>ConvertTo</command:verb>
		<command:noun>XML</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>ConvertTo-Xml cmdlet 创建一个或多个 Microsoft .NET Framework 对象的基于 XML 的表示形式。若要使用此 cmdlet，请通过管道将一个或多个对象传递至该 cmdlet，或使用 InputObject 参数来指定该对象。

当通过管道将多个对象传递至 ConvertTo-XML 或使用 InputObject 参数来提交多个对象时，ConvertTo-XML 会返回单个 XML 文档，该文档包括所有对象的表示形式。

除了 Export-Clixml 将所得到的 XML 存储在文件中以外，此 cmdlet 与 Export-Clixml 相似。ConvertTo-XML 会返回 XML，因此可在 Windows PowerShell 中继续处理它。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertTo-XML</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要转换的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。也可将对象通过管道传递至 ConvertTo-XML。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>As</maml:name>
				<maml:description>
					<maml:para>确定输出格式。有效值包括：

-- String：返回单个字符串。
-- Stream：返回一个字符串数组。
-- Document：返回一个 XmlDocument 对象。

默认值为 Stream。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Depth</maml:name>
				<maml:description>
					<maml:para>指定包含在 XML 表示形式中的被包含对象的级别数。默认值为 1。

例如，如果对象属性也包含对象，那么要对被包含对象的属性的 XML 表示形式进行保存，则必须将级别深度指定为 2。

可以将 Types.ps1xml 文件中对象类型的默认值覆盖。有关详细信息，请参阅 about_Types.ps1xml。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoTypeInformation</maml:name>
				<maml:description>
					<maml:para>省略对象节点的 Type 属性。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>As</maml:name>
			<maml:description>
				<maml:para>确定输出格式。有效值包括：

-- String：返回单个字符串。
-- Stream：返回一个字符串数组。
-- Document：返回一个 XmlDocument 对象。

默认值为 Stream。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>流</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Depth</maml:name>
			<maml:description>
				<maml:para>指定包含在 XML 表示形式中的被包含对象的级别数。默认值为 1。

例如，如果对象属性也包含对象，那么要对被包含对象的属性的 XML 表示形式进行保存，则必须将级别深度指定为 2。

可以将 Types.ps1xml 文件中对象类型的默认值覆盖。有关详细信息，请参阅 about_Types.ps1xml。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue)" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要转换的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。也可将对象通过管道传递至 ConvertTo-XML。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoTypeInformation</maml:name>
			<maml:description>
				<maml:para>省略对象节点的 Type 属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 ConvertTo-XML。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String 或 System.Xml.XmlDocument</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					As 参数的值确定由 ConvertTo-XML 返回的对象类型。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date | convertto-xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将当前日期（DateTime 对象）转换为 XML。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
convertto-xml -as Document -inputObject (get-process) -depth 3                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将表示计算机上所有进程的进程对象转换为一个 XML 文档。这些对象的深度将扩展至三层。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135204</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Clixml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Clixml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Html</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Csv</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Disable-PSBreakpoint
		</command:name>
		<maml:description>
			<maml:para>禁用当前控制台中的断点。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Disable</command:verb>
		<command:noun>PSBreakpoint</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Disable-PSBreakpoint cmdlet 禁用断点，以确保在脚本运行时不会命中断点。可使用它来禁用所有断点，或者可通过提交断点对象或断点 ID 来指定断点。

在技术上，该 cmdlet 将断点对象的 Enabled 属性值更改为 False。要重新启用断点，请使用 Enable-PSBreakpoint cmdlet。当使用 Set-PSBreakpoint cmdlet 来创建断点时，将默认启用断点。

断点是脚本中的一个点，在该处，将暂时停止执行脚本，从而使您可以检查脚本中的指令。Disable-PSBreakpoint 是设计用来调试 Windows PowerShell 脚本的多个 cmdlet 之一。有关 Windows PowerShell 调试程序的详细信息，请参阅 about_Debuggers。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Disable-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Id</maml:name>
				<maml:description>
					<maml:para>禁用具有指定断点 ID 的断点。输入 ID 或包含 ID 的变量。无法通过管道将 ID 传递至 Disable-PSBreakpoint。
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Disable-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Breakpoint</maml:name>
				<maml:description>
					<maml:para>指定要禁用的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。还可通过管道将断点对象传递至 Disable-PSBreakpoint cmdlet。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Breakpoint</maml:name>
			<maml:description>
				<maml:para>指定要禁用的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。还可通过管道将断点对象传递至 Disable-PSBreakpoint cmdlet。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			<dev:type>
				<maml:name>Breakpoint[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Id</maml:name>
			<maml:description>
				<maml:para>禁用具有指定断点 ID 的断点。输入 ID 或包含 ID 的变量。无法通过管道将 ID 传递至 Disable-PSBreakpoint。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.Breakpoint</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将断点对象传递至 Disable-PSBreakpoint。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.Breakpoint</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Disable-PSBreakpoint 返回一个表示被禁用断点的对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$b = set-psbreakpoint -script sample.ps1 -variable name

C:\PS&gt; $b | disable-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令禁用新创建的断点。

第一个命令使用 Set-PSBreakpoint cmdlet 在 Sample.ps1 脚本中的 Name 变量上创建断点。然后，它将断点对象保存在 $b 变量中。

第二条命令使用 Disable-PSBreakpoint cmdlet 来禁用新断点。它使用管道运算符 (|) 将 $b 中的断点对象发送至 Disable-PSBreakpoint cmdlet。

此命令的结果是：$b 中断点对象的 Enabled 属性值是 False。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
disable-psbreakpoint -id 0                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令禁用断点 ID 为 0 的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
disable-psbreakpoint -breakpoint ($b = set-psbreakpoint -script sample.ps1 -line 5) 

C:\PS&gt; $b                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建新断点，在您启用该断点之前，该断点将一直禁用。

此命令使用 Disable-PSBreakpoint cmdlet 来禁用断点。Breakpoint 参数的值为 Set-PSBreakpoint 命令，该命令可设置新断点、生成断点对象，并将对象保存在 $b 变量中。

Cmdlet 参数以对象作为值，可接受包含对象的变量，或者是可以获取或生成对象的命令。在此情况下，由于 Set-PSBreakpoint 生成断点对象，因此它可作为 Breakpoint 参数的值来使用。

第二条命令显示 $b 变量值中的断点对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint | disable-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令禁用当前控制台中的所有断点。可将此命令缩写为：“gbp | dbp”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113294</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSCallStack</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Enable-PSBreakpoint
		</command:name>
		<maml:description>
			<maml:para>启用当前控制台中的断点。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Enable</command:verb>
		<command:noun>PSBreakpoint</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Enable-PSBreakpoint cmdlet 可将已禁用的断点重新启用。可使用它来启用所有断点，或者可通过提交断点对象或断点 ID 来指定断点。

断点是脚本中的一个点，在该处，将暂时停止执行脚本，从而使您可以检查脚本中的指令。新建的断点会自动启用，但是可通过使用 Disable-PSBreakpoint cmdlet 来禁用它们。

在技术上，该 cmdlet 将断点对象的 Enabled 属性值更改为 True。

Enable-PSBreakpoint 是设计用来调试 Windows PowerShell 脚本的多个 cmdlet 之一。有关 Windows PowerShell 调试程序的详细信息，请参阅 about_Debuggers。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Enable-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Id</maml:name>
				<maml:description>
					<maml:para>启用具有指定断点 ID 的断点。默认值为所有断点。输入 ID 或包含 ID 的变量。（无法通过管道将 ID 传递至 Enable-PSBreakpoint。）要查找某个断点的 ID，请使用 Get-PSBreakpoint cmdlet。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Enable-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Breakpoint</maml:name>
				<maml:description>
					<maml:para>指定要启用的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。还可通过管道将断点对象传递至 Enable-PSBreakpoint。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Breakpoint</maml:name>
			<maml:description>
				<maml:para>指定要启用的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。还可通过管道将断点对象传递至 Enable-PSBreakpoint。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			<dev:type>
				<maml:name>Breakpoint[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Id</maml:name>
			<maml:description>
				<maml:para>启用具有指定断点 ID 的断点。默认值为所有断点。输入 ID 或包含 ID 的变量。（无法通过管道将 ID 传递至 Enable-PSBreakpoint。）要查找某个断点的 ID，请使用 Get-PSBreakpoint cmdlet。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示已启用的断点的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无输出</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.Breakpoint</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将断点对象传递至 Enable-PSBreakpoint。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.Breakpoint</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Enable-PSBreakpoint 返回一个表示已启用的断点的断点对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          如果您试图启用一个已经启用的断点，则 Enable-PSBreakpoint cmdlet 不会生成错误。因此，可启用所有断点且不发生任何错误，即使它们中仅有部分处于禁用状态。

当通过使用 Set-PSBreakpoint cmdlet 来创建断点时会启用断点。无需启用新创建的断点。

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint | enable-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令启用当前控制台中的所有断点。可将该命令缩写为“gbp | ebp”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
enable-psbreakpoint -id 0, 1, 5                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令启用断点 ID 为 0、1 和 5 的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$b = set-psbreakpoint -script sample.ps1 -variable Name

C:\PS&gt; $b | disable-psbreakpoint -passthru

AccessMode : Write
Variable   : Name
Action     :
Enabled    : False
HitCount   : 0
Id         : 0
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1

C:\PS&gt; $b | enable-psbreakpoint -passthru

AccessMode : Write
Variable   : Name
Action     :
Enabled    : True
HitCount   : 0
Id         : 0
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令重新启用已禁用的断点。

第一条命令使用 Set-PSBreakpoint cmdlet 在 Sample.ps1 脚本中的“Name”变量上创建断点。然后，它将断点对象保存在 $b 变量中。

第二条命令使用 Disable-PSBreakpoint cmdlet 来禁用新断点。它使用管道运算符 (|) 将 $b 中的断点对象发送至 Disable-PSBreakpoint cmdlet，并使用 Disable-PSBreakpoint 的 PassThru 参数来显示已禁用的断点对象。这使您可以验证断点对象的 Enabled 属性值是否为 False。

第三条命令使用 Enable-PSBreakpoint cmdlet 来重新启用断点。它使用管道运算符 (|) 将 $b 中的断点对象发送至 Enable-PSBreakpoint cmdlet，并使用 Enable-PSBreakpoint 的 PassThru 参数来显示该断点对象。这使您可以验证断点对象的 Enabled 属性值为 True。

结果显示在下面的示例输出中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$b = get-psbreakpoint -id 3, 5

C:\PS&gt; enable-psbreakpoint -breakpoint $b                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令通过指定它们的断点对象来启用一组断点。

第一个命令使用 Get-PSBreakpoint cmdlet 来获取断点，并将它们保存在 $b 变量中。

第二个命令使用 Enable-PSBreakpoint cmdlet 及其 Breakpoint 参数来启用断点。
此命令与“enable-psbreakpoint -id 3, 5”等效。
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113295</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSCallStack</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Alias
		</command:name>
		<maml:description>
			<maml:para>将当前定义的别名相关信息导出到文件中。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Export</command:verb>
		<command:noun>Alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Export-Alias cmdlet 将当前会话中的别名导出到一个文件中。如果输出文件不存在，该 cmdlet 将创建此输出文件。

Export-Alias 可将特定作用域或所有作用域中的别名导出，并可生成 CSV 格式的数据或一系列 Set-Alias 命令（可将这些命令添加到会话或 Windows PowerShell 配置文件中）。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定输出文件的路径。允许使用通配符，但所得到的路径值必须解析为单个文件名。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要导出的别名名称。允许使用通配符。

默认情况下，Export-Alias 导出会话或作用域中的所有别名。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Append</maml:name>
				<maml:description>
					<maml:para>将输出追加到指定的文件中，而不是覆盖该文件的现有内容。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>As</maml:name>
				<maml:description>
					<maml:para>确定输出格式。默认值为 CSV。

有效值包括：

-- CSV：逗号分隔的值 (CSV) 格式。
-- Script：为每个导出的别名创建 Set-Alias 命令。如果使用 .ps1 文件扩展名为输出文件命名，则可将其作为脚本来运行以向任何会话中添加别名。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Csv</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Script</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>为导出文件添加说明。说明将作为注释显示在文件顶部的标题信息之后。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖输出文件，即使为该文件设置了只读属性。

默认情况下，Export-Alias 不发出警告就覆盖文件，除非设置了只读或隐藏属性，或在命令中使用了 NoClobber 参数。当命令中同时使用了 NoClobber 和 Force 参数时，前者优先于后者。

Force 参数不能强制 Export-Alias 覆盖具有隐藏属性的文件。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>即使在命令中使用了 Force 参数，也阻止 Export-Alias 覆盖任何文件。

如果省略了 NoClobber 参数，则 Export-Alias 将不发出警告就覆盖现有文件，除非为文件设置了只读属性。NoClobber 优先于 Force 参数，允许 Export-Alias 覆盖具有只读属性的文件。

NoClobber 并不阻止 Append 参数向现有文件中添加内容。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示已导出的别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定应从其中导出别名的作用域。

有效值是“Global”、“Local”或“Script”，或者相对于当前作用域的数字（0 到作用域的数目，其中 0 是当前作用域，1 是它的父级）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Append</maml:name>
			<maml:description>
				<maml:para>将输出追加到指定的文件中，而不是覆盖该文件的现有内容。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>As</maml:name>
			<maml:description>
				<maml:para>确定输出格式。默认值为 CSV。

有效值包括：

-- CSV：逗号分隔的值 (CSV) 格式。
-- Script：为每个导出的别名创建 Set-Alias 命令。如果使用 .ps1 文件扩展名为输出文件命名，则可将其作为脚本来运行以向任何会话中添加别名。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ExportAliasFormat</command:parameterValue>
			<dev:type>
				<maml:name>ExportAliasFormat</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>为导出文件添加说明。说明将作为注释显示在文件顶部的标题信息之后。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>覆盖输出文件，即使为该文件设置了只读属性。

默认情况下，Export-Alias 不发出警告就覆盖文件，除非设置了只读或隐藏属性，或在命令中使用了 NoClobber 参数。当命令中同时使用了 NoClobber 和 Force 参数时，前者优先于后者。

Force 参数不能强制 Export-Alias 覆盖具有隐藏属性的文件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>不覆盖只读文件。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要导出的别名名称。允许使用通配符。

默认情况下，Export-Alias 导出会话或作用域中的所有别名。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>导出所有别名</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoClobber</maml:name>
			<maml:description>
				<maml:para>即使在命令中使用了 Force 参数，也阻止 Export-Alias 覆盖任何文件。

如果省略了 NoClobber 参数，则 Export-Alias 将不发出警告就覆盖现有文件，除非为文件设置了只读属性。NoClobber 优先于 Force 参数，允许 Export-Alias 覆盖具有只读属性的文件。

NoClobber 并不阻止 Append 参数向现有文件中添加内容。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>覆盖读写文件。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示已导出的别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无输出</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定输出文件的路径。允许使用通配符，但所得到的路径值必须解析为单个文件名。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定应从其中导出别名的作用域。

有效值是“Global”、“Local”或“Script”，或者相对于当前作用域的数字（0 到作用域的数目，其中 0 是当前作用域，1 是它的父级）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Local</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 Passthru 参数，则 Export-Alias 返回一个表示该别名的 System.Management.Automation.AliasInfo 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          只能使用 Export-Alias 导出到一个文件。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
export-alias -path alias.csv                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将当前别名信息导出到当前目录下名为 Alias.csv 的文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
export-alias -path alias.csv -noclobber                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将当前会话中的别名导出到名为 Alias.csv 的文件中。

由于指定了 NoClobber 参数，所以，如果当前目录下已存在 Alias.csv 文件，则该命令会失败。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
export-alias -path alias.csv -append -description &quot;Appended Aliases&quot; -force                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将当前会话中的别名附加到名为 Alias.csv 的文件中。

该命令使用 Description 参数为文件顶部的注释添加说明。

该命令还使用 Force 参数来覆盖任何现有的 Alias.csv 文件，即使它们具有只读属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
export-alias -path alias.ps1 -as script

C:\PS&gt; add-content -path $profile -value (get-content alias.ps1)

C:\PS&gt; $s = new-pssession -computername Server01
C:\PS&gt; invoke-command -session $s -filepath .\alias.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Export-Alias 生成的脚本文件格式。

第一条命令将会话中的别名导出到 Alias.ps1 文件中。它使用具有 Script 值的 As 参数来为每个别名生成包含 Set-Alias 命令的文件。

第二条命令将 Alias.ps1 文件中的别名添加到 CurrentUser-CurrentHost 配置文件中。（配置文件的路径保存在 $profile 变量中。）该命令使用 Get-Content cmdlet 从 Alias.ps1 文件中获取别名，然后 Add-Content cmdlet 将别名添加到配置文件中。有关详细信息，请参阅 about_Profiles。

第三和第四条命令将 Alias.ps1 文件中的别名添加到 Server01 计算机中的远程会话中。第三条命令使用 New-PSSession cmdlet 来创建会话。第四条命令使用 Invoke-Command cmdlet 的 FilePath 参数来在新会话中运行 Alias.ps1 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113296</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Clixml
		</command:name>
		<maml:description>
			<maml:para>创建对象的基于 XML 的表示形式并将其存储在文件中。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Export</command:verb>
		<command:noun>Clixml</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Export-Clixml cmdlet 创建对象的基于 XML 的表示形式并将其存储在文件中。随后，可以使用 Import-CLIXML cmdlet 基于该文件的内容来重新创建保存的对象。

除 Export-Clixml 将所得到的 XML 存储在文件中以外，此 cmdlet 类似于 ConvertTo-XML。ConvertTo-XML 返回 XML，因此您可在 Windows PowerShell 中继续处理它。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Clixml</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定对象的 XML 表示形式要存储到其中的文件的路径。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要转换的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。也可将对象通过管道传递至 Export-Clixml。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Depth</maml:name>
				<maml:description>
					<maml:para>指定包含在 XML 表示形式中的被包含对象的级别数。默认值为 2。

可以将 Types.ps1xml 文件中对象类型的默认值覆盖。有关详细信息，请参阅 about_Types.ps1xml。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>为目标文件指定编码类型。有效值包括 ASCII、UTF8、UTF7、UTF32、Unicode、BigEndianUnicode、Default 和 OEM。默认值为 UTF8。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>可导致 cmdlet 清除输出文件的只读属性（如果需要）。在该命令完成后，cmdlet 将尝试重置只读属性。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>确保 cmdlet 不会覆盖现有文件的内容。默认情况下，如果指定的路径中存在同名文件，则 Export-Clixml 将覆盖该文件，而不会发出警告。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Depth</maml:name>
			<maml:description>
				<maml:para>指定包含在 XML 表示形式中的被包含对象的级别数。默认值为 2。

可以将 Types.ps1xml 文件中对象类型的默认值覆盖。有关详细信息，请参阅 about_Types.ps1xml。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>2</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>为目标文件指定编码类型。有效值包括 ASCII、UTF8、UTF7、UTF32、Unicode、BigEndianUnicode、Default 和 OEM。默认值为 UTF8。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>UTF8</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>可导致 cmdlet 清除输出文件的只读属性（如果需要）。在该命令完成后，cmdlet 将尝试重置只读属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要转换的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。也可将对象通过管道传递至 Export-Clixml。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoClobber</maml:name>
			<maml:description>
				<maml:para>确保 cmdlet 不会覆盖现有文件的内容。默认情况下，如果指定的路径中存在同名文件，则 Export-Clixml 将覆盖该文件，而不会发出警告。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定对象的 XML 表示形式要存储到其中的文件的路径。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Export-Clixml。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.IO.FileInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Export-Clixml 将创建一个包含 XML 的文件。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;This is a test&quot; | export-clixml sample.xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将创建存储字符串表示形式的 XML 文件，例如“This is a test”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-acl C:\test.txt | export-clixml -Path fileacl.xml

C:\PS&gt; $fileacl = import-clixml fileacl.xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何将对象导出到 XML 文件中，然后通过从文件中导入 XML 来创建对象。

第一条命令使用 Get-ACL cmdlet 来获取 Test.txt 文件的安全描述符。它使用管道运算符将安全描述符传递至 Export-Clixml，后者将对象的基于 XML 的表示形式存储在名为 FileACL.xml 的文件中。

第二条命令使用 Import-Clixml cmdlet 基于 FileACL.xml 文件中的 XML 创建对象。然后，它将对象保存在 $FileAcl 变量中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113297</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Clixml</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-XML</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Csv</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Html</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-CSV
		</command:name>
		<maml:description>
			<maml:para>将 Microsoft .NET Framework 对象转换为一系列以逗号分隔的、长度可变的 (CSV) 字符串，并将这些字符串保存到一个 CSV 文件中。
</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Export</command:verb>
		<command:noun>CSV</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Export-CSV cmdlet 创建一个长度可变的 CSV 文件，该文件表示所提交的对象。
然后，可使用 Import-CSV cmdlet 基于文件中的 CSV 字符串重新创建对象。所得到的对象是原始对象的 CSV 版本，这些对象由属性值的字符串表示形式组成，且不含方法。

也可使用 ConvertTo-CSV 和 ConvertFrom-CSV cmdlet 将 .NET Framework 对象转换为 CSV 字符串（或将 CSV 字符串转换为 .NET Framework 对象）。Export-CSV 与 ConvertTo-CSV 相同，区别是它将 CSV 字符串保存在文件中。

可使用 Export-CSV cmdlet 的参数来指定逗号以外的分隔符，或指示 Export-CSV 使用当前区域性的默认分隔符。

当向 Export-CSV 提交多个对象时，Export-CSV 基于所提交的第一个对象的属性来组织文件。如果其余对象不具有所指定的属性之一，则该对象的属性值为 null，即用两个相连的逗号表示。如果其余对象具有附加属性，则在文件中不会包括这些属性。

有关详细信息，请参阅 Export-CSV 和“注释”部分。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Delimiter</maml:name>
				<maml:description>
					<maml:para>指定分隔符以分隔属性值。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定 CSV 输出文件的路径。该参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 Export-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>为导出的 CSV 文件指定编码。有效值是 Unicode、UTF7、UTF8、ASCII、UTF32、BigEndianUnicode、Default 和 OEM。默认值是 ASCII。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖路径中指定的文件，而不提示您进行确认。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>不覆盖现有文件（替换内容）。默认情况下，如果指定的路径中存在同名文件，则 Export-CSV 将覆盖该文件，而不会发出警告。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoTypeInformation</maml:name>
				<maml:description>
					<maml:para>忽略 CSV 文件中的类型信息。默认情况下，CSV 文件的第一行包含“#TYPE ”，后面为 .NET Framework 对象类型的完全限定名称。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Export-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseCulture</maml:name>
				<maml:description>
					<maml:para>使用当前区域性的列表分隔符作为项目分隔符。默认值为逗号 (,)。

该参数对于向全球用户发布的脚本而言很有用。要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定 CSV 输出文件的路径。该参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 Export-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>为导出的 CSV 文件指定编码。有效值是 Unicode、UTF7、UTF8、ASCII、UTF32、BigEndianUnicode、Default 和 OEM。默认值是 ASCII。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖路径中指定的文件，而不提示您进行确认。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>不覆盖现有文件（替换内容）。默认情况下，如果指定的路径中存在同名文件，则 Export-CSV 将覆盖该文件，而不会发出警告。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoTypeInformation</maml:name>
				<maml:description>
					<maml:para>忽略 CSV 文件中的类型信息。默认情况下，CSV 文件的第一行包含“#TYPE ”，后面为 .NET Framework 对象类型的完全限定名称。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Delimiter</maml:name>
			<maml:description>
				<maml:para>指定分隔符以分隔属性值。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			<dev:type>
				<maml:name>char</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>,（逗号）</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>为导出的 CSV 文件指定编码。有效值是 Unicode、UTF7、UTF8、ASCII、UTF32、BigEndianUnicode、Default 和 OEM。默认值是 ASCII。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>ASCII</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>覆盖路径中指定的文件，而不提示您进行确认。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要作为 CSV 字符串导出的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。也可将对象通过管道传递至 Export-CSV。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoClobber</maml:name>
			<maml:description>
				<maml:para>不覆盖现有文件（替换内容）。默认情况下，如果指定的路径中存在同名文件，则 Export-CSV 将覆盖该文件，而不会发出警告。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoTypeInformation</maml:name>
			<maml:description>
				<maml:para>忽略 CSV 文件中的类型信息。默认情况下，CSV 文件的第一行包含“#TYPE ”，后面为 .NET Framework 对象类型的完全限定名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定 CSV 输出文件的路径。该参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseCulture</maml:name>
			<maml:description>
				<maml:para>使用当前区域性的列表分隔符作为项目分隔符。默认值为逗号 (,)。

该参数对于向全球用户发布的脚本而言很有用。要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>逗号</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可将任何 .NET Framework 对象通过管道传递至 Export-CSV。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					CSV 列表将发送至 Path 参数中指定的文件。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Export-CSV cmdlet 将提交的对象转换为一系列长度可变的 CSV 字符串，并将它们保存在所指定的文本文件中。可使用 Export-CSV 将对象保存到 CSV 文件中，然后使用 Import-CSV cmdlet 基于 CSV 文件中的文本创建对象。

在 CSV 文件中，通过以逗号分隔的对象属性值列表来表示每个对象。将属性值转换为字符串（通过使用对象的 ToString() 方法），这样它们通常就可由属性值的名称来表示。Export-CSV 并不导出对象的方法。

导出文件格式如下：
-- CSV 文件的第一行包含字符串“#TYPE”，后面是该对象的 .NET Framework 类型的完全限定名称，如 #TYPE System.Diagnostics.Process。要取消显示该行，请使用 NoTypeInformation 参数。

-- CSV 文件的下一行表示列标题。它包含以逗号分隔的列表，该列表列出了第一个对象的所有属性的名称。

-- 文件的附加行由逗号分隔的列表组成，该列表列出了每个对象的属性值。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process wmiprvse | select-object basePriority,ID,SessionID,WorkingSet | export-csv -path data.csv                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将选择 wmiprvse 进程的一些属性并将它们导出到名为 data.csv 的 CSV 格式的文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv 

C:\PS&gt; get-process | export-csv processes.csv 

# In processes.csv

#TYPE System.Diagnostics.Process
__NounName,Name,Handles,VM,WS,PM,NPM,Path,Company,CPU,FileVersion,...
Process,powershell,626,201666560,76058624,61943808,11960,C:\WINDOWS...
Process,powershell,257,151920640,38322176,37052416,7836,C:\WINDOWS\...
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将表示计算机中进程的对象导出到当前目录下的 Processes.csv 文件中。由于它没有指定分隔符，因此使用逗号 (,) 来分隔文件中的字段。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv -Delimiter &quot;;&quot; 

# In processes.csv

#TYPE System.Diagnostics.Process
__NounName;Name;Handles;VM;WS;PM;NPM;Path;Company;CPU;FileVersion;...
Process;powershell;626;201666560;76058624;61943808;11960;C:\WINDOWS...
Process;powershell;257;151920640;38322176;37052416;7836;C:\WINDOWS\...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将表示计算机中进程的对象导出到当前目录下的 Processes.csv 文件中。它使用 Delimiter 参数来指定分号 (;)。因此，文件中的字段由分号来分隔。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv -UseCulture                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将表示计算机中进程的对象导出到当前目录下的 Processes.csv 文件中。它使用 UseCulture 参数来指示 Export-CSV 使用当前区域性的 ListSeparator 属性所指定的分隔符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv -NoTypeInformation

C:\PS&gt; get-process | export-csv processes.csv -NoTypeInformation

# In processes.csv

__NounName,Name,Handles,VM,WS,PM,NPM,Path,Company,CPU,FileVersion,...
Process,powershell,626,201666560,76058624,61943808,11960,C:\WINDOWS...
Process,powershell,257,151920640,38322176,37052416,7836,C:\WINDOWS\...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令将表示计算机中进程的对象导出到当前目录下的 Processes.csv 文件中。它使用 NoTypeInformation 参数来取消显示文件中的类型信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113299</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertFrom-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-FormatData
		</command:name>
		<maml:description>
			<maml:para>将当前会话中的格式数据保存在一个格式文件中。

</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Export</command:verb>
		<command:noun>FormatData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Export-FormatData cmdlet 基于当前会话中的格式设置对象来创建 Windows PowerShell 格式设置文件 (format.ps1xml)。它获取 Get-FormatData 返回的 ExtendedTypeDefinition 对象，并将它们保存在 XML 格式的文件中。

Windows PowerShell 使用格式设置文件 (format.ps1xml) 中的数据来生成会话中 Microsoft .NET Framework 对象的默认显示。可以查看和编辑格式设置文件，并使用 Update-FormatData cmdlet 将这些格式数据添加到会话中。

有关 Windows PowerShell 中格式设置文件的详细信息，请参阅 about_Format.ps1xml。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-FormatData</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖现有输出文件，即使该文件具有只读属性。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IncludeScriptBlock</maml:name>
				<maml:description>
					<maml:para>确定是否导出格式数据中的脚本块。

由于脚本块中包含代码，可能会被恶意使用，因此默认情况下不将它们导出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要导出的格式数据对象。输入包含对象的变量，或输入用于获取对象的命令，如 Get-FormatData 命令。也可通过管道将对象从 Get-FormatData 传递给 Export-FormatData。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ExtendedTypeDefinition[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>阻止 cmdlet 覆盖现有文件。默认情况下，Export-FormatData 将在不发出警告的情况下覆盖文件，除非文件具有只读属性。

若要指示 Export-FormatData 覆盖只读文件，请使用 Force 参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定输出文件的位置。输入路径（可选）和具有 format.ps1xml 文件扩展名的文件名。如果省略路径，则 Export-FormatData 将在当前目录中创建文件。

如果使用 .ps1xml 以外的文件扩展名，则 Update-FormatData cmdlet 将不会识别该文件。

如果指定现有文件，则除非文件具有只读属性，否则 Export-FormatData 将在不发出警告的情况下覆盖文件。若要覆盖只读文件，请使用 Force 参数。若要防止将文件覆盖，请使用 NoClobber 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>覆盖现有输出文件，即使该文件具有只读属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IncludeScriptBlock</maml:name>
			<maml:description>
				<maml:para>确定是否导出格式数据中的脚本块。

由于脚本块中包含代码，可能会被恶意使用，因此默认情况下不将它们导出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要导出的格式数据对象。输入包含对象的变量，或输入用于获取对象的命令，如 Get-FormatData 命令。也可通过管道将对象从 Get-FormatData 传递给 Export-FormatData。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ExtendedTypeDefinition[]</command:parameterValue>
			<dev:type>
				<maml:name>ExtendedTypeDefinition[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoClobber</maml:name>
			<maml:description>
				<maml:para>阻止 cmdlet 覆盖现有文件。默认情况下，Export-FormatData 将在不发出警告的情况下覆盖文件，除非文件具有只读属性。

若要指示 Export-FormatData 覆盖只读文件，请使用 Force 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定输出文件的位置。输入路径（可选）和具有 format.ps1xml 文件扩展名的文件名。如果省略路径，则 Export-FormatData 将在当前目录中创建文件。

如果使用 .ps1xml 以外的文件扩展名，则 Update-FormatData cmdlet 将不会识别该文件。

如果指定现有文件，则除非文件具有只读属性，否则 Export-FormatData 将在不发出警告的情况下覆盖文件。若要覆盖只读文件，请使用 Force 参数。若要防止将文件覆盖，请使用 NoClobber 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.ExtendedTypeDefinition</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可通过管道将 ExtendedTypeDefinition 对象从 Get-FormatData 传递给 Export-FormatData。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Export-FormatData 不返回任何对象。它生成一个文件，并将该文件保存到指定路径中。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          若要使用任何格式设置文件（包括导出的格式设置文件），会话的执行策略必须允许运行脚本和配置文件。有关详细信息，请参阅 about_Execution_Policies。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-formatdata -typename * | export-formatdata -path allformat.ps1xml -IncludeScriptBlock                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将会话中的所有格式数据导出到 AllFormat.ps1xml 文件中。

该命令使用 Get-FormatData cmdlet 来获取会话中的格式数据。TypeName 参数的 *（所有）的值指示该 cmdlet 获取会话中的所有数据。

该命令使用管道运算符 (|) 将格式数据从 Get-FormatData 命令发送到 Export-FormatData cmdlet，该 cmdlet 将格式数据导出到 AllFormat.ps1 文件中。

Export-FormatData 命令使用 IncludeScriptBlock 参数将格式数据中的脚本块包括在文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$f = get-formatdata -typename helpinfoshort

C:\PS&gt; export-formatdata -inputObject $f -path c:\test\help.format.ps1xml -IncludeScriptBlock                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将 HelpInfoShort 类型的格式数据导出到 Help.format.ps1xml 文件中。

第一个命令使用 Get-FormatData cmdlet 来获取 HelpInfoShort 类型的格式数据，然后将其保存到 $f 变量中。

第二个命令使用 Export-FormatData 的 InputObject 参数来输入保存在 $f 变量中的格式数据。它还使用 IncludeScriptBlock 参数将脚本块包括在输出中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-formatdata -typename System.Diagnostics.Process | export-FormatData -path process.format.ps1xml

C:\PS&gt; Update-FormatData -prependPath .\process.format.ps1xml

C:\PS&gt; get-process p*

Handles  NPM(K)  PM(K)  WS(K) VM(M)   CPU(s)    Id ProcessName
-------  ------  -----  ----- -----   ------    -- -----------
    323                                       5600 powershell
    336                                       3900 powershell_ise
    138                                       4076 PresentationFontCache
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明省略 Export-FormatData 命令的 IncludeScriptBlock 参数的效果。

第一个命令使用 Get-FormatData cmdlet 来获取 Get-Process cmdlet 返回的 System.Diagnostics.Process 对象的格式数据。该命令使用管道运算符 (|) 将格式数据发送到 Export-FormatData cmdlet，该 cmdlet 将格式数据导出到当前目录中的 Process.format.ps1xml 文件中。

在本示例中，Export-FormatData 命令不使用 IncludeScriptBlock 参数。

第二个命令使用 Update-FormatData cmdlet 将 Process.format.ps1xml 文件添加到当前会话中。该命令使用 PrependPath 参数来确保 Process.format.ps1xml 文件中的进程对象的格式数据位于进程对象的标准格式数据之前。

第三个命令显示了此更改的效果。该命令使用 Get-Process cmdlet 来获取名称以“P”开头的进程。输出结果表明未显示通过使用脚本块而计算出的属性值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144302</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-FormatData</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Update-FormatData</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-PSSession
		</command:name>
		<maml:description>
			<maml:para>导入来自其他会话的命令，并将它们保存到 Windows PowerShell 模块中。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Export</command:verb>
		<command:noun>PSSession</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Export-PSSession cmdlet 从本地或远程计算机上的其他 PSSession 获取 cmdlet、函数、别名和其他命令类型，并将它们保存在 Windows PowerShell 模块中。若要将来自模块的命令添加到当前会话中，请使用 Import-Module cmdlet。

Export-PSSession 与 Import-PSSession 不同，后者将命令从其他 PSSession 导入到当前会话中，而前者将命令保存到一个模块中。这些命令不会被导入到当前会话中。

若要导出命令，请先使用 New-PSSession cmdlet 来创建一个 PSSession，而该 PSSession 具有要导出的命令。然后使用 Export-PSSession cmdlet 来导出命令。默认情况下，Export-PSSession 会导出所有命令，但不导出当前会话中存在的命令，您可以使用 CommandName 参数来指定要导出的命令。

此 Export-PSSession cmdlet 使用 Windows PowerShell 的隐式远程处理功能。在将命令导入到当前会话中时，导入的命令将在原始会话中或在源计算机上的一个相似会话中隐式运行。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-PSSession</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Session</maml:name>
				<maml:description>
					<maml:para>指定要从中导出命令的 PSSession。输入包含会话对象的变量或者用来获取会话对象的命令，如 Get-PSSession 命令。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSSession</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>OutputModule</maml:name>
				<maml:description>
					<maml:para>指定 Export-PSSession 所创建的模块的路径（可选项）和名称。默认路径为 $home\Documents\WindowsPowerShell\Modules。此参数是必需的。

如果已存在 Export-PSSession 所创建的模块子目录或任何文件，则该命令将失败。若要覆盖现有文件，请使用 Force 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="3">
				<maml:name>CommandName</maml:name>
				<maml:description>
					<maml:para>仅将具有指定名称或名称模式的命令导出。允许使用通配符。使用“CommandName”或其别名“Name”。

默认情况下，Export-PSSession 导出 PSSession 中的所有命令，但与当前会话中的命令具有相同名称的命令除外。这样可以防止导入的命令隐藏或替换当前会话中的命令。若要导出所有命令（甚至是那些隐藏或替换其他命令的命令），请使用 AllowClobber 参数。

如果使用 CommandName 参数，则将不导出命令的格式设置文件，除非使用 FormatTypeName 参数。同样，如果使用 FormatTypeName 参数，则将不导出命令，除非使用 CommandName 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="4">
				<maml:name>FormatTypeName</maml:name>
				<maml:description>
					<maml:para>仅导出指定 Microsoft .NET Framework 类型的格式指令。输入类型名称。默认情况下，Export-PSSession 导出所有 .NET Framework 类型的格式指令，这些类型不在 System.Management.Automation 命名空间中。

此参数的值必须是从其中导入命令的会话中的 Get-FormatData 命令所返回的类型的名称。若要获取远程会话中的所有格式数据，请键入 *。

如果使用 FormatTypeName 参数，则将不导出命令，除非使用 CommandName 参数。
同样，如果使用 CommandName 参数，则将不导出命令的格式设置文件，除非使用 FormatTypeName 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowClobber</maml:name>
				<maml:description>
					<maml:para>导出指定命令，即使它们与当前会话中的命令同名。

如果导入与当前会话中的命令同名的命令，则导入的命令会隐藏或替换原始命令。有关详细信息，请参阅 about_Command_Precedence。

Export-PSSession 不会导入与当前会话中的命令同名的命令。默认行为是防止命令名发生冲突。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ArgumentList</maml:name>
				<maml:description>
					<maml:para>将使用指定的参数（参数值）所得到的命令的变体导出。

例如，要将 $s 的 PSSession 中证书 (Cert:) 驱动器的 Get-Item 命令的变体导出，请键入“export-pssession -session $s -command get-item -argumentlist cert:”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CommandType</maml:name>
				<maml:description>
					<maml:para>仅导出指定类型的命令对象。使用“CommandType”或它的别名“Type”。

有效值包括：
-- Alias：当前会话中的所有 Windows PowerShell 别名。
-- All：所有命令类型。它与“get-command *”等效。
-- Application：位于 Path 环境变量 ($env:path) 所列路径中的所有 Windows PowerShell 文件以外的文件，包括 .txt、.exe. 和 .dll 文件。
-- Cmdlet：当前会话中的 cmdlet。默认值为“Cmdlet”。
-- ExternalScript：位于 Path 环境变量 ($env:path) 所列路径中的全部 .ps1 文件。
-- Filter and Function：所有 Windows PowerShell 函数。
-- Script：当前会话中的脚本块。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Alias</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Function</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Filter</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Cmdlet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ExternalScript</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Application</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Script</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>为输出文件指定编码。有效值是“Unicode”、“UTF7”、“UTF8”、“ASCII”、“UTF32”、“BigEndianUnicode”、“Default”和“OEM”。默认值为“UTF-8”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖一个或多个现有输出文件，即使该文件具有只读属性。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Module</maml:name>
				<maml:description>
					<maml:para>仅将指定的 Windows PowerShell 管理单元和模块中的命令导出。输入管理单元和模块的名称。不允许使用通配符。

有关详细信息，请参阅 about_PSSnapins 和 Import-Module。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowClobber</maml:name>
			<maml:description>
				<maml:para>导出指定命令，即使它们与当前会话中的命令同名。

如果导入与当前会话中的命令同名的命令，则导入的命令会隐藏或替换原始命令。有关详细信息，请参阅 about_Command_Precedence。

Export-PSSession 不会导入与当前会话中的命令同名的命令。默认行为是防止命令名发生冲突。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>ArgumentList</maml:name>
			<maml:description>
				<maml:para>将使用指定的参数（参数值）所得到的命令的变体导出。

例如，要将 $s 的 PSSession 中证书 (Cert:) 驱动器的 Get-Item 命令的变体导出，请键入“export-pssession -session $s -command get-item -argumentlist cert:”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="3">
			<maml:name>CommandName</maml:name>
			<maml:description>
				<maml:para>仅将具有指定名称或名称模式的命令导出。允许使用通配符。使用“CommandName”或其别名“Name”。

默认情况下，Export-PSSession 导出 PSSession 中的所有命令，但与当前会话中的命令具有相同名称的命令除外。这样可以防止导入的命令隐藏或替换当前会话中的命令。若要导出所有命令（甚至是那些隐藏或替换其他命令的命令），请使用 AllowClobber 参数。

如果使用 CommandName 参数，则将不导出命令的格式设置文件，除非使用 FormatTypeName 参数。同样，如果使用 FormatTypeName 参数，则将不导出命令，除非使用 CommandName 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>会话中的所有命令。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CommandType</maml:name>
			<maml:description>
				<maml:para>仅导出指定类型的命令对象。使用“CommandType”或它的别名“Type”。

有效值包括：
-- Alias：当前会话中的所有 Windows PowerShell 别名。
-- All：所有命令类型。它与“get-command *”等效。
-- Application：位于 Path 环境变量 ($env:path) 所列路径中的所有 Windows PowerShell 文件以外的文件，包括 .txt、.exe. 和 .dll 文件。
-- Cmdlet：当前会话中的 cmdlet。默认值为“Cmdlet”。
-- ExternalScript：位于 Path 环境变量 ($env:path) 所列路径中的全部 .ps1 文件。
-- Filter and Function：所有 Windows PowerShell 函数。
-- Script：当前会话中的脚本块。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">CommandTypes</command:parameterValue>
			<dev:type>
				<maml:name>CommandTypes</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>会话中的所有命令。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>为输出文件指定编码。有效值是“Unicode”、“UTF7”、“UTF8”、“ASCII”、“UTF32”、“BigEndianUnicode”、“Default”和“OEM”。默认值为“UTF-8”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>UTF-8</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>覆盖一个或多个现有输出文件，即使该文件具有只读属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="4">
			<maml:name>FormatTypeName</maml:name>
			<maml:description>
				<maml:para>仅导出指定 Microsoft .NET Framework 类型的格式指令。输入类型名称。默认情况下，Export-PSSession 导出所有 .NET Framework 类型的格式指令，这些类型不在 System.Management.Automation 命名空间中。

此参数的值必须是从其中导入命令的会话中的 Get-FormatData 命令所返回的类型的名称。若要获取远程会话中的所有格式数据，请键入 *。

如果使用 FormatTypeName 参数，则将不导出命令，除非使用 CommandName 参数。
同样，如果使用 CommandName 参数，则将不导出命令的格式设置文件，除非使用 FormatTypeName 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Module</maml:name>
			<maml:description>
				<maml:para>仅将指定的 Windows PowerShell 管理单元和模块中的命令导出。输入管理单元和模块的名称。不允许使用通配符。

有关详细信息，请参阅 about_PSSnapins 和 Import-Module。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>会话中的所有命令。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>OutputModule</maml:name>
			<maml:description>
				<maml:para>指定 Export-PSSession 所创建的模块的路径（可选项）和名称。默认路径为 $home\Documents\WindowsPowerShell\Modules。此参数是必需的。

如果已存在 Export-PSSession 所创建的模块子目录或任何文件，则该命令将失败。若要覆盖现有文件，请使用 Force 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Session</maml:name>
			<maml:description>
				<maml:para>指定要从中导出命令的 PSSession。输入包含会话对象的变量或者用来获取会话对象的命令，如 Get-PSSession 命令。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSSession</command:parameterValue>
			<dev:type>
				<maml:name>PSSession</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递给 Export-PSSession。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.IO.FileInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Export-PSSession 返回包含它所创建的模块的文件列表。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Export-PSSession 依赖于 Windows PowerShell 远程处理基础结构。若要使用此 cmdlet，必须对计算机进行相应配置以进行远程处理。有关详细信息，请参阅 about_Remote_Requirements。

不能使用 Export-PSSession 来导出 Windows PowerShell 提供程序。

导出的命令在从中导出这些命令的 PSSession 中隐式运行。但是，远程运行这些命令的详细信息完全由 Windows PowerShell 进行处理。可以像运行本地命令那样运行导出的命令。

Export-Module 捕获和保存它所导出的模块中的 PSSession 的相关信息。如果在导入模块时从中导出命令的 PSSession 已关闭，并且同一台计算机上没有活动的 PSSession，则该模块中的命令尝试重新创建 PSSession。如果重新创建 PSSession 的尝试失败，则导出的命令的将不会运行。

Export-Module 捕获和保存在模块中的会话信息不包括会话选项，如在 $PSSessionOption 自动变量中指定的会话选项，或使用 New-PSSession、Enter-PSSession 或 Invoke-Command cmdlet 的 SessionOption 参数指定的会话选项。如果在导入模块时原始 PSSession 已关闭，则该模块将使用同一台计算机上的另一个 PSSession（如果存在另一个 PSSession）。若要启用导入的命令以在正确配置的会话中运行，请在导入模块之前，通过所需选项来创建 PSSession。

为了查找要导出的命令，Export-PSSession 使用 Invoke-Command cmdlet 来运行 PSSession 中的 Get-Command 命令。为了获取和保存命令的格式数据，它使用 Get-FormatData 和 Export-FormatData cmdlet。运行 Export-PSSession 命令时，您可能会看到来自 Invoke-Command、Get-Command、Get-FormatData 和 Export-FormatData 的错误消息。另外，Export-PSSession 无法从不包含 Get-Command、Get-FormatData、Select-Object 和 Get-Help cmdlet 的会话中导出命令。

Export-PSSession 使用 Write-Progress cmdlet 来显示该命令的进度。该命令正在运行时，您可能会看到进度条。

导出的命令与其他远程命令具有相同的限制（包括无法启动具有用户界面的程序，如记事本）。

因为 Windows PowerShell 配置文件不在 PSSession 中运行，所以配置文件添加到会话中的命令无法用于 Export-PSSession。若要从配置文件导出命令，请在导出命令之前使用 Invoke-Command 命令在 PSSession 中手动运行该配置文件。

Export-PSSession 创建的模块可能包含格式设置文件，即使该命令不导入格式数据。如果该命令不导入格式数据，则创建的任何格式设置文件都不包含格式数据。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computerName Server01

C:\PS&gt; export-pssession -session $s -outputModule Server01                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例中的命令将 Server01 计算机上某个 PSSession 中的所有命令导出到本地计算机上的 Server01 模块，但与当前会话中的命令具有相同名称的命令除外。它还将导出命令的格式数据。

第一条命令在 Server01 计算机上创建一个 PSSession。第二个命令将会话中的命令和格式数据导出到 Server01 模块中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -ConnectionUri http://exchange.microsoft.com/mailbox -credential exchangeadmin01@hotmail.com -authentication negotiate

C:\PS&gt; export-pssession -session $r -module exch* -commandname get-*, set-* -formattypename * -outputModule $pshome\Modules\Exchange -encoding ASCII                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将 Get 和 Set 命令从远程计算机上的 Microsoft Exchange Server 管理单元导出到本地计算机上的 $pshome\Modules 目录下的 Exchange 模块中。

通过将模块置于 $pshome\Module 目录中，计算机上的所有用户就可对它进行访问。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computerName Server01 -credential Server01\User01

C:\PS&gt; export-pssession -session $s -outputModule TestCmdlets -type cmdlet -commandname *test* -formattypename *

C:\PS&gt; remove-pssession $s

C:\PS&gt; import-module TestCmdlets

C:\PS&gt; get-help test*

C:\PS&gt; test-files                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将 cmdlet 从远程计算机上的 PSSession 导出，并将它们保存在本地计算机上的一个模块中。然后，命令将 cmdlet 从模块添加到当前会话中，以便可以使用它们。

第一条命令在 Server01 计算机上创建一个 PSSession，并将它保存在 $s 变量中。

第二个命令将名称以“Test”开头的 cmdlet 从 $s 中的 PSSession 导出到本地计算机上的 TestCmdlets 模块中。

第三个命令使用 Remove-PSSession cmdlet 删除当前会话中的 $s 中的 PSSession。此命令说明 PSSession 使用从其导入的命令时无需处于活动状态。

第四个命令可在任何时候在任何会话中运行，它使用 Import-Module cmdlet 将 TestCmdlets 模块中的 cmdlet 添加到当前会话中。

第五个命令使用 Get-Help cmdlet 来获取名称以“Test”开头的 cmdlet 的帮助。将模块中的命令添加到当前会话中之后，可使用 Get-Help 和 Get-Command cmdlet 来了解这些导入的命令，就像在会话中针对任何命令使用它们一样。

第六个命令使用 Test-Files cmdlet，它从 Server01 计算机中导出并添加到会话中。

虽然并不显而易见，但 Test-Files 命令实际将在从中导入该命令的计算机上的一个远程会话中运行。Windows PowerShell 将基于存储在模块中的信息来创建会话。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
export-pssession -session $s -AllowClobber -outputModule AllCommands                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 $s 变量中 PSSession 的所有命令和所有格式数据导出到当前会话中。该命令使用 AllowClobber 参数将与当前会话中的命令具有相同名称的命令包括进来。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$options = New-PSSessionOption -NoMachineProfile

C:\PS&gt; $s = new-pssession -computername Server01 -sessionoption $options

C:\PS&gt; export-pssession -session $s -outputModule Server01

C:\PS&gt; remove-pssession $s

C:\PS&gt; new-pssession -computername Server01 -sessionoption $options

C:\PS&gt; import-module Server01                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明如何在从中导出命令的 PSSession 关闭时，在具有特定选项的会话中运行导出的命令。

在使用 Export-PSSession 时，它将保存其所创建的模块中的原始 PSSession 的相关信息。在导入模块时，如果原始远程会话已关闭，则该模块将使用与源计算机相连的任何打开的远程会话。

如果当前会话不包含与源计算机相连的会话，则该模块中的命令将重新建立与该计算机的会话。但是，Export-PSSession 不会保存特殊选项，如模块中通过使用 New-PSSession 的 SessionOption 参数设置的选项。

因此，如果想在具有特定选项的远程会话中运行导出的命令，则需要在导入模块之前，使用所需选项来创建远程会话。

第一个命令使用 New-PSSessionOption cmdlet 来创建 PSSessionOption 对象，并将该对象保存在 $options 变量中。

第二个命令将创建一个包含指定选项的 PSSession。该命令使用 New-PSSession cmdlet 在 Server01 计算机上创建一个 PSSession。它使用 SessionOption 参数将该选项对象提交到 $options 中。

第三个命令使用 Export-PSSession cmdlet 将 $s 中的 PSSession 的命令导出到 Server01 模块中。

第四个命令使用 Remove-PSSession cmdlet 删除 $s 变量中的 PSSession。

第五个命令使用 New-PSSession cmdlet 创建一个连接到 Server01 计算机的新 PSSession。此 PSSession 还使用 $options 变量中的会话选项。

第六个命令使用 Import-Module cmdlet 从 Server01 模块导入命令。该模块中的命令在 Server01 计算机上的 PSSession 中运行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135213</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Command_Precedence</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-PSSession</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-PSSession</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Module</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_PSSessions</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Custom
		</command:name>
		<maml:description>
			<maml:para>使用自定义视图来设置输出的格式。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Format</command:verb>
		<command:noun>Custom</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Format-Custom cmdlet 将根据可选视图中的定义来设置命令输出的格式。Format-Custom 用于显示不是仅为表格或仅为列表的视图。可使用 Windows PowerShell 目录中的 *format.PS1XML 文件中定义的视图，或者可在新的 PS1XML 文件中创建自己的视图，并使用 Update-FormatData cmdlet 将它们添加到 Windows PowerShell 中。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Custom</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- Depth &lt;int32&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Depth</maml:name>
				<maml:description>
					<maml:para>指定显示的列数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayError</maml:name>
				<maml:description>
					<maml:para>在命令行中显示错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Expand</maml:name>
				<maml:description>
					<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。

</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupBy</maml:name>
				<maml:description>
					<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要设置格式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ShowError</maml:name>
				<maml:description>
					<maml:para>通过管道发送错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>View</maml:name>
				<maml:description>
					<maml:para>指定可选格式或“视图”的名称。如果省略此参数，则 Format-Custom 将使用默认的自定义视图。不能在同一命令中使用 Property 和 View 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Depth</maml:name>
			<maml:description>
				<maml:para>指定显示的列数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayError</maml:name>
			<maml:description>
				<maml:para>在命令行中显示错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Expand</maml:name>
			<maml:description>
				<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupBy</maml:name>
			<maml:description>
				<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要设置格式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- Depth &lt;int32&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ShowError</maml:name>
			<maml:description>
				<maml:para>通过管道发送错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>View</maml:name>
			<maml:description>
				<maml:para>指定可选格式或“视图”的名称。如果省略此参数，则 Format-Custom 将使用默认的自定义视图。不能在同一命令中使用 Property 和 View 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Format-Custom。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.Internal.Format</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Format-Custom 返回表示显示的格式对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Format-Custom 用于显示那些不是仅为表格或仅为列表的视图。若要显示可选表格视图，请使用 Format-Table。若要显示可选列表视图，请使用 Format-List。

还可以使用内置别名“fc”来引用 Format-Custom。有关详细信息，请参阅 about_Aliases。

GroupBy 参数假定对象已经过排序。在使用 Format-Custom 对对象进行分组之前，请使用 Sort-Object 对它们进行排序。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-command start-transcript | format-custom -view MyView                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 MyView 视图（一种由用户创建的自定义视图）定义的格式来设置 Start-Transcript cmdlet 的相关信息的格式。若要成功运行此命令，必须首先创建新的 PS1XML 文件，定义 MyView 视图，然后使用 Update-FormatData 命令将该 PS1XML 文件添加到 Windows PowerShell 中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process Winlogon | format-custom                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将设置可选自定义视图中有关 Winlogon 进程的信息的格式。由于该命令未使用 View 参数，因此 Format-Custom 将使用默认的自定义视图来设置数据的格式。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113301</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-List
		</command:name>
		<maml:description>
			<maml:para>将输出的格式设置为属性列表，其中每个属性均各占一行显示。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Format</command:verb>
		<command:noun>List</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Format-List cmdlet 将命令输出的格式设置为属性列表，其中每个属性均各占一行进行显示。可使用 Format-List 将对象的全部或所选属性设置为列表格式 (format-list *) 并进行显示。

与表相比，列表中的各项具有更多可用的显示空间，所以 Windows PowerShell 可在列表中显示更多的对象属性，而且属性值被截断的可能性将更小。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-List</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayError</maml:name>
				<maml:description>
					<maml:para>在命令行中显示错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Expand</maml:name>
				<maml:description>
					<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupBy</maml:name>
				<maml:description>
					<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要设置格式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ShowError</maml:name>
				<maml:description>
					<maml:para>通过管道发送错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>View</maml:name>
				<maml:description>
					<maml:para>指定可选列表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayError</maml:name>
			<maml:description>
				<maml:para>在命令行中显示错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Expand</maml:name>
			<maml:description>
				<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupBy</maml:name>
			<maml:description>
				<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要设置格式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ShowError</maml:name>
			<maml:description>
				<maml:para>通过管道发送错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>View</maml:name>
			<maml:description>
				<maml:para>指定可选列表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Format-List。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.Internal.Format</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Format-List 返回表示列表的格式对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          也可使用它的内置别名“FL”来引用 Format-List。有关详细信息，请参阅 about_Aliases。

格式 cmdlet（例如 Format-List）可以排列要显示的数据，但并不实际显示它。数据可通过 Windows PowerShell 的输出功能和包含 Out 动词的 cmdlet（输出 cmdlet，如 Out-Host、Out-File 和 Out-Printer）来显示。

若未使用 format cmdlet，则 Windows PowerShell 将对要显示的每个对象应用默认格式。

GroupBy 参数假定对象已经过排序。在使用 Format-Custom 对对象进行分组之前，请使用 Sort-Object 对它们进行排序。

使用 View 参数可以指定表的可选格式。可使用 Windows PowerShell 目录中的 *.format.PS1XML 文件中定义的视图，或者可在新的 PS1XML 文件中创建自己的视图，并使用 Update-FormatData cmdlet 将它们包括在 Windows PowerShell 中。

View 参数的可选视图必须使用列表格式，否则，该命令将失败。如果可选视图为表，请使用 Format-Table。如果可选视图既不是列表也不是表，请使用 Format-Custom。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | format-list                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将计算机上服务的相关信息设置为列表格式。默认情况下，将这些服务设置为表视图格式。Get-Service cmdlet 可获取表示计算机上的服务的对象。管道运算符 (|) 通过管道将结果传递给 Format-List。随后，Format-List 命令将服务信息设置为列表格式，并将其发送到默认的输出 cmdlet 以进行显示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-childitem $pshome\*.ps1xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将以列表形式显示 Windows PowerShell 目录中 PS1XML 文件的相关信息。第一条命令将获取表示该文件的对象，并将它们存储在 $a 变量中。第二个命令使用 Format-List 来设置存储在 $a 中对象的相关信息的格式。此命令使用 InputObject 参数将该变量传递给 Format-List，后者随后将已设置格式的输出发送到默认的输出 cmdlet 以进行显示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | format-list -property name, basepriority, priorityclass                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将显示计算机上每个进程的名称、基本优先级和优先级类。它使用 Get-Process cmdlet 来获取表示每个进程的对象。管道运算符 (|) 通过管道将进程对象传递给 Format-List。Format-List 将进程的格式设置为指定属性的列表。“Property”参数名为可选项，因此可将其省略。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process winlogon | format-list -property *                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示 Winlogon 进程的所有属性。它使用 Get-Process cmdlet 来获取表示 Winlogon 进程的对象。管道运算符 (|) 通过管道将 Winlogon 进程对象传递给 Format-List。该命令使用 Property 参数来指定属性，并使用 * 表示所有属性。由于 Property 参数的名称为可选项，因此可将其省略，并键入命令“format-list *”。Format-List 自动将结果发送到默认的输出 cmdlet 以进行显示。</maml:para>

	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113302</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Table
		</command:name>
		<maml:description>
			<maml:para>将输出的格式设置为表。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Format</command:verb>
		<command:noun>Table</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Format-Table cmdlet 将命令输出的格式设置为表，表中每列显示选定的对象属性。对象类型可确定默认布局以及每列中显示的属性，但也可以使用 Property 参数来选择要查看的属性。

也可在显示对象前使用哈希表为对象添加计算属性，以及使用哈希表指定表格中的列标题。若要添加计算属性，请使用 Property 或 GroupBy 参数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Table</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。键入一个或多个属性名称（用逗号分隔），或者使用哈希表显示计算属性。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;
-- Width &lt;int32&gt;
-- Alignment（值可以是“Left”、“Center”或“Right”）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AutoSize</maml:name>
				<maml:description>
					<maml:para>根据数据的宽度调整列大小和列数。默认情况下，列大小和列数由视图确定。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayError</maml:name>
				<maml:description>
					<maml:para>在命令行中显示错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Expand</maml:name>
				<maml:description>
					<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupBy</maml:name>
				<maml:description>
					<maml:para>基于属性值，将单独的表格中的排序结果进行排列。例如，可基于服务状态，使用 GroupBy 列出单独的表中的服务。

请输入表达式或输出的属性。在将输出内容发送至 Format-Table 前必须对其进行排序。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>HideTableHeaders</maml:name>
				<maml:description>
					<maml:para>省略表中的列标题。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要设置格式的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ShowError</maml:name>
				<maml:description>
					<maml:para>通过管道发送错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>View</maml:name>
				<maml:description>
					<maml:para>指定可选表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Wrap</maml:name>
				<maml:description>
					<maml:para>在下一行显示超过列宽的文本。默认情况下，超过列宽的文本将被截断。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AutoSize</maml:name>
			<maml:description>
				<maml:para>根据数据的宽度调整列大小和列数。默认情况下，列大小和列数由视图确定。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayError</maml:name>
			<maml:description>
				<maml:para>在命令行中显示错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Expand</maml:name>
			<maml:description>
				<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>使 cmdlet 显示所有错误信息。与 DisplayError 或 ShowError 参数一起使用。默认情况下，当错误对象写入错误或显示流时，只显示部分错误信息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupBy</maml:name>
			<maml:description>
				<maml:para>基于属性值，将单独的表格中的排序结果进行排列。例如，可基于服务状态，使用 GroupBy 列出单独的表中的服务。

请输入表达式或输出的属性。在将输出内容发送至 Format-Table 前必须对其进行排序。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>HideTableHeaders</maml:name>
			<maml:description>
				<maml:para>省略表中的列标题。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要设置格式的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。键入一个或多个属性名称（用逗号分隔），或者使用哈希表显示计算属性。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;
-- Width &lt;int32&gt;
-- Alignment（值可以是“Left”、“Center”或“Right”）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ShowError</maml:name>
			<maml:description>
				<maml:para>通过管道发送错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>View</maml:name>
			<maml:description>
				<maml:para>指定可选表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Wrap</maml:name>
			<maml:description>
				<maml:para>在下一行显示超过列宽的文本。默认情况下，超过列宽的文本将被截断。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Format-Table。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.Internal.Format</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Format-Table 返回表示表的格式对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Format-Table 的内置别名“FT”来对其进行引用。有关详细信息，请参阅 about_Aliases。

GroupBy 参数假定对象已经过排序。在使用 Format-Custom 对对象进行分组之前，请使用 Sort-Object 对它们进行排序。

使用 View 参数可以指定表的可选格式。您可以使用 Windows PowerShell 目录中的 *.format.PS1XML 文件中定义的视图，也可以在新的 PS1XML 文件中创建自己的视图，然后使用 Update-FormatData cmdlet 将它们包括在 Windows PowerShell 中。

View 参数的可选视图必须使用表格式，否则，该命令将失败。如果可选视图为列表，请使用 Format-List。如果可选视图既不是列表也不是表，请使用 Format-Custom。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-pssnapin | format-table -auto                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 Windows PowerShell 管理单元的相关信息设置为表格式。默认情况下，这些信息将设置为列表格式。Get-PSSnapin cmdlet 获取表示管理单元的对象。管道运算符 (|) 将对象传递给 Format-Table 命令。Format-Table 设置表中对象的格式。Autosize 参数调整列宽以尽可能减少截断。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | sort-object -property basepriority | format-table -groupby basepriority -wrap                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令可分组显示计算机上的进程，即，具有相同基本优先级的进程分为一组进行显示。

Get-Process cmdlet 获取表示计算机上每个进程的对象。管道运算符 (|) 将对象传递至 Sort-Object cmdlet，该 cmdlet 按照对象的基本优先级将对象进行排序。


另一个管道运算符将结果传递给 Format-Table 命令。GroupBy 参数基于进程的 BasePriority 属性值对进程的有关数据进行分组。Wrap 参数可确保数据不会被截断。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | sort-object starttime | format-table -view starttime                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将根据进程的开始日期分组显示计算机上进程的相关信息。它使用 Get-Process cmdlet 来获取表示计算机上进程的对象。管道运算符 (|) 将 Get-Process 的输出发送给 Sort-Object cmdlet，后者根据 StartTime 属性对其进行排序。另一个管道运算符将排序的结果发送给 Format-Table。

View 参数用于为 System.Diagnostics.Process 对象（例如由 Get-Process 返回的对象）选择 DotNetTypes.format.ps1xml 格式设置文件中定义的 StartTime 视图。此视图将进程的 StartTime 转换为短日期格式，然后按开始日期对进程进行分组。

DotNetTypes.format.ps1xml 格式设置文件还包含用于进程的 Priority 视图，您可通过自定义视图创建自己的 format.ps1xml 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | format-table -property Name, DependentServices                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在具有两列（Name 和 DependentServices）的表中显示计算机上的所有服务。该命令使用 Get-Service cmdlet 获取计算机上的所有服务。管道运算符 (|) 将结果发送给 Format-Table cmdlet，该 cmdlet 将输出格式设置为表。Property 参数指定按列的形式显示在表中的属性。Property 参数名为可选项，因此可以省略（“format-table name, dependentservices”）。

Property 和 DependentServices 仅仅是服务对象的两个属性。要查看所有属性，请键入“get-service | get-member”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process notepad | format-table ProcessName, `
@{Label=&quot;TotalRunningTime&quot;; Expression={(get-date) - $_.StartTime}}                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将显示在表中使用计算属性的方法。该命令将显示具有本地计算机上所有 Notepad 进程的进程名称和总运行时间的表。总运行时间是通过从当前时间减去每个进程的开始时间而计算出来的。

该命令使用 Get-Process cmdlet 来获取本地计算机上所有名为“Notepad”的进程。管道运算符 (|) 将结果发送给 Format-Table，后者将显示一个由两列组成的表：ProcessName 列是进程的标准属性，TotalRunningTime 列是计算属性。

TotalRunningTime 属性由具有两个键（Label 和 Expression）的哈希表指定。属性的名称将赋予 Label 键。而计算则赋予 Expression 键。Expression 将获取每个进程对象的 StartTime 属性，并从 Get-Date 命令（用于获取当前日期和时间）的结果中减去该值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$processes = get-wmiobject -ComputerName Server01 win32_process -filter &quot;name='notepad.exe'&quot;  

C:\PS&gt; $processes | format-table ProcessName, @{ Label = &quot;Total  Running Time&quot;; `
Expression={(get-date) - $_.ConvertToDateTime($_.CreationDate)}}                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令与上一命令相似，所不同的是，这些命令使用 Get-WmiObject cmdlet 和 Win32_Process 类来显示远程计算机上 Notepad 进程的相关信息。

第一个命令使用 Get-WmiObject cmdlet 来获取描述 Server01 计算机上所有名为 Notepad.exe 的进程的 Windows Management Instrumentation (WMI) Win32_Process 类的实例。该命令将进程信息存储在 $processes 变量中。


第二个命令使用管道运算符 (|) 将 $processes 变量中的进程信息发送给 Format-Table cmdlet，后者将显示每个进程的 ProcessName 以及新的计算属性。

该命令将新计算属性的名称 Total Running Time 赋予 Label 键。赋予 Expression 键的脚本块将通过从当前日期中减去进程创建日期来计算出进程的运行时间。Get-Date cmdlet 获取当前日期。ConvertToDateTime 方法将 Win32_Process 对象的 CreationDate 属性从 WMI CIM_DATETIME 对象转换为可与 Get-Date 的输出相比较的 Microsoft .NET Framework DateTime 对象。随后，从当前日期中减去转换的创建日期。结果是 Total Running Time 的值。

倒引号字符 (`) 是行继续符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113303</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-List</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Wide</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Custom</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Wide
		</command:name>
		<maml:description>
			<maml:para>将对象的格式设置为只能显示每个对象的一个属性的宽表。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Format</command:verb>
		<command:noun>Wide</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Format-Wide cmdlet 将对象的格式设置为只能显示每个对象的一个属性的宽表。可以使用 Property 参数来确定要显示的属性。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Wide</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AutoSize</maml:name>
				<maml:description>
					<maml:para>根据数据的宽度调整列大小和列数。默认情况下，列大小和列数由视图确定。不能在同一命令中使用 AutoSize 和 Column 参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Column</maml:name>
				<maml:description>
					<maml:para>指定显示的列数。不能在同一命令中使用 AutoSize 和 Column 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayError</maml:name>
				<maml:description>
					<maml:para>在命令行中显示错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Expand</maml:name>
				<maml:description>
					<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>覆盖阻止命令成功执行的限制，但应确保所做更改不会危及安全性。例如，Force 将覆盖只读属性或创建目录来完成文件路径，但它不会尝试更改文件权限。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>GroupBy</maml:name>
				<maml:description>
					<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要设置格式的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ShowError</maml:name>
				<maml:description>
					<maml:para>通过管道发送错误。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>View</maml:name>
				<maml:description>
					<maml:para>指定可选表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AutoSize</maml:name>
			<maml:description>
				<maml:para>根据数据的宽度调整列大小和列数。默认情况下，列大小和列数由视图确定。不能在同一命令中使用 AutoSize 和 Column 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Column</maml:name>
			<maml:description>
				<maml:para>指定显示的列数。不能在同一命令中使用 AutoSize 和 Column 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayError</maml:name>
			<maml:description>
				<maml:para>在命令行中显示错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Expand</maml:name>
			<maml:description>
				<maml:para>设置集合对象以及集合中的对象的格式。此参数用于设置支持 ICollection (System.Collections) 接口的对象的格式。默认值为 EnumOnly。

有效值包括：
-- EnumOnly：显示集合中的对象的属性。
-- CoreOnly：显示集合对象的属性。
-- Both：显示集合对象的属性以及集合中对象的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>覆盖阻止命令成功执行的限制，但应确保所做更改不会危及安全性。例如，Force 将覆盖只读属性或创建目录来完成文件路径，但它不会尝试更改文件权限。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>GroupBy</maml:name>
			<maml:description>
				<maml:para>根据共享属性或值将输出结果分组显示。请输入表达式或输出的属性。

GroupBy 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要设置格式的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要在屏幕上显示的对象属性及其显示顺序。允许使用通配符。

如果省略此参数，则屏幕上显示的属性取决于要显示的对象。参数名（“Property”）为可选项。不能在同一命令中使用 Property 和 View 参数。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- FormatString &lt;字符串&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ShowError</maml:name>
			<maml:description>
				<maml:para>通过管道发送错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>View</maml:name>
			<maml:description>
				<maml:para>指定可选表格式或“视图”的名称。不能在同一命令中使用 Property 和 View 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Format-Wide。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.Internal.Format</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Format-Wide 返回表示表的格式对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Format-Wide 的内置别名“fw”来对其进行引用。有关详细信息，请参阅 about_Aliases。

GroupBy 参数假定对象已经过排序。在使用 Format-Custom 对对象进行分组之前，请使用 Sort-Object 对它们进行排序。

使用 -View 参数可以指定表的可选格式。您可以使用 Windows PowerShell 目录中的 *.format.PS1XML 文件中定义的视图，也可以在新的 PS1XML 文件中创建自己的视图，然后使用 Update-FormatData cmdlet 将它们包括在 Windows PowerShell 中。

View 参数的可选视图必须使用表格式，否则，该命令将失败。如果可选视图为列表，请使用 Format-List。如果可选视图既不是列表也不是表，请使用 Format-Custom。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | format-wide -column 3                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在整个屏幕中以三列显示当前目录中的文件名。Get-ChildItem cmdlet 获取表示目录中每个文件的对象。管道运算符 (|) 通过管道将文件对象传递给 Format-Wide，后者将设置这些文件对象的格式以便进行输出。Column 参数指定列的数目。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem HKCU:\software\microsoft | format-wide -property pschildname -autosize                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将显示 HKEY_CURRENT_USER\Software\Microsoft 项中的注册表项的名称。Get-ChildItem cmdlet 获取表示这些项的对象。路径将指定为“HKCU:”，这是由 Windows PowerShell 注册表提供程序公开的驱动器之一，后跟该项的路径。管道运算符 (|) 通过管道将注册表项对象传递给 Format-Wide，后者将设置这些注册表项对象的格式以便进行输出。Property 参数用于指定属性的名称，而 AutoSize 参数用于调整列以增加可读性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113304</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Alias
		</command:name>
		<maml:description>
			<maml:para>获取当前会话的别名。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Alias cmdlet 获取当前会话的别名（命令和可执行文件的替代名称）。其中包括内置别名、已设置或导入的别名，以及已添加到 Windows PowerShell 配置文件中的别名。

默认情况下，Get-Alias 获取别名并返回命令名称。当使用 Definition 参数时，Get-Alias 采用命令名称并返回其别名。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Alias</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要检索的别名。允许使用通配符。默认情况下，Get-Alias 将检索为当前会话定义的所有别名。参数名（“Name”）为可选项。还可通过管道将别名传递至 Get-Alias。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。此参数的值对 Name 和 Definition 参数进行限定。请输入名称、定义或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>仅获取所指定作用域中的别名。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Alias</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>Definition</maml:name>
				<maml:description>
					<maml:para>获取所指定项的别名。请输入 cmdlet、函数、脚本、文件或可执行文件的名称。

此参数名为 Definition，这是因为它在别名对象的 Definition 属性中搜索项目名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。此参数的值对 Name 和 Definition 参数进行限定。请输入名称、定义或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>仅获取所指定作用域中的别名。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>Definition</maml:name>
			<maml:description>
				<maml:para>获取所指定项的别名。请输入 cmdlet、函数、脚本、文件或可执行文件的名称。

此参数名为 Definition，这是因为它在别名对象的 Definition 属性中搜索项目名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>忽略指定项。此参数的值对 Name 和 Definition 参数进行限定。请输入名称、定义或模式，例如“s*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要检索的别名。允许使用通配符。默认情况下，Get-Alias 将检索为当前会话定义的所有别名。参数名（“Name”）为可选项。还可通过管道将别名传递至 Get-Alias。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>仅获取所指定作用域中的别名。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					还可通过管道将别名传递至 Get-Alias。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Alias 返回表示每个别名的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          别名是 cmdlet、函数或可执行文件的替代名称或昵称。若要运行 cmdlet、函数或可执行文件，则可使用其全名或任何别名。有关详细信息，请参阅 about_Aliases。

若要创建新别名，请使用 Set-Alias 或 New-Alias。若要删除别名，请使用 Remove-Item。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取当前会话中的所有别名。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias -name g*, s* -exclude get-*                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取所有以“g”或“s”开头的别名，但以“get-”开头的别名除外。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias -definition Get-ChildItem                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 Get-ChildItem cmdlet 的别名。

默认情况下，Get-Alias cmdlet 会在您知道别名的情况下获取项目名称。Definition 参数会在您知道项目名称的情况下获取别名。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias | where-object {$_.Options -match &quot;ReadOnly&quot;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将检索所有其 Options 属性值为 ReadOnly 的别名。此命令提供了快速查找 Windows PowerShell 中内置别名的方法，因为这些别名均具有 ReadOnly 选项。

Options 属性仅是 Get-Alias 获取的 AliasInfo 对象的属性之一。若要查找 AliasInfo 对象的所有属性和方法，请键入“get-alias | get-member”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias -definition &quot;*-pssession&quot; -exclude e* -scope global                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例获取所有以“-pssession”结尾的命令别名，但以“e”开头的别名除外。

该命令使用 Scope 参数将命令应用到全局作用域。当您希望获取会话中的别名时，这对脚本比较有用。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113306</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Aliases</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Alias Provider</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Culture
		</command:name>
		<maml:description>
			<maml:para>获取操作系统中设置的当前区域性。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Culture</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Culture cmdlet 获取有关当前区域性设置的信息。这包括有关系统中当前语言设置的信息（如键盘布局），以及项目的显示格式（如数字、货币和日期）。

还可使用 Get-UICulture cmdlet，它可获取系统中当前用户界面区域性。用户界面 (UI) 区域性确定哪些文本字符串用于用户界面元素（如菜单和消息）。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Culture</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Globalization.CultureInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Culture 返回一个表示当前区域性的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可使用 $PsCulture 和 $PsUICulture 变量。$PsCulture 变量存储当前区域性的名称，$PsUICulture 变量存储当前 UI 区域性的名称。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-culture                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示计算机上的区域设置的相关信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$c = get-culture

C:\PS&gt; $c | format-list -property *

Parent                         : en
LCID                           : 1033
KeyboardLayoutId               : 1033
Name                           : en-US
IetfLanguageTag                : en-US
DisplayName                    : English (United States)
NativeName                     : English (United States)
EnglishName                    : English (United States)
TwoLetterISOLanguageName       : en
ThreeLetterISOLanguageName     : eng
ThreeLetterWindowsLanguageName : ENU
CompareInfo                    : CompareInfo - 1033
TextInfo                       : TextInfo - 1033
IsNeutralCulture               : False
CultureTypes                   : SpecificCultures, InstalledWin32Cultures, FrameworkCultures
NumberFormat                   : System.Globalization.NumberFormatInfo
DateTimeFormat                 : System.Globalization.DateTimeFormatInfo
Calendar                       : System.Globalization.GregorianCalendar
OptionalCalendars              : {System.Globalization.GregorianCalendar, System.Globalization.GregorianCalendar}
UseUserOverride                : True
IsReadOnly                     : False


C:\PS&gt; $c.calendar

MinSupportedDateTime : 1/1/0001 12:00:00 AM
MaxSupportedDateTime : 12/31/9999 11:59:59 PM
AlgorithmType        : SolarCalendar
CalendarType         : Localized
Eras                 : {1}
TwoDigitYearMax      : 2029
IsReadOnly           : False


C:\PS&gt; $c.datetimeformat

AMDesignator                     : AM
Calendar                         : System.Globalization.GregorianCalendar
DateSeparator                    : /
FirstDayOfWeek                   : Sunday
CalendarWeekRule                 : FirstDay
FullDateTimePattern              : dddd, MMMM dd, yyyy h:mm:ss tt
LongDatePattern                  : dddd, MMMM dd, yyyy
LongTimePattern                  : h:mm:ss tt
MonthDayPattern                  : MMMM dd
PMDesignator                     : PM
RFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'
ShortDatePattern                 : M/d/yyyy
ShortTimePattern                 : h:mm tt
SortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss
TimeSeparator                    : :
UniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'
YearMonthPattern                 : MMMM, yyyy
AbbreviatedDayNames              : {Sun, Mon, Tue, Wed...}
ShortestDayNames                 : {Su, Mo, Tu, We...}
DayNames                         : {Sunday, Monday, Tuesday, Wednesday...}
AbbreviatedMonthNames            : {Jan, Feb, Mar, Apr...}
MonthNames                       : {January, February, March, April...}
IsReadOnly                       : False
NativeCalendarName               : Gregorian Calendar
AbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr...}
MonthGenitiveNames               : {January, February, March, April...}



C:\PS&gt; $c.datetimeformat.firstdayofweek
Sunday                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该示例表明区域性对象中存在大量数据。它演示了如何显示对象的属性和子属性。

第一条命令使用 Get-Culture cmdlet 获取计算机中的当前区域性设置。它将所得到的区域性对象存储在 $c 变量中。

第二条命令显示区域性对象的所有属性。它使用管道运算符 (|) 将 $c 中的区域性对象发送至 Format-List cmdlet。它使用 Property 参数来显示对象的所有 (*) 属性。（此命令可缩写为“$c | fl *”。）

其余的命令通过使用点表示法显示对象属性的值来展示区域性对象的属性。可使用此表示法来显示对象的任意属性的值。

第三条命令使用点表示法来显示区域性对象的 Calendar 属性的值。

第四条命令使用点表示法来显示区域性对象的 DataTimeFormat 属性的值。

许多对象属性都具有属性。第五条命令使用点表示法来显示 DateTimeFormat 属性的 FirstDayOfWeek 属性的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113312</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Date
		</command:name>
		<maml:description>
			<maml:para>获取当前日期和时间。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Date</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Date cmdlet 获取 DateTime 对象，该对象表示当前日期或您所指定的日期。它可将日期和时间设置为多种 Windows 和 UNIX 格式。可使用 Get-Date 来生成日期或时间字符串，然后将字符串发送至其他 cmdlet 或程序。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Date</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Format</maml:name>
				<maml:description>
					<maml:para>以格式说明符指示的 Microsoft .NET Framework 格式显示日期和时间。输入一个格式说明符。有关可用格式说明符的列表，请参阅 MSDN (Microsoft Developer Network) 库中的“DateTimeFormatInfo 类”，网址是 http://go.microsoft.com/fwlink/?LinkId=143638。

使用 Format 参数时，Windows PowerShell 只检索以指定的格式显示日期所需要的 DateTime 对象属性。因此，可能无法使用 DateTime 对象的某些属性和方法。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Date</maml:name>
				<maml:description>
					<maml:para>指定日期和时间。默认情况下，Get-Date 获取系统当前日期和时间。

以系统区域设置的标准格式键入日期，如 dd-MM-yyyy（德语 [德国]）或 MM/dd/yyyy（英语 [美国]）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Day</maml:name>
				<maml:description>
					<maml:para>指定要显示的月的日期。输入一个介于 1-31 之间的值，此值将取代当前日期进行显示。

如果指定的值大于该月中的天数，则 Windows PowerShell 会将该天数添加到此月份并显示结果。例如，“get-date -month 2 -day 31”将显示“March 3”，而不是“February 31”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayHint</maml:name>
				<maml:description>
					<maml:para>确定要显示哪些日期和时间元素。
有效值包括：

-- Date：仅显示日期
-- Time：仅显示时间
-- DateTime：显示日期和时间

默认值为 DateTime。

此参数不会影响 Get-Date 检索到的 DateTime 对象。
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Date</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Time</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Hour</maml:name>
				<maml:description>
					<maml:para>指定要显示的小时。输入一个介于 1-23 之间的值，此值将取代当前时间进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Minute</maml:name>
				<maml:description>
					<maml:para>指定要显示的分钟数。输入一个介于 1-59 之间的值，此值将取代当前分钟数进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Month</maml:name>
				<maml:description>
					<maml:para>指定要显示的月份。输入一个介于 1-12 之间的值，此值将取代当前月份进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Second</maml:name>
				<maml:description>
					<maml:para>指定要显示的秒数。输入一个介于 1-59 之间的值，此值将取代当前秒数进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Year</maml:name>
				<maml:description>
					<maml:para>指定要显示的年份。输入一个介于 1-9999 之间的值，此值将取代当前年份进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Date</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UFormat</maml:name>
				<maml:description>
					<maml:para>以 UNIX 格式显示日期和时间。有关格式说明符列表的信息，请参阅“注释”部分。

使用 UFormat 参数时，Windows PowerShell 只检索以指定的格式显示日期所需要的 DateTime 对象属性。因此，可能无法使用 DateTime 对象的某些属性和方法。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Date</maml:name>
				<maml:description>
					<maml:para>指定日期和时间。默认情况下，Get-Date 获取系统当前日期和时间。

以系统区域设置的标准格式键入日期，如 dd-MM-yyyy（德语 [德国]）或 MM/dd/yyyy（英语 [美国]）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Day</maml:name>
				<maml:description>
					<maml:para>指定要显示的月的日期。输入一个介于 1-31 之间的值，此值将取代当前日期进行显示。

如果指定的值大于该月中的天数，则 Windows PowerShell 会将该天数添加到此月份并显示结果。例如，“get-date -month 2 -day 31”将显示“March 3”，而不是“February 31”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayHint</maml:name>
				<maml:description>
					<maml:para>确定要显示哪些日期和时间元素。
有效值包括：

-- Date：仅显示日期
-- Time：仅显示时间
-- DateTime：显示日期和时间

默认值为 DateTime。

此参数不会影响 Get-Date 检索到的 DateTime 对象。
</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Date</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Time</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Hour</maml:name>
				<maml:description>
					<maml:para>指定要显示的小时。输入一个介于 1-23 之间的值，此值将取代当前时间进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Minute</maml:name>
				<maml:description>
					<maml:para>指定要显示的分钟数。输入一个介于 1-59 之间的值，此值将取代当前分钟数进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Month</maml:name>
				<maml:description>
					<maml:para>指定要显示的月份。输入一个介于 1-12 之间的值，此值将取代当前月份进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Second</maml:name>
				<maml:description>
					<maml:para>指定要显示的秒数。输入一个介于 1-59 之间的值，此值将取代当前秒数进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Year</maml:name>
				<maml:description>
					<maml:para>指定要显示的年份。输入一个介于 1-9999 之间的值，此值将取代当前年份进行显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Date</maml:name>
			<maml:description>
				<maml:para>指定日期和时间。默认情况下，Get-Date 获取系统当前日期和时间。

以系统区域设置的标准格式键入日期，如 dd-MM-yyyy（德语 [德国]）或 MM/dd/yyyy（英语 [美国]）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Day</maml:name>
			<maml:description>
				<maml:para>指定要显示的月的日期。输入一个介于 1-31 之间的值，此值将取代当前日期进行显示。

如果指定的值大于该月中的天数，则 Windows PowerShell 会将该天数添加到此月份并显示结果。例如，“get-date -month 2 -day 31”将显示“March 3”，而不是“February 31”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayHint</maml:name>
			<maml:description>
				<maml:para>确定要显示哪些日期和时间元素。
有效值包括：

-- Date：仅显示日期
-- Time：仅显示时间
-- DateTime：显示日期和时间

默认值为 DateTime。

此参数不会影响 Get-Date 检索到的 DateTime 对象。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DisplayHintType</command:parameterValue>
			<dev:type>
				<maml:name>DisplayHintType</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Format</maml:name>
			<maml:description>
				<maml:para>以格式说明符指示的 Microsoft .NET Framework 格式显示日期和时间。输入一个格式说明符。有关可用格式说明符的列表，请参阅 MSDN (Microsoft Developer Network) 库中的“DateTimeFormatInfo 类”，网址是 http://go.microsoft.com/fwlink/?LinkId=143638。

使用 Format 参数时，Windows PowerShell 只检索以指定的格式显示日期所需要的 DateTime 对象属性。因此，可能无法使用 DateTime 对象的某些属性和方法。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Hour</maml:name>
			<maml:description>
				<maml:para>指定要显示的小时。输入一个介于 1-23 之间的值，此值将取代当前时间进行显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Minute</maml:name>
			<maml:description>
				<maml:para>指定要显示的分钟数。输入一个介于 1-59 之间的值，此值将取代当前分钟数进行显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Month</maml:name>
			<maml:description>
				<maml:para>指定要显示的月份。输入一个介于 1-12 之间的值，此值将取代当前月份进行显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Second</maml:name>
			<maml:description>
				<maml:para>指定要显示的秒数。输入一个介于 1-59 之间的值，此值将取代当前秒数进行显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UFormat</maml:name>
			<maml:description>
				<maml:para>以 UNIX 格式显示日期和时间。有关格式说明符列表的信息，请参阅“注释”部分。

使用 UFormat 参数时，Windows PowerShell 只检索以指定的格式显示日期所需要的 DateTime 对象属性。因此，可能无法使用 DateTime 对象的某些属性和方法。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Year</maml:name>
			<maml:description>
				<maml:para>指定要显示的年份。输入一个介于 1-9999 之间的值，此值将取代当前年份进行显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.DateTime 或 System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					当使用 Format 或 UFormat 参数时，输出对象是 System.String。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          默认情况下，以系统区域设置的长日期和长时间格式显示日期和时间。

当您通过管道将日期传递至接收字符串输入的 cmdlet（如 Add-Content）时，Windows PowerShell 会先将 DateTime 对象转换为字符串，然后才添加到文件中。ToString() 的默认格式为短日期和长时间。要指定备用格式，请使用 Get-Date 的 Format 或 UFormat 参数。

Uformat 值：

UFormat 参数的值如下。命令的格式包括：

get-date -uformat %&lt;value&gt;

例如，
get-date -uformat %d

Date-Time：
日期和时间 - 完整  
（默认值）（2006 年 6 月 16 日，星期五，上午 10:31:27）
c     日期和时间 – 缩写（2006 年 6 月 16 日 星期五 10:31:27）

日期：
D    以 mm/dd/yy 格式显示的日期 (06/14/06)
x    以区域设置的标准格式显示的日期（中文-中国 为 07/09/12）

年份：
C   世纪（2006 的世纪值为 20）
Y   以 4 位格式显示的年份 (2006)
y   以 2 位格式显示的年份 (06)
G   同‘Y’
g   同‘y’

月份：
b   月份名称 - 缩写 (1)
B   月份名称 - 全称（一月）
h   同‘b’
M   月份编号 (06)

周：
W  一年中的周编号 (00-52)
V   一年中的周编号 (01-53)
U   同‘W’


日期：
a   一周中的第几日 - 缩写名称（周一）
A   一周中的第几日 - 全名（星期一）
u   一周中的第几日 - 编号（星期一 = 1）
d   一月中的第几日 - 2 位 (05)
e   一月中的第几日 - 数字前留一空格 ( 5)
j    一年中的第几日 - (1-366)
w   同‘u’

时间：
p   上午或下午
r   以 12 小时格式显示的时间（上午 09:15:36）
R   以 24 小时格式显示的时间 - 不显示秒 (17:45)
T   以 24 小时格式显示的时间 (17:45:52)
X   同‘T’
Z   与通用协调时间 (UTC) 的时差 (-07)

小时：
H   以 24 小时格式显示的小时数 (17)
I    以 12 小时格式显示的小时数 (05)
k   同‘H’
l    同‘I’（大写 I = 小写 L）

分钟和秒：
m   分钟 (35)
S   秒 (05)
s   自 1970 年 1 月 1 日 00:00:00 起过去的秒数 (1150451174.95705)

特殊字符：
n   换行符 (\n)
t   制表符 (\t)
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date -DisplayHint date

Tuesday, June 13, 2006                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令检索 DateTime 对象，但只显示日期。它使用 DisplayHint 参数指示只显示日期。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date -format g

6/13/2006 12:43 PM                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令检索当前日期和时间，并将其设置为短日期和短时间格式。它使用 .NET Framework“g”格式说明符（通用[短日期和短时间]）来指定格式。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date -uformat &quot;%Y / %m / %d / %A / %Z&quot;

2006 / 06 / 13 / Tuesday / -07                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令检索当前日期和时间，并根据命令的指定来设置其格式。在这种情况下，格式包括年份的全称 (%Y)、两位数字的月份 (%m)、日期 (%d)、一周第几天的全称 (%A)，以及相对于 UTC 的时差（“Zulu”）。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-date -year 2000 -month 12 -day 31).dayofyear

366                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示当前日期是一年中的第几天。例如，12 月 31 日是 2006 年的第 365 天，但它是 2000 年的第 366 天。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-date

C:\PS&gt; $a.IsDaylightSavingTime()

True                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将显示当前的日期和时间是否调整为当前区域设置中的夏令时。

第一条命令创建名为 $a 的变量，然后将由 Get-Date 检索的对象赋予该 $a 变量。然后，对 $a 中的对象使用 IsDaylightSavingTime 方法。

要查看 DateTime 对象的属性和方法，请键入：
 &quot;get-date | get-member&quot;.</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-date

C:\PS&gt; $a.ToUniversalTime()

Tuesday, June 13, 2006 8:09:19 PM                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将当前日期和时间转换为 UTC 时间。

第一条命令创建名为 $a 的变量，然后将由 Get-Date 检索的对象赋予该 $a 变量。然后，对 $a 中的对象使用 ToUniversalTime 方法。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-wmiobject win32_bios -computer server01

$a | format-list -property Name, @{Label=&quot;BIOS Age&quot;; `
Expression={(get-date) - $_.ConvertToDateTime($_.ReleaseDate)}}

Name     : Default System BIOS
BIOS Age : 1345.17:31:07.1091047                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>Windows Management Instrumentation (WMI) 使用不同于 Get-Date 返回的 .NET Framework 日期时间对象的一个日期时间对象。若要在命令中将 WMI 中的日期时间信息与 Get-Date 中的日期时间信息一起使用，则必须使用 ConvertToDateTime 方法将 WMI CIM_DATETIME 对象转换为 .NET Framework DateTime 对象。

此示例中的命令将显示远程计算机 Server01 上的 BIOS 的 name 和 age。

第一条命令使用 Get-WmiObject cmdlet 来获取 Server01 上的 Win32_BIOS 类的实例，然后将其存储到 $a 变量中。

第二条命令使用管道运算符 (|) 将存储在 $a 中的 WMI 对象发送至 Format-List cmdlet。Format-List 的 Property 参数用于指定要在列表中显示的两个属性：“Name”和“BIOS Age”。“BIOS Age”属性将在哈希表中指定。该表包括 Label 键（指定属性的名称）和 Expression 键（包含计算 BIOS age 的表达式）。该表达式使用 ConvertToDateTime 方法将 ReleaseDate 的每个实例转换为 .NET Framework DateTime 对象。然后，从 Get-Date cmdlet 的值中减去该值，此 cmdlet 在不带参数的情况下获取当前日期。

在 Windows PowerShell 中，倒引号字符 (`) 为行继续符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date

Tuesday, June 13, 2006 12:43:42 PM                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 DateTime 对象并以系统区域设置的长日期和长时间格式来显示当前日期和时间，就好像您键入了“get-date -format F”一样。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-date

C:\PS&gt; Tuesday, September 26, 2006 11:25:31 AM

c:\PS&gt;(get-date).ToString()
9/26/2006 11:25:31 AM

C:\PS&gt;get-date | add-content test.txt  
# Adds 9/26/2006 11:25:31 AM

C:\PS&gt;get-date -format F | add-content test.txt
# Adds Tuesday, September 26, 2006 11:25:31 AM                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令演示了如何结合使用 Get-Date 和 Add-Content 以及其他 cmdlet（这些 cmdlet 可将 Get-Date 生成的 DateTime 对象转换为字符串）。

第一条命令表明“get-date”命令的默认显示采用长日期和长时间格式。

第二条命令表明 DateTime 对象的 ToString() 方法的默认显示采用短日期和短时间格式。

第三条命令使用管道运算符将 DateTime 对象发送至 Add-Content cmdlet，该 cmdlet 将内容添加到 Test.txt 文件中。由于 Add-Content 使用 DateTime 对象的 ToString() 方法，所以所添加的日期采用短日期和短时间格式。

第四条命令使用 Get-Date 的 Format 参数来指定格式。当使用 Format 或 UFormat 参数时，Get-Date 生成字符串，而不是 DateTime 对象。之后，当您将字符串发送到 Add-Content 时，它会在不更改字符串的情况下直接将该字符串添加到 Test.txt 文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113313</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Date</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-TimeSpan</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Event
		</command:name>
		<maml:description>
			<maml:para>获取事件队列中的事件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Event</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Event cmdlet 获取当前会话的 Windows PowerShell 事件队列中的事件。您可以获取所有事件，也可以使用 EventIdentifier 或 SourceIdentifier 参数指定事件。

当发生某事件时，会将其添加到事件队列中。事件队列包括已注册的事件、使用 New-Event cmdlet 创建的事件，以及当 Windows PowerShell 退出时引发的事件。可使用 Get-Event 或 Wait-Event 来获取事件。

此 cmdlet 不会从“事件查看器”日志中获取事件。要获取这些事件，请使用 Get-WinEvent 或 Get-EventLog。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>EventIdentifier</maml:name>
				<maml:description>
					<maml:para>仅获取具有指定事件标识符的事件。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Event</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>仅获取具有指定源标识符的事件。默认值为事件队列中的所有事件。不允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>EventIdentifier</maml:name>
			<maml:description>
				<maml:para>仅获取具有指定事件标识符的事件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>仅获取具有指定源标识符的事件。默认值为事件队列中的所有事件。不允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有事件</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSEventArgs</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Event 为每个事件返回一个 PSEventArgs 对象。若要查看此对象的说明，请键入“get-help get-event -full”，然后查看帮助主题的“注释”部分。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。

Get-Event cmdlet 返回具有以下属性的 PSEventArgs 对象 (System.Management.Automation.PSEventArgs)。

-- ComputerName：发生该事件的计算机的名称。只有在从远程计算机转发该事件时，才填充此属性值。

-- RunspaceId：一个 GUID，用于唯一标识该事件发生时所在的会话。只有在从远程计算机转发该事件时，才填充此属性值。

-- EventIdentifier：一个整数 (Int32)，用于唯一标识当前会话中的事件通知。

-- Sender：生成事件的对象。在 Action 参数的值中，$Sender 自动变量包含发送方对象。

-- SourceEventArgs：从 EventArgs 派生的第一个参数（如果存在）。例如，在签名形式为“Object sender, Timers.ElapsedEventArgs e”的 Timer Elapsed 事件中，SourceEventArgs 属性包含 Timers.ElapsedEventArgs。在 Action 参数的值中，$SourceEventArgs 自动变量包含此值。

-- SourceArgs：原始事件签名的所有参数。对于标准事件签名，$args[0] 表示发送方，$args[1] 表示 SourceEventArgs。在 Action 参数的值中，$SourceArgs 自动变量包含此值。

-- SourceIdentifier：用于标识事件订阅的字符串。在 Action 参数的值中，$Event 自动变量的 SourceIdentifier 属性包含此值。

-- TimeGenerated：一个 DateTime 对象，表示事件的生成时间。在 Action 参数的值中，$Event 自动变量的 TimeGenerated 属性包含此值。

--MessageData：与事件订阅关联的数据。用户在注册事件时指定此数据。在 Action 参数的值中，$Event 自动变量的 MessageData 属性包含此值。

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-event                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取事件队列中的所有事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-event -sourceIdentifier &quot;PowerShell.ProcessCreated&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取其中所含 SourceIdentifier 属性的值为“PowerShell.ProcessCreated”的事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$events = get-event

C:\PS&gt; $events[0] | format-list -property *

ComputerName     :
RunspaceId       : c2153740-256d-46c0-a57c-b805917d1b7b
EventIdentifier  : 1
Sender           : System.Management.ManagementEventWatcher
SourceEventArgs  : System.Management.EventArrivedEventArgs
SourceArgs       : {System.Management.ManagementEventWatcher, System.Management.EventArrivedEventArgs}
SourceIdentifier : ProcessStarted
TimeGenerated    : 11/13/2008 12:09:32 PM
MessageData      :


C:\PS&gt; get-event | where {$_.TimeGenerated -ge &quot;11/13/2008 12:15:00 PM&quot;}

ComputerName     :
RunspaceId       : c2153740-256d-46c0-a57c-b8059325d1a0
EventIdentifier  : 1
Sender           : System.Management.ManagementEventWatcher
SourceEventArgs  : System.Management.EventArrivedEventArgs
SourceArgs       : {System.Management.ManagementEventWatcher, System.Management.EventArrivedEventArgs}
SourceIdentifier : ProcessStarted
TimeGenerated    : 11/13/2008 12:15:00 PM
MessageData      :                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用属性而不是 SourceIdentifier 来获取事件。

第一条命令获取事件队列中的所有事件并将其保存在 $events 变量中。

第二条命令使用数组表示法来获取 $events 变量的数组中的第一个（索引为 0）事件。该命令使用管道运算符 (|) 将事件发送至 Format-List 命令，后者显示列表中事件的所有属性。这样，您便可以检查事件对象的属性。

第三条命令演示了如何基于事件的生成时间，使用 Where-Object cmdlet 来
获取事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-event -eventIdentifier 2                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取事件标识符为 2 的事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113453</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-EventSubscriber
		</command:name>
		<maml:description>
			<maml:para>获取当前会话中的事件订阅者。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>EventSubscriber</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-EventSubscriber cmdlet 获取当前会话中的事件订阅者。

当使用 Register 事件 cmdlet 来订阅事件时，会将事件订阅者添加到 Windows PowerShell 会话中，每当发生所订阅的事件时，就会将其添加到事件队列中。要取消事件订阅，请使用 Unregister-Event cmdlet 来删除事件订阅者。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-EventSubscriber</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SubscriptionId</maml:name>
				<maml:description>
					<maml:para>只获取指定的订阅标识符。默认情况下，Get-EventSubscriber 获取会话中的所有事件订阅者。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>获取所有事件订阅者，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的事件的订阅者。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-EventSubscriber</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>仅获取具有指定 SourceIdentifier 属性值的事件订阅者。默认情况下，Get-EventSubscriber 获取会话中的所有事件订阅者。不允许使用通配符。此参数区分大小写。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>获取所有事件订阅者，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的事件的订阅者。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>获取所有事件订阅者，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的事件的订阅者。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>仅获取具有指定 SourceIdentifier 属性值的事件订阅者。默认情况下，Get-EventSubscriber 获取会话中的所有事件订阅者。不允许使用通配符。此参数区分大小写。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有事件订阅者</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SubscriptionId</maml:name>
			<maml:description>
				<maml:para>只获取指定的订阅标识符。默认情况下，Get-EventSubscriber 获取会话中的所有事件订阅者。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSEventSubscriber</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-EventSubscriber 返回表示每个事件订阅者的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          New-Event cmdlet 创建自定义事件，但不生成订阅者。因此，Get-EventSubscriber cmdlet 将无法找到这些事件的订阅者对象。不过，如果使用 Register-EngineEvent cmdlet 来订阅自定义事件（以便转发事件或指定操作），则 Get-EventSubscriber 将找到 Register-EngineEvent 生成的订阅者。

事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$timer = New-Object Timers.Timer 

C:\PS&gt; $timer | Get-Member -Type Event 

C:\PS&gt; Register-ObjectEvent -inputObject $timer -EventName Elapsed -SourceIdentifier Timer.Elapsed

C:\PS&gt; Get-EventSubscriber

C:\PS&gt; $timer = New-Object Timers.Timer 

C:\PS&gt; $timer | Get-Member -Type Event 

   TypeName: System.Timers.Timer 

Name     MemberType Definition 
----     ---------- ---------- 
Disposed Event      System.EventHandler Disposed(System.Object, System.EventArgs) 
Elapsed  Event      System.Timers.ElapsedEventHandler Elapsed(System.Object, System.Timers.ElapsedEventArgs)

C:\PS&gt; Register-ObjectEvent -InputObject $timer -EventName Elapsed -SourceIdentifier Timer.Elapsed

C:\PS&gt; Get-EventSubscriber 

SubscriptionId   : 4 
SourceObject     : System.Timers.Timer 
EventName        : Elapsed 
SourceIdentifier : Timer.Elapsed 
Action           : 
HandlerDelegate  : 
SupportEvent     : False 
ForwardEvent     : False                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例使用 Get-EventSubscriber 命令来获取计时器事件的事件订阅者。

第一条命令使用 New-Object cmdlet 创建计时器对象的实例。它将新计时器对象保存在 $timer 变量中。

第二条命令使用 Get-Member cmdlet 来显示可用于计时器对象的事件。该命令使用 Get-Member cmdlet 的 Type 参数，该参数的值为 Event。

第三条命令使用 Register-ObjectEvent cmdlet 来注册计时器对象的 Elapsed 事件。

第四条命令使用 Get-EventSubscriber cmdlet 来获取 Elapsed 事件的事件订阅者。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$timer  = New-Object Timers.Timer

C:\PS&gt; $timer.Interval = 500

C:\PS&gt; Register-ObjectEvent -inputObject $timer -eventName Elapsed -sourceIdentifier Timer.Random -Action { $random = Get-Random -Min 0 -Max 100 }

Id  Name           State      HasMoreData  Location  Command
--  ----           -----      -----------  --------  -------
3   Timer.Random   NotStarted False                  $random = Get-Random ...


C:\PS&gt; $timer.Enabled = $true

C:\PS&gt; $subscriber = Get-EventSubcriber -sourceIdentifer Timer.Random

C:\PS&gt; ($subscriber.action).gettype().fullname
PSEventJob

C:\PS&gt; $subscriber.action | format-list -property *

State         : Running
Module        : __DynamicModule_6b5cbe82-d634-41d1-ae5e-ad7fe8d57fe0
StatusMessage :
HasMoreData   : True
Location      :
Command       : $random = Get-Random -Min 0 -Max 100
JobStateInfo  : Running
Finished      : System.Threading.ManualResetEvent
InstanceId    : 88944290-133d-4b44-8752-f901bd8012e2
Id            : 1
Name          : Timer.Random
ChildJobs     : {}
...

C:\PS&gt; &amp; $subscriber.action.module {$random}
96

C:\PS&gt; &amp; $subscriber.action.module {$random}
23                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何在事件订阅者的 Action 属性中的 PSEventJob 对象中使用动态模块。

第一条命令使用 New-Object cmdlet 创建一个计时器对象。第二条命令将计时器间隔设置为 500（毫秒）。

第三条命令使用 Register-ObjectEvent cmdlet 注册该计时器对象的 Elapsed 事件。该命令包含处理该事件的操作。每当经过该计时器间隔时，就会引发一个事件并运行操作中的命令。在此示例中，Get-Random cmdlet 生成一个介于 0 和 100 之间的随机数，并将其保存在 $random 变量中。事件的源标识符是 Timer.Random。

在 Register-ObjectEvent 命令中使用 Action 参数时，该命令返回表示该操作的 PSEventJob 对象。

第四条命令启用计时器。

第五条命令使用 Get-EventSubscriber cmdlet 来获取 Timer.Random 事件的事件订阅者。它将事件订阅者对象保存在 $subscriber 变量中。

第六条命令显示事件订阅者对象的 Action 属性包含一个 PSEventJob 对象。事实上，它包含与 Register-ObjectEvent 命令返回的 PSEventJob 对象相同的对象。

第七条命令使用 Format-List cmdlet 在列表中的 Action 属性中显示 PSEventJob 对象的所有属性。结果显示，PSEventJob 对象具有 Module 属性，该属性包含实现该操作的动态脚本模块。

其余的命令使用调用运算符 (&amp;) 调用模块中的命令并显示 $random 变量的值。您可以使用调用运算符调用模块中的任何命令，包括未导出的命令。在此示例中，这些命令显示 Elapsed 事件发生时所生成的随机数。

有关模块的详细信息，请参阅 about_Modules。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135155</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-FormatData
		</command:name>
		<maml:description>
			<maml:para>获取当前会话中的格式数据。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>FormatData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-FormatData cmdlet 获取当前会话中的格式数据。

会话中的格式数据包括 Format.ps1xml 格式设置文件（如 $pshome 目录中的文件）中的格式数据、导入到会话中的模块的格式数据，以及使用 Import-PSSession cmdlet 导入到会话中的命令的格式数据。

可以使用此 cmdlet 检查格式数据。然后，可以使用 Export-FormatData cmdlet 将对象序列化（将它们转换为 XML），并将它们保存在 Format.ps1xml 文件中。

有关 Windows PowerShell 中格式设置文件的详细信息，请参阅 about_Format.ps1xml。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-FormatData</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>TypeName</maml:name>
				<maml:description>
					<maml:para>只获取具有指定类型名称的格式数据。输入类型名称。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>TypeName</maml:name>
			<maml:description>
				<maml:para>只获取具有指定类型名称的格式数据。输入类型名称。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.ExtendedTypeDefinition</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-formatdata                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取会话中的格式数据。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-formatdata -typename Microsoft.Wsman*                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取名称以“Microsoft.Wsman”开头的格式数据项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$f = get-formatdata -typename helpinfoshort

C:\PS&gt; $f 

TypeName        FormatViewDefinition
--------        --------------------
HelpInfoShort   {help , TableControl}

C:\PS&gt; $f.FormatViewDefinition[0].control

Headers                                                                    Rows
-------                                                                    ----
{System.Management.Automation.TableControlColumnHeader, System.Manageme... {System.Management.Automation.TableControlRow}


C:\PS&gt; $f.FormatViewDefinition[0].control.headers

Label         Alignment      Width
-----         ---------      -----
Name          Left           33
Category      Left           9
              Undefined      0
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何获取格式数据对象并检查其属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-formatdata

C:\PS&gt; import-module bitstransfer
C:\PS&gt; $b = get-formatdata
C:\PS&gt; compare-object $a $b

InputObject                                                SideIndicator
-----------                                                -------------
Microsoft.BackgroundIntelligentTransfer.Management.BitsJob =&gt;


C:\PS&gt; get-formatdata *bits* | export-formatdata -filepath c:\test\bits.format.ps1xml

C:\PS&gt; get-content c:\test\bits.format.ps1xml

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Configuration&gt;&lt;ViewDefinitions&gt;
&lt;View&gt;&lt;Name&gt;Microsoft.BackgroundIntelligentTransfer.Management.BitsJob&lt;/Name&gt;
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何使用 Get-FormatData 和 Export-FormatData 导出由模块添加的格式数据。

前四条命令使用 Get-FormatData、Import-Module 和 Compare-Object cmdlet 来标识 BitsTransfer 模块添加到会话中的格式类型。

第五条命令使用 Get-FormatData cmdlet 来获取 BitsTransfer 模块添加的格式类型。它使用管道运算符 (|) 将格式类型对象发送到 Export-FormatData cmdlet，该 cmdlet 将格式类型对象转换回 XML，并将其保存在指定的 format.ps1xml 文件中。

最后一条命令显示 format.ps1xml 文件内容的摘要。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=144303</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-FormatData</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Update-FormatData</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Host
		</command:name>
		<maml:description>
			<maml:para>获取表示当前主机程序的对象。默认情况下，还显示 Windows PowerShell 的版本和区域信息。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Host cmdlet 获取表示托管 Windows PowerShell 的程序的对象。

默认显示内容包括 Windows PowerShell 版本号以及主机使用的当前区域和语言设置，但是主机对象包含大量信息，其中包括有关当前正在运行的 Windows PowerShell 版本以及 Windows PowerShell 的当前区域性和 UI 区域性的详细信息。也可使用该 cmdlet 对主机程序用户界面的特性（如文本和背景色）进行自定义。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Host</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.Internal.Host.InternalHost</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Host 返回一个 System.Management.Automation.Internal.Host.InternalHost 对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          $host 自动变量包含的对象与 Get-Host 返回的对象相同，您可采用相同的方式来使用它。同样，$PSCulture 和 $PSUICulture 自动变量包含的对象与主机对象的 CurrentCulture 和 CurrentUICulture 属性包含的对象相同。可交替使用这些功能。

有关详细信息，请参阅 about_Automatic_Variables。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-host

Name             : ConsoleHost
Version          : 2.0
InstanceId       : e4e0ab54-cc5e-4261-9117-4081f20ce7a2
UI               : System.Management.Automation.Internal.Host.InternalHostUserInterface
CurrentCulture   : en-US
CurrentUICulture : en-US
PrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy
IsRunspacePushed : False
Runspace         : System.Management.Automation.Runspaces.LocalRunspace
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示有关 Windows PowerShell 控制台的信息，在本示例中，该控制台是 Windows PowerShell 的当前主机程序。它包括主机的名称、主机中正在运行的 Windows PowerShell 版本，以及当前区域性和 UI 区域性。

Version、UI、CurrentCulture、CurrentUICulture、PrivateData 和 Runspace 属性都包含一个对象，且该对象都具有一些非常有用的属性。后面的示例将检查这些属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$h = get-host

C:\PS&gt; $win = $h.ui.rawui.windowsize

C:\PS&gt; $win.height = 10

C:\PS&gt; $win.width  = 10

C:\PS&gt; $h.ui.rawui.set_windowsize($win)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 Windows PowerShell 窗口重新调整为 10 x 10 像素。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-host).version | format-list -property *

Major         : 2
Minor         : 0
Build         : -1
Revision      : -1
MajorRevision : -1
MinorRevision : -1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取有关主机中运行的 Windows PowerShell 版本的详细信息。您可以查看这些值，但不能更改它们。

Get-Host 的 Version 属性包含 System.Version 对象。此命令使用管道运算符 (|) 将版本对象发送至 Format-List cmdlet。Format-List 命令使用值为 *（全部）的 Property 参数来显示版本对象的所有属性和属性值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-host).currentculture | format-list -property *

Parent                         : en
LCID                           : 1033
KeyboardLayoutId               : 1033
Name                           : en-US
IetfLanguageTag                : en-US
DisplayName                    : English (United States)
NativeName                     : English (United States)
EnglishName                    : English (United States)
TwoLetterISOLanguageName       : en
ThreeLetterISOLanguageName     : eng
ThreeLetterWindowsLanguageName : ENU
CompareInfo                    : CompareInfo - 1033
TextInfo                       : TextInfo - 1033
IsNeutralCulture               : False
CultureTypes                   : SpecificCultures, InstalledWin32Cultures, FrameworkCultures
NumberFormat                   : System.Globalization.NumberFormatInfo
DateTimeFormat                 : System.Globalization.DateTimeFormatInfo
Calendar                       : System.Globalization.GregorianCalendar
OptionalCalendars              : {System.Globalization.GregorianCalendar, System.Globalization.GregorianCalendar}
UseUserOverride                : True
IsReadOnly                     : False                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取有关主机中运行的 Windows PowerShell 的当前区域性设置的详细信息。该信息与 Get-Culture cmdlet 返回的信息相同。

（同样，CurrentUICulture 属性返回的对象与 Get-UICulture 返回的对象相同。）

主机对象的 CurrentCulture 属性包含 System.Globalization.CultureInfo 对象。此命令使用管道运算符 (|) 将 CultureInfo 对象发送至 Format-List cmdlet。Format-List 命令使用值为 *（全部）的 Property 参数来显示 CultureInfo 对象的所有属性和属性值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-host).currentculture.DateTimeFormat | format-list -property *

AMDesignator                     : AM
Calendar                         : System.Globalization.GregorianCalendar
DateSeparator                    : /
FirstDayOfWeek                   : Sunday
CalendarWeekRule                 : FirstDay
FullDateTimePattern              : dddd, MMMM dd, yyyy h:mm:ss tt
LongDatePattern                  : dddd, MMMM dd, yyyy
LongTimePattern                  : h:mm:ss tt
MonthDayPattern                  : MMMM dd
PMDesignator                     : PM
RFC1123Pattern                   : ddd, dd MMM yyyy HH':'mm':'ss 'GMT'
ShortDatePattern                 : M/d/yyyy
ShortTimePattern                 : h:mm tt
SortableDateTimePattern          : yyyy'-'MM'-'dd'T'HH':'mm':'ss
TimeSeparator                    : :
UniversalSortableDateTimePattern : yyyy'-'MM'-'dd HH':'mm':'ss'Z'
YearMonthPattern                 : MMMM, yyyy
AbbreviatedDayNames              : {Sun, Mon, Tue, Wed...}
ShortestDayNames                 : {Su, Mo, Tu, We...}
DayNames                         : {Sunday, Monday, Tuesday, Wednesday...}
AbbreviatedMonthNames            : {Jan, Feb, Mar, Apr...}
MonthNames                       : {January, February, March, April...}
IsReadOnly                       : False
NativeCalendarName               : Gregorian Calendar
AbbreviatedMonthGenitiveNames    : {Jan, Feb, Mar, Apr...}
MonthGenitiveNames               : {January, February, March, April...}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令返回有关 Windows PowerShell 使用的当前区域性的 DateTimeFormat 的详细信息。

主机对象的 CurrentCulture 属性包含 CultureInfo 对象，而 CultureInfo 对象具有许多有用的属性。其中，DateTimeFormat 属性包含 DateTimeFormatInfo 对象，而该对象又具有许多有用的属性。

要查找存储在对象属性中的对象的类型，请使用 Get-Member cmdlet。要显示对象的属性值，请使用 Format-List cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-host).ui.rawui | format-list -property *

ForegroundColor       : DarkYellow
BackgroundColor       : DarkBlue
CursorPosition        : 0,390
WindowPosition        : 0,341
CursorSize            : 25
BufferSize            : 120,3000
WindowSize            : 120,50
MaxWindowSize         : 120,81
MaxPhysicalWindowSize : 182,81
KeyAvailable          : False
WindowTitle           : Windows PowerShell 2.0 (04/11/2008 00:08:14)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示主机对象的 RawUI 属性的各属性。通过更改这些值，可以更改主机程序的外观。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-host).ui.rawui.backgroundcolor = &quot;Black&quot;

C:\PS&gt; cls                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将 Windows PowerShell 控制台的背景色更改为黑色。“cls”命令是 Clear-Host 函数的别名，该函数可清除屏幕并将整个屏幕更改为新的颜色。

此更改仅在当前会话中有效。若要更改所有会话的控制台背景色，请将该命令添加到 Windows PowerShell 配置文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$host.privatedata.errorbackgroundcolor = &quot;white&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将错误消息的背景色更改为白色。

此命令使用自动变量 $host，该变量包含当前主机程序的主机对象。Get-Host 会返回 $host 包含的同一对象，所以它们可以互换。

此命令使用 $host 的 PrivateData 属性作为其 ErrorBackgroundColor 属性。若要查看 $host.privatedata 属性中对象的所有属性，请键入“$host.privatedata | format-list *”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113318</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Read-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Member
		</command:name>
		<maml:description>
			<maml:para>获取对象的属性和方法。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Member</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Member 获取对象的“成员”（属性和方法）。

若要指定对象，请使用 InputObject 参数或通过管道将对象传递到 Get-Member。若要检索有关静态成员（类的成员，而不是实例的成员）的信息，请使用 Static 参数。若要仅获取特定类型的成员（如 NoteProperties），请使用 MemberType 参数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Member</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定对象的一个或多个属性或方法的名称。Get-Member 仅获取指定的属性和方法。

如果将 Name 参数与 MemberType、View 或 Static 参数一起使用，Get-Member 将仅获取满足所有参数条件的成员。

若要根据名称获取静态成员，请将 Static 参数与 Name 参数一起使用。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>向显示内容中添加固有成员（PSBase、PSAdapted、PSObject、PSTypeNames）以及编译器生成的 get_ 和 set_ 方法。默认情况下，Get-Member 会在除“Base”和“Adapted”之外的所有视图中获取这些属性，但不会显示它们。

下面的列表描述了使用 Force 参数时添加的属性：

-- PSBase：.NET Framework 对象的原始属性，无任何扩展或改编。这些是为对象类定义的属性并列在 MSDN 中。
-- PSAdapted：在 Windows PowerShell 扩展类型系统中定义的属性和方法。
-- PSExtended：在 Types.ps1xml 文件中添加的或使用 Add-Member cmdlet 添加的属性和方法。
-- PSObject：将基对象转换为 Windows PowerShell PSObject 对象的适配器。
-- PSTypeNames：按专指性顺序描述对象的对象类型的列表。设置对象格式时，Windows PowerShell 会在 Windows PowerShell 安装目录 ($pshome) 下的 Format.ps1xml 文件中搜索类型。它将使用找到的第一个类型的格式定义。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定将检索其成员的对象。

使用 InputObject 参数与通过管道将对象传递到 Get-Member 不同。区别如下：

-- 通过管道将对象集合传递到 Get-Member 时，Get-Member 会获取集合中单个对象的成员，如整数数组中整数的属性。

-- 使用 InputObject 提交对象集合时，Get-Member 会获取集合的成员，如整数数组中数组的属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MemberType</maml:name>
				<maml:description>
					<maml:para>仅获取具有指定成员类型的成员。默认值为 All。

此参数的有效值为：

-- AliasProperty：一种可为现有属性定义新名称的属性。
-- CodeMethod：一种可引用 .NET Framework 类的静态方法的方法。
-- CodeProperty：一种可引用 .NET Framework 类的静态属性的属性。
-- Event：指示对象将发送消息来指示某项操作或状态更改。
-- MemberSet：属性和方法的预定义集合，如 PSBase、PSObject 和 PSTypeNames。
-- Method：基础 .NET Framework 对象的方法。
-- NoteProperty：具有静态值的属性。
-- ParameterizedProperty：具有参数和参数值的属性。
-- Property：基础 .NET Framework 对象的属性。
-- PropertySet：对象属性的预定义集合。
-- ScriptMethod：其值是脚本输出的方法。
-- ScriptProperty：其值是脚本输出的属性。

-- All：获取全部成员类型。
-- Methods：获取对象的所有方法类型（如 Method、CodeMethod、ScriptMethod）。
-- Properties：获取对象的所有类型的属性（如 Property、CodeProperty、AliasProperty、ScriptProperty）。

并非所有对象都具有成员的全部类型。如果您指定该对象所不具有的成员类型，则 Windows PowerShell 会返回 null 值。

若要获取相关类型的成员（如所有扩展成员），请使用 View 参数。如果将 MemberType 参数与 Static 或 View 参数一起使用，Get-Member 将获取同时属于这两个集合的成员。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">AliasProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CodeProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Property</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NoteProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ScriptProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Properties</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">PropertySet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Method</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CodeMethod</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ScriptMethod</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Methods</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ParameterizedProperty</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">MemberSet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Event</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Static</maml:name>
				<maml:description>
					<maml:para>仅获取对象的静态属性和方法。

将在对象的类上定义静态属性和方法，而不是在类的任何特定实例上定义。

如果将 Static 参数与 View 参数一起使用，将忽略 View 参数。如果将 Static 参数与 MemberType 参数一起使用，Get-Member 将仅获取同时属于这两个集合的成员。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>View</maml:name>
				<maml:description>
					<maml:para>仅获取特定类型的成员（属性和方法）。指定一个或多个值。默认值是“Adapted, Extended”。

有效值包括：
-- Base：仅获取 .NET Framework 对象的原始属性和方法（无任何扩展或改编）。
-- Adapted：仅获取 Windows PowerShell 扩展类型系统中定义的属性和方法。
-- Extended：仅获取在 Types.ps1xml 文件中添加的或使用 Add-Member cmdlet 添加的属性和方法。
-- All：获取 Base、Adapted 和 Extended 视图中的成员。

View 参数确定检索到的成员，而不只是这些成员的显示方式。

若要获取特定成员类型（如脚本属性），请使用 MemberType 参数。如果在同一命令中使用 MemberType 和 View 参数，Get-Member 将获取同时属于这两个集合的成员。如果在同一命令中使用 Static 和 View 参数，将忽略 View 参数。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Extended</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Adapted</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Base</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>向显示内容中添加固有成员（PSBase、PSAdapted、PSObject、PSTypeNames）以及编译器生成的 get_ 和 set_ 方法。默认情况下，Get-Member 会在除“Base”和“Adapted”之外的所有视图中获取这些属性，但不会显示它们。

下面的列表描述了使用 Force 参数时添加的属性：

-- PSBase：.NET Framework 对象的原始属性，无任何扩展或改编。这些是为对象类定义的属性并列在 MSDN 中。
-- PSAdapted：在 Windows PowerShell 扩展类型系统中定义的属性和方法。
-- PSExtended：在 Types.ps1xml 文件中添加的或使用 Add-Member cmdlet 添加的属性和方法。
-- PSObject：将基对象转换为 Windows PowerShell PSObject 对象的适配器。
-- PSTypeNames：按专指性顺序描述对象的对象类型的列表。设置对象格式时，Windows PowerShell 会在 Windows PowerShell 安装目录 ($pshome) 下的 Format.ps1xml 文件中搜索类型。它将使用找到的第一个类型的格式定义。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定将检索其成员的对象。

使用 InputObject 参数与通过管道将对象传递到 Get-Member 不同。区别如下：

-- 通过管道将对象集合传递到 Get-Member 时，Get-Member 会获取集合中单个对象的成员，如整数数组中整数的属性。

-- 使用 InputObject 提交对象集合时，Get-Member 会获取集合的成员，如整数数组中数组的属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MemberType</maml:name>
			<maml:description>
				<maml:para>仅获取具有指定成员类型的成员。默认值为 All。

此参数的有效值为：

-- AliasProperty：一种可为现有属性定义新名称的属性。
-- CodeMethod：一种可引用 .NET Framework 类的静态方法的方法。
-- CodeProperty：一种可引用 .NET Framework 类的静态属性的属性。
-- Event：指示对象将发送消息来指示某项操作或状态更改。
-- MemberSet：属性和方法的预定义集合，如 PSBase、PSObject 和 PSTypeNames。
-- Method：基础 .NET Framework 对象的方法。
-- NoteProperty：具有静态值的属性。
-- ParameterizedProperty：具有参数和参数值的属性。
-- Property：基础 .NET Framework 对象的属性。
-- PropertySet：对象属性的预定义集合。
-- ScriptMethod：其值是脚本输出的方法。
-- ScriptProperty：其值是脚本输出的属性。

-- All：获取全部成员类型。
-- Methods：获取对象的所有方法类型（如 Method、CodeMethod、ScriptMethod）。
-- Properties：获取对象的所有类型的属性（如 Property、CodeProperty、AliasProperty、ScriptProperty）。

并非所有对象都具有成员的全部类型。如果您指定该对象所不具有的成员类型，则 Windows PowerShell 会返回 null 值。

若要获取相关类型的成员（如所有扩展成员），请使用 View 参数。如果将 MemberType 参数与 Static 或 View 参数一起使用，Get-Member 将获取同时属于这两个集合的成员。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSMemberTypes</command:parameterValue>
			<dev:type>
				<maml:name>PSMemberTypes</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定对象的一个或多个属性或方法的名称。Get-Member 仅获取指定的属性和方法。

如果将 Name 参数与 MemberType、View 或 Static 参数一起使用，Get-Member 将仅获取满足所有参数条件的成员。

若要根据名称获取静态成员，请将 Static 参数与 Name 参数一起使用。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Static</maml:name>
			<maml:description>
				<maml:para>仅获取对象的静态属性和方法。

将在对象的类上定义静态属性和方法，而不是在类的任何特定实例上定义。

如果将 Static 参数与 View 参数一起使用，将忽略 View 参数。如果将 Static 参数与 MemberType 参数一起使用，Get-Member 将仅获取同时属于这两个集合的成员。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>View</maml:name>
			<maml:description>
				<maml:para>仅获取特定类型的成员（属性和方法）。指定一个或多个值。默认值是“Adapted, Extended”。

有效值包括：
-- Base：仅获取 .NET Framework 对象的原始属性和方法（无任何扩展或改编）。
-- Adapted：仅获取 Windows PowerShell 扩展类型系统中定义的属性和方法。
-- Extended：仅获取在 Types.ps1xml 文件中添加的或使用 Add-Member cmdlet 添加的属性和方法。
-- All：获取 Base、Adapted 和 Extended 视图中的成员。

View 参数确定检索到的成员，而不只是这些成员的显示方式。

若要获取特定成员类型（如脚本属性），请使用 MemberType 参数。如果在同一命令中使用 MemberType 和 View 参数，Get-Member 将获取同时属于这两个集合的成员。如果在同一命令中使用 Static 和 View 参数，将忽略 View 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSMemberViewTypes</command:parameterValue>
			<dev:type>
				<maml:name>PSMemberViewTypes</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Get-Member。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.MemberDefinition</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Member 为所获取的每个属性或方法返回一个对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          通过使用 InputObject 参数，或通过管道将对象传递到 Get-Member（以逗号为前缀），可以检索有关集合对象的信息。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | get-member


   TypeName: System.ServiceProcess.ServiceController

Name                      MemberType    Definition
----                      ----------    ----------
Name                      AliasProperty Name = ServiceName
Close                     Method        System.Void Close()
Continue                  Method        System.Void Continue()
CreateObjRef              Method        System.Runtime.Remoting.ObjRef CreateObjRef(Type requestedType)
Dispose                   Method        System.Void Dispose()
Equals                    Method        System.Boolean Equals(Object obj)
ExecuteCommand            Method        System.Void ExecuteCommand(Int32 command)
GetHashCode               Method        System.Int32 GetHashCode()
GetLifetimeService        Method        System.Object GetLifetimeService()
GetType                   Method        System.Type GetType()
InitializeLifetimeService Method        System.Object InitializeLifetimeService()
Pause                     Method        System.Void Pause()
Refresh                   Method        System.Void Refresh()
Start                     Method        System.Void Start(), System.Void Start(String[] args)
Stop                      Method        System.Void Stop()
ToString                  Method        System.String ToString()
WaitForStatus             Method        System.Void WaitForStatus(ServiceControllerStatus desiredStatus), System.Voi...
CanPauseAndContinue       Property      System.Boolean CanPauseAndContinue {get;}
CanShutdown               Property      System.Boolean CanShutdown {get;}
CanStop                   Property      System.Boolean CanStop {get;}
Container                 Property      System.ComponentModel.IContainer Container {get;}
DependentServices         Property      System.ServiceProcess.ServiceController[] DependentServices {get;}
DisplayName               Property      System.String DisplayName {get;set;}
MachineName               Property      System.String MachineName {get;set;}
ServiceHandle             Property      System.Runtime.InteropServices.SafeHandle ServiceHandle {get;}
ServiceName               Property      System.String ServiceName {get;set;}
ServicesDependedOn        Property      System.ServiceProcess.ServiceController[] ServicesDependedOn {get;}
ServiceType               Property      System.ServiceProcess.ServiceType ServiceType {get;}
Site                      Property      System.ComponentModel.ISite Site {get;set;}
Status                    Property      System.ServiceProcess.ServiceControllerStatus Status {get;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示 Get-Service cmdlet 生成的进程对象 (System.ServiceProcess.ServiceController) 的属性和方法。

此命令使用管道运算符 (|) 将 Get-Service 命令的输出发送到 Get-Member。

因为此命令的 Get-Member 部分没有任何参数，所以它将使用所有默认值。同样，它将获取所有成员类型，但不获取静态成员且不显示固有成员。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service | get-member -force

C:\PS&gt; (get-service -schedule).psbase                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例获取 Get-Service cmdlet 检索的服务对象 (System.ServiceProcess.ServiceController) 的所有成员（属性和方法），包括固有成员（如 PSBase 和 PSObject）以及 get_ 和 set_ 方法。

第一条命令使用 Get-Service cmdlet 来获取表示系统中的服务的对象。它使用管道运算符 (|) 将服务对象传递到 Get-Member cmdlet。

Get-Member 命令使用 Force 参数将对象的固有成员和编译器生成的成员添加到显示内容中。Get-Member 会获取这些成员，但默认情况下会隐藏它们。

可以像使用对象的改编方法一样使用这些属性和方法。第二条命令演示如何显示 Schedule 服务的 PSBase 属性值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-service	| get-member -view extended

   TypeName: System.ServiceProcess.ServiceController

Name MemberType    Definition
---- ----------    ----------
Name AliasProperty Name = ServiceName                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取通过使用 Types.ps1xml 文件或 Add-Member cmdlet 扩展的服务对象的方法和属性。


Get-Member 命令使用 View 参数来仅获取服务对象的扩展成员。在本例中，扩展成员是 Name 属性，它是 ServiceName 属性的别名属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -log system | gm -membertype scriptproperty

   TypeName: System.Diagnostics.EventLogEntry

Name    MemberType     Definition
----    ----------     ----------
EventID ScriptProperty System.Object EventID {get=$this.get_EventID() -band 0xFFFF;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取事件查看器内系统日志中的事件日志对象的脚本属性。在本例中，唯一的脚本属性是 EventID。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -log system | get-member -membertype scriptproperty


   TypeName: System.Diagnostics.EventLogEntry

Name    MemberType     Definition
----    ----------     ----------
EventID ScriptProperty System.Object EventID {get=$this.get_EventID() -band 0xFFFF;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取事件查看器内系统日志中的事件日志对象的脚本属性。

此命令使用 MemberType 参数来仅获取其 MemberType 属性值为 AliasProperty 的对象。

此命令返回 EventLog 对象的 EventID 属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = &quot;get-process&quot;, &quot;get-service&quot;, &quot;get-culture&quot;, &quot;get-psdrive&quot;, &quot;get-executionpolicy&quot;

C:\PS&gt; foreach ($cmdlet in $a) {invoke-expression $cmdlet | get-member -name machinename}

TypeName: System.Diagnostics.Process

Name        MemberType Definition
----        ---------- ----------
MachineName Property   System.String MachineName {get;}


   TypeName: System.ServiceProcess.ServiceController

Name        MemberType Definition
----        ---------- ----------
MachineName Property   System.String MachineName {get;set;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 cmdlet 列表中具有 MachineName 属性的对象。

第一个命令在 $a 变量中存储多个 cmdlet 的名称。

第二个命令使用 ForEach 语句调用每个命令，将结果发送到 Get-Member，并将 Get-Member 的结果限制为具有名称“MachineName”的成员。

结果显示仅进程对象 (System.Diagnostics.Process) 和服务对象 (System.ServiceProcess.ServiceController) 具有 MachineName 属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-member -inputobject @(1)

C:\PS&gt;$a.count

1

C:\PS&gt; $a = get-member -inputobject 1,2,3

   TypeName: System.Object[]
Name               MemberType    Definition
----               ----------    ----------
Count              AliasProperty Count = Length
Address            Method        System.Object&amp; Address(Int32 )
Clone              Method        System.Object Clone()
...

C:\PS&gt;$a.count
1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了当只具有一个给定类型的对象时如何查找对象数组的属性和方法。

因为此命令的目的是查找数组的属性，所以第一条命令使用 InputObject 参数。该参数使用“at”符号 (@) 来指示数组。在本例中，该数组仅包含一个对象，即整数 1。

第三条命令使用 Get-Member cmdlet 来获取整数数组的属性和方法，然后此命令将它们保存在 $a 变量中。

第四条命令使用数组的 Count 属性来查找 $a 变量中对象的数目。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113322</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-Member</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Help</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-PSBreakpoint
		</command:name>
		<maml:description>
			<maml:para>获取当前会话中设置的断点。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>PSBreakpoint</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-PSBreakPoint cmdlet 获取当前会话中设置的断点。可以使用 cmdlet 参数来获取特定断点。

断点是命令或脚本中的一个点，可以在该处暂时停止执行，以便您可以检查指令。Get-PSBreakpoint 是设计用于调试 Windows PowerShell 脚本和命令的多个 cmdlet 之一。有关 Windows PowerShell 调试程序的详细信息，请参阅 about_Debuggers。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-PSBreakpoint</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>仅获取指定脚本中的断点。输入一个或多个脚本文件的路径（可选）和名称。默认位置为当前目录。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Command</maml:name>
				<maml:description>
					<maml:para>获取指定命令名称上设置的命令断点。输入命令名称，如 cmdlet 或函数的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>仅获取指定脚本中的断点。输入一个或多个脚本文件的路径（可选）和名称。默认位置为当前目录。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Id</maml:name>
				<maml:description>
					<maml:para>获取具有指定断点 ID 的断点。以逗号分隔的列表的形式输入 ID。还可以通过管道将断点 ID 传递给 Get-PSBreakpoint。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Type</maml:name>
				<maml:description>
					<maml:para>仅获取指定类型的断点。输入一个或多个类型。有效值为 Line、Command 和 Variable。还可以通过管道将断点类型传递到 Get-PSBreakpoint。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">BreakpointType[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>仅获取指定脚本中的断点。输入一个或多个脚本文件的路径（可选）和名称。默认位置为当前目录。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">

				<maml:name>Variable</maml:name>
				<maml:description>
					<maml:para>获取指定变量名称上设置的变量断点。输入变量名称，不带美元符号。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>仅获取指定脚本中的断点。输入一个或多个脚本文件的路径（可选）和名称。默认位置为当前目录。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Command</maml:name>
			<maml:description>
				<maml:para>获取指定命令名称上设置的命令断点。输入命令名称，如 cmdlet 或函数的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有断点</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Id</maml:name>
			<maml:description>
				<maml:para>获取具有指定断点 ID 的断点。以逗号分隔的列表的形式输入 ID。还可以通过管道将断点 ID 传递给 Get-PSBreakpoint。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有断点</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Script</maml:name>
			<maml:description>
				<maml:para>仅获取指定脚本中的断点。输入一个或多个脚本文件的路径（可选）和名称。默认位置为当前目录。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有断点</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Type</maml:name>
			<maml:description>
				<maml:para>仅获取指定类型的断点。输入一个或多个类型。有效值为 Line、Command 和 Variable。还可以通过管道将断点类型传递到 Get-PSBreakpoint。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">BreakpointType[]</command:parameterValue>
			<dev:type>
				<maml:name>BreakpointType[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有断点</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Variable</maml:name>
			<maml:description>
				<maml:para>获取指定变量名称上设置的变量断点。输入变量名称，不带美元符号。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有断点</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Int32, Microsoft.PowerShell.Commands.BreakpointType</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将断点 ID 和断点类型传递到 Get-PSBreakpoint。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>断点对象（System.Management.Automation.LineBreakpoint、System.Management.Automation.VariableBreakpoint、System.Management.Automation.CommandBreakpoint）</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-PSBreakPoint 返回表示会话中的断点的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          可以使用 Get-PSBreakpoint 或其别名“gbp”。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取在当前会话中的所有脚本和函数上设置的所有断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -Id 2

Function   : Increment
Action     :
Enabled    : True
HitCount   : 0
Id         : 2
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取断点 ID 为 2 的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$b = set-psbreakpoint -script sample.ps1 -function increment

C:\PS&gt; $b.Id | get-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令演示了如何通过管道将断点 ID 传递到 Get-PSBreakpoint 来获取断点。

第一个命令使用 Set-PSBreakpoint cmdlet 在 Sample.ps1 脚本中的 Increment 函数上创建一个断点。然后将断点对象保存在 $b 变量中。

第二个命令使用点运算符 (.)来获取 $b 变量中断点对象的 ID 属性。它使用管道运算符 (|) 将 ID 发送到 Get-PSBreakpoint cmdlet。

因此，Get-PSBreakpoint 可获取具有指定 ID 的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -script Sample.ps1, SupportScript.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 Sample.ps1 和 SupportScript.ps1 文件中的所有断点。

此命令不获取会话中的其他脚本或函数上可能设置的其他断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -command Read-Host, Write-Host -script Sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 Sample.ps1 文件中的 Read-Host 或 Write-Host 命令上设置的所有 Command 断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -type Command -script Sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 Sample.ps1 文件中的所有命令断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -variable Index, Swap                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取当前会话中的 $index 和 $swap 变量上设置的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-psbreakpoint -type line, variable -script Sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取 Sample.ps1 脚本中的所有行断点和变量断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113325</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSCallStack</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-PSCallStack
		</command:name>
		<maml:description>
			<maml:para>显示当前调用堆栈。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>PSCallStack</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-PSCallStack cmdlet 显示当前调用堆栈。

虽然它设计用来与 Windows PowerShell 调试程序配合使用，但是您可以使用此 cmdlet 来显示该调试程序之外的脚本或函数中的调用堆栈。

若要在该调试程序中运行 Get-PSCallStack 命令，请键入“k”或“get-pscallstack”。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-PSCallStack</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.CallStackFrame</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-PSCallStack 返回一个表示调用堆栈中的项的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function my-alias { 
   $p = $args[0]
   get-alias | where {$_.definition -like &quot;*$p&quot;} | ft definition, name -auto
}

PS C:\ps-test&gt; set-psbreakpoint -command my-alias
    
Command    : my-alias
Action     :
Enabled    : True
HitCount   : 0
Id         : 0
Script     : prompt
    
    
PS C:\ps-test&gt; my-alias get-content
Entering debug mode. Use h or ? for help.

Hit Command breakpoint on 'prompt:my-alias'

my-alias get-content

[DBG]: PS C:\ps-test&gt; s
$p = $args[0]

DEBUG: Stepped to ':    $p = $args[0]    '

[DBG]: PS C:\ps-test&gt; s
get-alias | Where {$_.Definition -like &quot;*$p*&quot;} | ft Definition,

[DBG]: PS C:\ps-test&gt;get-pscallstack

Name        CommandLineParameters         UnboundArguments              Location
----        ---------------------         ----------------              --------
prompt      {}                            {}                            prompt
my-alias    {}                            {get-content}                 prompt
prompt      {}                            {}                            prompt


[DBG]: PS C:\ps-test&gt; o
    
Definition  Name
----------  ----
Get-Content gc
Get-Content cat
Get-Content type
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Get-PSCallStack cmdlet 显示 My-Alias（获取 cmdlet 名称的别名的简单函数）的调用堆栈。

第一个命令在 Windows PowerShell 提示符处输入该函数。第二个命令使用 Set-PSBreakpoint cmdlet 在 My-Alias 函数上设置断点。第三个命令使用 My-Alias 函数获取当前会话中 Get-Content cmdlet 的所有别名。

调试程序在该函数调用时开始工作。两个连续 step-into 命令开始一行接一行执行该函数。然后，使用 Get-PSCallStack 命令检索调用堆栈。

最后一个命令是 Step-Out 命令 (o)，它退出调试程序并继续执行脚本直到完成。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113326</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Random
		</command:name>
		<maml:description>
			<maml:para>从集合中获取随机数或随机选择对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Random</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Random cmdlet 获取随机选择的数。如果将对象集合提交到 Get-Random，它会从该集合中获取随机选择的一个或多个对象。

没有参数或输入的情况下，Get-Random 命令返回一个在 0（零）和 Int32.MaxValue（0x7FFFFFFF 或 2,147,483,647）之间随机选择的 32 位无符号整数。

可以使用 Get-Random 的参数指定种子数字、最小和最大值，以及从提交的集合返回的对象数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Random</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定对象的集合。Get-Random 从该集合中按随机顺序获取随机选择的对象。输入对象、包含对象的变量或用于获取对象的命令或表达式。还可通过管道将对象集合传递到 Get-Random。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Count</maml:name>
				<maml:description>
					<maml:para>确定将返回的对象数。默认值为 1。如果 Count 的值超过集合中的对象数，Get-Random 按随机顺序返回所有对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SetSeed</maml:name>
				<maml:description>
					<maml:para>为随机数生成程序指定种子值。该种子值用于当前会话中的当前命令和所有后续 Get-Random 命令，直到您再次使用 SetSeed 或关闭该会话。您不能将种子重置为其默认的、基于时钟的值。

SetSeed 参数不是必需的。默认情况下，Get-Random 使用系统时钟生成种子值。因为 SetSeed 会导致非随机行为，所以通常仅当尝试重现行为时（例如调试或分析包括 Get-Random 命令的脚本时）才使用该参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Random</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Maximum</maml:name>
				<maml:description>
					<maml:para>指定随机数的最大值。Get-Random 返回小于（不等于）最大值的值。输入一个 32 位整数或双精度浮点数，或一个可以转换为整数或双精度的对象，如数字字符串（“100”）。最大值必须大于（不等于）最小值。

如果最大值或最小值是浮点数，Get-Random 返回随机选择的浮点数。

如果最小值是双精度（浮点数），最大值的默认值为 Double.MaxValue。否则，默认值为 Int32.MaxValue（2,147,483,647 或 0x7FFFFFFF）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Minimum</maml:name>
				<maml:description>
					<maml:para>指定随机数的最小值。输入一个 32 位整数或双精度浮点数，或一个可以转换为整数或双精度的对象，如数字字符串（“100”）。默认值为 0（零）。

最小值必须小于（不等于）最大值。如果最大值或最小值是浮点数，Get-Random 返回随机选择的浮点数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SetSeed</maml:name>
				<maml:description>
					<maml:para>为随机数生成程序指定种子值。该种子值用于当前会话中的当前命令和所有后续 Get-Random 命令，直到您再次使用 SetSeed 或关闭该会话。您不能将种子重置为其默认的、基于时钟的值。

SetSeed 参数不是必需的。默认情况下，Get-Random 使用系统时钟生成种子值。因为 SetSeed 会导致非随机行为，所以通常仅当尝试重现行为时（例如调试或分析包括 Get-Random 命令的脚本时）才使用该参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Count</maml:name>
			<maml:description>
				<maml:para>确定将返回的对象数。默认值为 1。如果 Count 的值超过集合中的对象数，Get-Random 按随机顺序返回所有对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定对象的集合。Get-Random 从该集合中按随机顺序获取随机选择的对象。输入对象、包含对象的变量或用于获取对象的命令或表达式。还可通过管道将对象集合传递到 Get-Random。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Maximum</maml:name>
			<maml:description>
				<maml:para>指定随机数的最大值。Get-Random 返回小于（不等于）最大值的值。输入一个 32 位整数或双精度浮点数，或一个可以转换为整数或双精度的对象，如数字字符串（“100”）。最大值必须大于（不等于）最小值。

如果最大值或最小值是浮点数，Get-Random 返回随机选择的浮点数。

如果最小值是双精度（浮点数），最大值的默认值为 Double.MaxValue。否则，默认值为 Int32.MaxValue（2,147,483,647 或 0x7FFFFFFF）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Int32.MaxValue</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Minimum</maml:name>
			<maml:description>
				<maml:para>指定随机数的最小值。输入一个 32 位整数或双精度浮点数，或一个可以转换为整数或双精度的对象，如数字字符串（“100”）。默认值为 0（零）。

最小值必须小于（不等于）最大值。如果最大值或最小值是浮点数，Get-Random 返回随机选择的浮点数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SetSeed</maml:name>
			<maml:description>
				<maml:para>为随机数生成程序指定种子值。该种子值用于当前会话中的当前命令和所有后续 Get-Random 命令，直到您再次使用 SetSeed 或关闭该会话。您不能将种子重置为其默认的、基于时钟的值。

SetSeed 参数不是必需的。默认情况下，Get-Random 使用系统时钟生成种子值。因为 SetSeed 会导致非随机行为，所以通常仅当尝试重现行为时（例如调试或分析包括 Get-Random 命令的脚本时）才使用该参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>系统时钟</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将一个或多个对象传递到 Get-Random。Get-Random 从通过管道传递的对象中随机选择值。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Random 返回整数或浮点数，或从提交的集合随机选择的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          每个会话启动时，Get-Random 基于系统时钟为该会话设置默认种子。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random

3951433                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取处于 0（零）和 Int32.MaxValue 之间的一个随机整数。
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -maximum 100

47                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取处于 0（零）和 99 之间的一个随机整数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -minimum -100 -maximum 100

-56                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取处于 -100 和 99 之间的一个随机整数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -min 10.7 -max 20.93

18.08467273887                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取一个大于或等于 10.7 且小于 20.92 的随机浮点数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -input 1, 2, 3, 5, 8, 13

8                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从指定的数组中获取一个随机选择的数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -input 1, 2, 3, 5, 8, 13 -count 3

3
1
13                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从数组中按随机顺序获取三个随机选择的数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -input 1, 2, 3, 5, 8, 13 -count ([int]::MaxValue)

2
3
5
1
8
13                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按随机顺序返回整个集合。Count 参数的值是整数的 MaxValue 静态属性。

若要按随机顺序返回整个集合，请输入大于或等于该集合中的对象数的任何数字。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -input &quot;red&quot;, &quot;yellow&quot;, &quot;blue&quot;

yellow                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令返回非数字集合中的随机值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | get-random

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
    144       4     2080        488    36     0.48   3164 wmiprvse                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从计算机上的进程集合中获取随机选择的进程。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 10 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-content servers.txt | get-random -count (get-content servers.txt).count | foreach {invoke-expression -computer $_ -command 'get-process powershell'}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按随机顺序在一系列远程计算机上运行命令。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 11 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random -max 100 -setseed 23


# Commands with the default seed are pseudorandom
PS C:\ps-test&gt; get-random -max 100
59
PS C:\ps-test&gt; get-random -max 100
65
PS C:\ps-test&gt; get-random -max 100
21

# Commands with the same seed are not random
PS C:\ps-test&gt; get-random -max 100 -setseed 23
74
PS C:\ps-test&gt; get-random -max 100 -setseed 23
74
PS C:\ps-test&gt; get-random -max 100 -setseed 23
74

# SetSeed results in a repeatable series
PS C:\ps-test&gt; get-random -max 100 -setseed 23
74
PS C:\ps-test&gt; get-random -max 100
56
PS C:\ps-test&gt; get-random -max 100
84
PS C:\ps-test&gt; get-random -max 100
46
PS C:\ps-test&gt; get-random -max 100 -setseed 23
74
PS C:\ps-test&gt; get-random -max 100
56
PS C:\ps-test&gt; get-random -max 100
84
PS C:\ps-test&gt; get-random -max 100
46                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了使用 SetSeed 参数的效果。因为 SetSeed 会产生非随机行为，所以它通常仅用于重现结果，例如调试或分析脚本时。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 12 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$files = dir -path c:\* -recurse

C:\PS&gt; $sample = $files | get-random -count 50                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令从本地计算机的 C: 驱动器中获取随机选择的包含 50 个文件的样本。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 13 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-random 10001

7600                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取小于 10001 的随机整数。因为 Maximum 参数具有位置 1，所以当该值是命令中的第一个或唯一的未命名参数时，您可以忽略该参数名称。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113446</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-TraceSource
		</command:name>
		<maml:description>
			<maml:para>获取用于跟踪的 Windows PowerShell 组件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>TraceSource</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-TraceSource cmdlet 获取当前正在使用的 Windows PowerShell 组件的跟踪源。使用该数据可以确定可以跟踪哪些 Windows PowerShell 组件。执行跟踪时，该组件将生成其内部处理过程中的每个步骤的详细消息。开发人员使用跟踪数据来监视数据流、程序执行和错误。跟踪 cmdlet 是为 Windows PowerShell 开发人员设计的，但所有用户都可使用它们。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-TraceSource</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>只获取指定的跟踪源。允许使用通配符。参数名（“Name”）为可选项。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>只获取指定的跟踪源。允许使用通配符。参数名（“Name”）为可选项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以将包含跟踪源名称的字符串通过管道传递给 Get-TraceSource。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSTraceSource</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-TraceSource 返回表示跟踪源的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-traceSource  *provider*                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取其名称包含“provider”的所有跟踪源。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-tracesource                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取可以跟踪的所有 Windows PowerShell 组件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113333</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-TraceSource</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-UICulture
		</command:name>
		<maml:description>
			<maml:para>获取操作系统中当前用户界面 (UI) 区域性设置。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>UICulture</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-UICulture cmdlet 获取 Windows 的当前 UI 区域性设置的相关信息。UI 区域性确定哪些文本字符串用于用户界面元素（如菜单和消息）。

还可以使用 Get-Culture cmdlet，其获取系统中的当前区域性。区域性确定数字、货币和日期等项的显示格式。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-UICulture</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Globalization.CultureInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-UICulture 返回一个表示当前 UI 区域性的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可使用 $PsCulture 和 $PsUICulture 变量。$PsCulture 变量存储当前区域性的名称，$PsUICulture 变量存储当前 UI 区域性的名称。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-uiculture                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取当前 UI 区域性信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-uiculture | format-list *                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在列表中显示当前 UI 区域性的所有属性的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-uiculture).calendar                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示当前 UI 区域性的 Calendar 属性的当前值。Calendar 只是 UI 区域性的一个属性。若要查看所有属性，请键入“get-uiculture | get-member”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
(get-uiculture).datetimeformat.shortdatepattern                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示当前 UI 区域性的短日期模式。若要查看 UI 区域性的 DateTimeFormat 属性的所有子属性，请键入“(get-uiculture).datetimeformat | gm”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113334</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Unique
		</command:name>
		<maml:description>
			<maml:para>从排序列表返回唯一项目。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Unique</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Unique cmdlet 将排序列表中的每个项目与下一个项目进行比较，消除重复，并且只返回每个项目的一个实例。该列表必须经过排序，然后 cmdlet 才能正确工作。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Unique</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AsString</maml:name>
				<maml:description>
					<maml:para>将数据视为字符串。如果没有此参数，则数据被视为对象，因此，将相同类型的对象集合（例如，文件集合）提交到 Get-Unique 时，它只返回一个（第一个）对象。可以使用此参数查找对象属性的唯一值，例如，文件名。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>接受 Get-Unique 的输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

Get-Unique 将通过使用 InputObject 所提交的输入视为集合；它不枚举集合中的各个项目。因为集合是单个项目，因此通过使用 InputObject 所提交的输入将始终在不作更改的情况下返回。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Unique</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>OnType</maml:name>
				<maml:description>
					<maml:para>对于每个类型只返回一个对象。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>接受 Get-Unique 的输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

Get-Unique 将通过使用 InputObject 所提交的输入视为集合；它不枚举集合中的各个项目。因为集合是单个项目，因此通过使用 InputObject 所提交的输入将始终在不作更改的情况下返回。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AsString</maml:name>
			<maml:description>
				<maml:para>将数据视为字符串。如果没有此参数，则数据被视为对象，因此，将相同类型的对象集合（例如，文件集合）提交到 Get-Unique 时，它只返回一个（第一个）对象。可以使用此参数查找对象属性的唯一值，例如，文件名。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>接受 Get-Unique 的输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。

Get-Unique 将通过使用 InputObject 所提交的输入视为集合；它不枚举集合中的各个项目。因为集合是单个项目，因此通过使用 InputObject 所提交的输入将始终在不作更改的情况下返回。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>OnType</maml:name>
			<maml:description>
				<maml:para>对于每个类型只返回一个对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可将任何类型的对象通过管道传递给 Get-Unique。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Unique 返回的对象的类型由输入确定。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Get-Unique 的内置别名“gu”来对其进行引用。有关详细信息，请参阅 about_Aliases。

若要对列表排序，请使用 Sort-Object。还可以使用 Sort-Object 的 Unique 参数来查找列表中的唯一项。


                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = $(foreach ($line in get-content C:\Test1\File1.txt) {$line.tolower().split(&quot; &quot;)}) | sort | get-unique

C:\PS&gt; $a.count                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将查找文本文件中的唯一单词数。

第一个命令获取 File.txt 文件的内容。它将文本的每一行转换为小写字母，然后以空格 (&quot; &quot;) 为界将每个单词拆分到单独一行上。然后，它对得到的列表按字母顺序（默认）排序，并使用 Get-Unique cmdlet 消除任何重复的单词。结果存储在 $a 变量中。

第二个命令使用 $a 中的字符串集合的 Count 属性来确定在 $a 中有多少项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
1,1,1,1,12,23,4,5,4643,5,3,3,3,3,3,3,3 | sort-object | Get-Unique                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令查找该组整数的唯一成员。第一个命令接受在命令行键入的整数数组，通过管道将它们传递给 Sort-Object cmdlet 进行排序，然后通过管道将它们传递给 Get-Unique 以消除重复项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | sort-object {$_.GetType()} |  unique -OnType                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Get-ChildItem cmdlet 来检索包含文件和目录的本地目录的内容。管道运算符 (|) 将结果发送到 Sort-Object cmdlet。“$_.GetType()”语句将 GetType 方法应用于每个文件或目录。然后，Sort-Object 按类型对项目排序。另一个管道运算符将结果发送给 Get-Unique。OnType 参数指示 Get-Unique 对每个类型只返回一个对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | sort-object | select processname | get-unique -asstring                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取计算机上正在运行的进程的名称，名称已消除重复。

Get-Process 命令获取计算机上的所有进程。管道运算符 (|) 将结果传递给 Sort-Object，后者在默认情况下按 ProcessName 以字母顺序对进程排序。结果将通过管道传递给 Select-Object cmdlet，后者只选择每个对象的 ProcessName 属性的值。然后，将结果通过管道传递给 Get-Unique 以消除重复。

AsString 参数指示 Get-Unique 将 ProcessName 值视为字符串。如果没有此参数，Get-Unique 会将 ProcessName 值视为对象，只返回该对象的一个实例，即列表中的第一个进程名称。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113335</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Variable
		</command:name>
		<maml:description>
			<maml:para>获取当前控制台中的变量。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Get</command:verb>
		<command:noun>Variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Get-Variable cmdlet 获取当前控制台中的 Windows PowerShell 变量。通过指定 ValueOnly 参数可以只检索变量的值，还可以按名称筛选返回的变量。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Variable</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定变量的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>指定 cmdlet 只对这些项执行操作，排除其他所有项。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>仅获取指定作用域中的变量。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ValueOnly</maml:name>
				<maml:description>
					<maml:para>只获取变量的值。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>忽略指定项。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>指定 cmdlet 只对这些项执行操作，排除其他所有项。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定变量的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>仅获取指定作用域中的变量。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ValueOnly</maml:name>
			<maml:description>
				<maml:para>只获取变量的值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含变量名称的字符串传递给 Get-Variable。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>变量对象</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Get-Variable 为它所获取的每个变量返回一个 System.Management.Automation 变量对象。对象类型取决于变量。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          此 cmdlet 不管理环境变量。若要管理环境变量，可以使用环境变量提供程序。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-variable m*                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示名称以字母“m”开头的变量。还将显示变量的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-variable m* -valueonly                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令只显示名称以字母“m”开头的变量的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-variable -include M*,P* | sort-object name                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取以字母“M”或字母“P”开头的变量的相关信息。结果将通过管道传递给 Sort-Object cmdlet，先按名称排序，然后显示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-variable -scope 0

C:\PS&gt; compare-object (get-variable -scope 0) (get-variable -scope 1)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>第一个命令仅获取当前作用域中定义的变量。它等效于“get-variable -scope local”，可以缩写为“gv -s 0”。

第二个命令使用 Compare-Object cmdlet 来查找在父作用域 (Scope 1) 中定义的、但仅在当前作用域 (Scope 0) 中可见的变量。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113336</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Group-Object
		</command:name>
		<maml:description>
			<maml:para>指定的属性包含相同值的组对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Group</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Group-Object cmdlet 基于指定属性的值以组的形式显示对象。Group-Object 返回一个表，其中每个属性值对应一行，同时一个列显示具有该值的项目数。

如果指定多个属性，Group-Object 首先根据第一个属性的值对它们进行分组，然后在每个属性组内，根据下一个属性的值进行分组。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Group-Object</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AsHashTable</maml:name>
				<maml:description>
					<maml:para>以哈希表形式返回组。哈希表的键是对象分组所根据的属性值。哈希表的值是具有该属性值的对象。

AsHashTable 参数通过自身返回每个哈希表，其中每个键是分组对象的实例。当与 AsString 参数一起使用时，哈希表中的键是字符串。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AsString</maml:name>
				<maml:description>
					<maml:para>将哈希表键转换为字符串。默认情况下，哈希表键是分组对象的实例。此参数只有在与 AsHashTable 参数一起使用时才有效。

</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定用于分组的属性。对象将基于指定属性的值排列到组中。

Property 参数的值可以是新的计算属性。若要创建计算属性，请创建具有 Expression 键的哈希表，该键指定字符串或脚本块值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CaseSensitive</maml:name>
				<maml:description>
					<maml:para>使分组区分大小写。如果没有此参数，组中对象的属性值可能具有不同的大小写。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Culture</maml:name>
				<maml:description>
					<maml:para>指定比较字符串时要使用的区域性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要分组的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。

使用 InputObject 参数将对象集合提交到 Group-Object 时，Group-Object 会收到表示该集合的一个对象。结果，它会创建包含该对象为其成员的单个组。

若要将集合中的对象分组，请通过管道将对象传递到 Group-Object。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoElement</maml:name>
				<maml:description>
					<maml:para>从结果中忽略某个组的成员。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AsHashTable</maml:name>
			<maml:description>
				<maml:para>以哈希表形式返回组。哈希表的键是对象分组所根据的属性值。哈希表的值是具有该属性值的对象。

AsHashTable 参数通过自身返回每个哈希表，其中每个键是分组对象的实例。当与 AsString 参数一起使用时，哈希表中的键是字符串。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>GroupInfo 对象</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AsString</maml:name>
			<maml:description>
				<maml:para>将哈希表键转换为字符串。默认情况下，哈希表键是分组对象的实例。此参数只有在与 AsHashTable 参数一起使用时才有效。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>GroupInfo 对象</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CaseSensitive</maml:name>
			<maml:description>
				<maml:para>使分组区分大小写。如果没有此参数，组中对象的属性值可能具有不同的大小写。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Culture</maml:name>
			<maml:description>
				<maml:para>指定比较字符串时要使用的区域性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要分组的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。

使用 InputObject 参数将对象集合提交到 Group-Object 时，Group-Object 会收到表示该集合的一个对象。结果，它会创建包含该对象为其成员的单个组。

若要将集合中的对象分组，请通过管道将对象传递到 Group-Object。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoElement</maml:name>
			<maml:description>
				<maml:para>从结果中忽略某个组的成员。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定用于分组的属性。对象将基于指定属性的值排列到组中。

Property 参数的值可以是新的计算属性。若要创建计算属性，请创建具有 Expression 键的哈希表，该键指定字符串或脚本块值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Group-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.GroupInfo 或 System.Collections.Hashtable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					使用 AsHashTable 参数时，Group-Object 会返回哈希表。否则，它返回 GroupInfo 对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用格式化 cmdlet（如 Format-Table [m2] 和 Format-List [m2]）的 GroupBy 参数将对象分组。与 Group-Object（用于创建单个表，其中每个属性值对应一行）不同，GroupBy 参数为每个属性值创建一个表，其中具有该属性值的每个项目对应一行。

Group-Object 不要求被分组的对象属于相同的 Microsoft .NET Framework 类型。对不同 .NET Framework 类型的对象分组时，Group-Object 使用以下规则：

-- 相同属性名称和类型：如果对象的属性具有指定名称，且属性值具有相同的 .NET Framework 类型，则使用相同类型的对象适用的规则对属性值进行分组。

-- 相同属性名称，不同类型：如果对象的属性具有指定名称，但在不同的对象中属性值具有不同的 .NET Framework 类型，则 Group-Object 使用该属性第一次出现时的 .NET Framework 类型作为该属性组的 .NET Framework 类型。对象具有不同类型的属性时，属性值将转换为该组的类型。如果类型转换失败，则该对象将不包括在该组中。

-- 缺少属性：不具有指定属性的对象将被视为不可分组。不可分组的对象出现在名为 AutomationNull.Value 的组中最后 GroupInfo 对象的输出中。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem *.doc | group-object -property length                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取当前位置中具有 .doc 扩展名的文件，并按大小分组。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | sort-object -property extension | group-object -property extension                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取当前位置中的文件，按文件扩展名排序，然后按文件扩展名分组。请注意，文件是在分组之前进行排序的。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
1..35 | group-object -property {$_ % 2},{$_ % 3}                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何将脚本块用作 Property 参数的值。

此命令显示从 1 到 35 的整数，并按除以 2 或 3 后的余数分组。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$events = get-eventlog -logname system -newest 1000 

C:\PS&gt; $events | group-object -property eventID 

Count Name                      Group
----- ----                      -----
   44 Information               {System.Diagnostics.EventLogEntry,
    5 Error                     {System.Diagnostics.EventLogEntry,
    1 Warning                   {System.Diagnostics.EventLogEntry}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令显示系统事件日志中的 1,000 个最新条目，它们按事件 ID 分组。

第一个命令使用 Get-EventLog cmdlet 检索事件和赋值运算符 (=) 以将其保存在 $events 变量中。

第二个命令使用管道运算符 (|) 将 $events 变量中的事件发送到 Group-Object cmdlet。该命令使用 Property 参数指定事件应根据其 EventID 属性的值进行分组。

在输出中，Count 列表示每组中的条目数，Name 列表示用于定义一个组的 EventID 值，而 Group 列表示每组中的对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | group-object -property priorityclass

Count Name                Group
----- ----                -----
   55 Normal              {System.Diagnostics.Process (AdtAgent), System.Diagnostics.Process (alg), System.Dia...
    1                     {System.Diagnostics.Process (Idle)}
    3 High                {System.Diagnostics.Process (Newproc), System.Diagnostics.Process (winlogon), System.D... 
    2 BelowNormal         {System.Diagnostics.Process (winperf),  


C:\PS&gt;get-process | group-object -property company -noelement
Count Name
----- ----
   55 Normal
    1
    3 High
    2 BelowNormal                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了 NoElement 参数的效果。这些命令将计算机上的进程按优先级类分组。

第一个命令使用 Get-Process cmdlet 来获取计算机上的进程。它使用管道运算符 (|) 将结果发送到 Group-Object，其根据进程的 PriorityClass 属性的值将对象分组。

第二个命令与第一个相同，但是它使用 NoElement 参数将组的成员从输出中清除。结果是一个仅包含计数和属性值名称的表。

结果显示在下面的示例输出中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventlog -logname system -newest 1000 | group-object -property {$_.TimeWritten - $_.TimeGenerated}                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示了如何以脚本块形式提供 Property 参数的值。

此命令显示系统事件日志中最新的 1,000 个条目，它们按从生成到写入日志之间的时间进行分组。

该命令使用 Get-EventLog cmdlet 获取事件日志条目。它使用管道运算符 (|) 将条目发送到 Group-Object cmdlet。Property 参数的值被指定为一个脚本块（大括号内的表达式）。计算该脚本块的结果是日志条目从生成到写入日志之间的时间。该值用于对 1000 个最新的事件进行分组。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
 get-childitem | group-object extension -noelement 

Count Name
----- ----
   21
   82 .txt
    9 .cmd
    5 .log
   12 .xml
    5 .htm
   36 .ps1
    1 .psc1
    3 .exe
    6 .csv
    1 .psd1
    2 .bat                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按文件扩展名对当前目录中的项目分组。它使用 NoElement 参数忽略组的成员。

结果显示在下面的示例输出中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot; | get-unique

a
b
c
d

C:\PS&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;c&quot;, &quot;d&quot; | group-object -noelement | where {$_.Count -gt 1}
Count Name
----- ----
    2 c

C:\PS&gt; get-process | group-object -property Name -noelement | where {$_.count -gt 1}
Count Name
----- ----
    2 csrss
    5 svchost
    2 winlogon
    2 wmiprvse                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何查找集合中的唯一和非唯一（重复）属性值。

第一个命令通过管道将某个数组传递到 Get-Unique cmdlet 来获取该数组的唯一元素。

第二个命令获取某个数组的非唯一元素。它通过管道将该数组传递到 Group-Object cmdlet，其根据值将对象分组。所得到的组将通过管道传递到 Where-Object cmdlet，其选择具有包含多个成员的组的对象。

第三个命令演示了此技术的实际用途。它使用相同的方法查找计算机上具有相同进程名称的进程。

结果显示在下面的示例输出中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-command get-*, set-* -type cmdlet | group-object -property verb -ashashtable -asstring

C:\PS&gt; $a 

Name    Value
----    -----
Get     {Get-PSCallStack, Get-PSBreakpoint, Get-PSDrive, Get-PSSession...}
Set     {Set-Service, Set-StrictMode, Set-PSDebug, Set-PSSessionConfiguration...}

C:\PS&gt; $a.get

CommandType     Name                 Definition
-----------     ----                 ----------
Cmdlet          Get-PSCallStack      Get-PSCallStack [-Verbose] [-Debug] [-ErrorAction &lt;ActionPrefer...
Cmdlet          Get-PSBreakpoint     Get-PSBreakpoint [[-Id] &lt;Int32[]&gt;] [-Verbose] [-Debug] [-ErrorA...
Cmdlet          Get-PSDrive          Get-PSDrive [[-Name] &lt;String[]&gt;] [-Scope &lt;String&gt;] [-PSProvider...
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例使用 AsHashTable 和 AsString 参数在哈希表中返回组，即以键-值对集合的形式。

在所得的哈希表中，每个属性值是一个键，而组元素是值。因为每个键是哈希表对象的一个属性，所以可以使用点标记来显示这些值。

第一个命令获取会话中的 Get 和 Set cmdlet，将它们按谓词分组，以哈希表形式返回这些组，然后将该哈希表保存在 $a 变量中。

第二个命令显示 $a 变量中的哈希表。有两个键-值对，一个对应 Get cmdlet，一个对应 Set cmdlet。

第三个命令使用点标记显示 $a 中的 Get 键的值。这些值是 CmdletInfo 对象。AsString 参数不会将组中的对象转换为字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113338</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-Alias
		</command:name>
		<maml:description>
			<maml:para>从文件导入别名列表。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Import</command:verb>
		<command:noun>Alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Import-Alias cmdlet 可以从文件导入别名列表。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定包含导出的别名信息的文件的路径。允许使用通配符，但它们必须解析为单个名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 导入已定义的只读别名。可以使用以下命令显示有关 currently-defined 别名的信息：

get-alias | select-object name,Options
如果相应的别名是只读的，则 Options 属性的值将包括“ReadOnly”。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回一个表示别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定别名要导入的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 导入已定义的只读别名。可以使用以下命令显示有关 currently-defined 别名的信息：

get-alias | select-object name,Options
如果相应的别名是只读的，则 Options 属性的值将包括“ReadOnly”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回一个表示别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定包含导出的别名信息的文件的路径。允许使用通配符，但它们必须解析为单个名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定别名要导入的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含路径的字符串传递给 Import-Alias。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 Passthru 参数，则 Import-Alias 返回一个表示别名的 System.Management.Automation.AliasInfo 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-alias test.txt                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从名为 test.txt 的文件中导入别名信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113339</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-Clixml
		</command:name>
		<maml:description>
			<maml:para>导入 CLIXML 文件，并在 Windows PowerShell 中创建相应的对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Import</command:verb>
		<command:noun>Clixml</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Import-Clixml cmdlet 导入包含表示 Microsoft .NET Framework 对象的数据的 CLIXML 文件，并在 Windows PowerShell 中创建这些对象。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-Clixml</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定要转换成 Windows PowerShell 对象的 XML 文件的位置。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定要转换成 Windows PowerShell 对象的 XML 文件的位置。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含路径的字符串传递给 Import-Clixml。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Import-Clixml 返回已从存储的 XML 文件进行反序列化的对象。

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          在为一个参数指定多个值时，请使用逗号分隔这些值。例如，“&lt;参数名&gt; &lt;值 1&gt;, &lt;值 2&gt;”。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-clixml pi.xml

C:\PS&gt; $processes = import-clixml pi.xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Export-Clixml cmdlet 保存 Get-Process 所返回的进程信息的序列化副本。然后，它使用 Import-Clixml 检索该序列化文件的内容，并重新创建存储于 $processes 变量中的对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113340</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-CSV
		</command:name>
		<maml:description>
			<maml:para>将逗号分隔值 (CSV) 文件中的对象属性转换为原始对象的 CSV 版本。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Import</command:verb>
		<command:noun>CSV</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Import-CSV cmdlet 从 Export-CSV cmdlet 生成的 CSV 可变长度文件来创建对象。

可使用 Import-CSV cmdlet 的参数来指定列标题行（该行确定结果对象的属性名称）和项目分隔符，或指示 Import-CSV 使用当前区域性的列表分隔符作为项目分隔符。

Import-CSV 创建的对象是原始对象的 CSV 版本。CSV 对象的属性值是原始对象的属性值的字符串版本。对象的 CSV 版本不含任何方法。

还可使用 ConvertTo-CSV cmdlet 和 ConvertFrom-CSV cmdlet 将对象转换为 CSV 字符串（或将 CSV 字符串转换为对象）。这些 cmdlet 与 Export-CSV 和 Import-CSV cmdlet 一样，只是它们不将 CSV 字符串保存在文件中。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-CSV</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Delimiter</maml:name>
				<maml:description>
					<maml:para>指定在 CSV 文件中分隔属性值的分隔符。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。

如果指定了文件中的实际字符串分隔符之外的字符，则 Import-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定要导入的 CSV 文件的路径。还可以将路径通过管道传递给 Import-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Header</maml:name>
				<maml:description>
					<maml:para>为导入的文件指定备用的列标题行。列标题确定由 Import-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，其余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

使用 Header 参数时，请从 CSV 文件中删除原始标题行。否则，Import-CSV 将基于标题行中的项创建额外对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Import-CSV</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseCulture</maml:name>
				<maml:description>
					<maml:para>使用当前区域性的列表分隔符作为项目分隔符。默认值为逗号 (,)。

要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定要导入的 CSV 文件的路径。还可以将路径通过管道传递给 Import-CSV。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Header</maml:name>
				<maml:description>
					<maml:para>为导入的文件指定备用的列标题行。列标题确定由 Import-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，其余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

使用 Header 参数时，请从 CSV 文件中删除原始标题行。否则，Import-CSV 将基于标题行中的项创建额外对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Delimiter</maml:name>
			<maml:description>
				<maml:para>指定在 CSV 文件中分隔属性值的分隔符。默认值为逗号 (,)。输入字符，例如冒号 (:)。若要指定分号 (;)，请将它括在引号内。

如果指定了文件中的实际字符串分隔符之外的字符，则 Import-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">char</command:parameterValue>
			<dev:type>
				<maml:name>char</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>,</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Header</maml:name>
			<maml:description>
				<maml:para>为导入的文件指定备用的列标题行。列标题确定由 Import-CSV 创建的对象的属性名称。

输入以逗号分隔的列标题列表。用引号（单引号或双引号）括起每一项。不要将标题字符串括在引号内。如果您输入的列标题比现有的列数少，其余的列将没有标题。如果您输入的标题比现有的列数多，将忽略多余的标题。

使用 Header 参数时，请从 CSV 文件中删除原始标题行。否则，Import-CSV 将基于标题行中的项创建额外对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定要导入的 CSV 文件的路径。还可以将路径通过管道传递给 Import-CSV。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseCulture</maml:name>
			<maml:description>
				<maml:para>使用当前区域性的列表分隔符作为项目分隔符。默认值为逗号 (,)。

要查找区域性的列表分隔符，请使用下面的命令：(Get-Culture).TextInfo.ListSeparator。如果指定了除 CSV 字符串中使用的分隔符之外的字符，则 ConvertFrom-CSV 无法基于 CSV 字符串创建对象。相反，它将返回字符串。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>逗号</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含路径的字符串传递给 Import-CSV。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>对象。</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Import-CSV 返回 CSV 文件中的内容所描述的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          因为导入的对象是该对象类型的 CSV 版本，所以 Windows PowerShell 类型格式化条目无法对其进行识别和格式化，而只能对该对象类型的非 CSV 版本进行格式化。

在 CSV 文件中，通过以逗号分隔的对象属性值列表来表示每个对象。将属性值转换为字符串（通过使用对象的 ToString() 方法），这样它们通常就可由属性值的名称来表示。Export-CSV 无法导出对象的方法。


                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv

C:\PS&gt; $p = import-CSV processes.csv

C:\PS&gt; $p | get-member

   TypeName: CSV:System.Diagnostics.Process

Name                       MemberType   Definition
----                       ----------   ----------
Equals                     Method       System.Boolean Equals(Object obj)
GetHashCode                Method       System.Int32 GetHashCode()
GetType                    Method       System.Type GetType()
ToString                   Method       System.String ToString()
BasePriority               NoteProperty System.String BasePriority=8
Company                    NoteProperty System.String Company=Microsoft Corporation
...

C:\PS&gt; $p | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何导出然后导入 Microsoft .NET Framework 对象的 CSV 文件。

第一个命令使用 Get-Process cmdlet 来获取本地计算机上的进程。它使用管道运算符 (|) 将进程对象发送到 Export-CSV cmdlet，其将进程对象导出到当前目录中的 Processes.csv 文件。

第二个命令使用 Import-CSV cmdlet 导入 Import-CSV 文件中的进程。然后它将生成的进程对象保存在 $p 变量中。

第三个命令使用管道运算符通过管道将导入的对象传递到 Get-Member cmdlet。结果显示它们是 CSV:System.Diagnostic.Process 对象，而不是 Get-Process 返回的 System.Diagnostic.Process 对象。

另外，因为格式化文件中没有对应于进程对象的 CSV 版本的条目类型，所以这些对象的格式化方法与标准进程对象的格式化方法不同。

若要显示这些对象，请使用格式化 cmdlet，如 Format-Table 和 Format-List，或通过管道将对象传递到 Out-GridView。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | export-csv processes.csv -Delimiter :

C:\PS&gt; $p = import-csv processes.csv -Delimiter :                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Import-CSV 的 Delimiter 参数。在此示例中，进程将导出到使用冒号 (:) 作为分隔符的文件。

导入时，Import-CSV 文件使用 Delimiter 参数来指示该文件中使用的分隔符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$p = import-csv processes.csv -UseCulture

C:\PS&gt; (get-culture).textinfo.listseparator

,                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明如何使用 Import-CSV 的 UseCulture 参数。

第一个命令将 Processes.csv 文件中的对象导入 $p 变量中。它使用 UseCulture 参数来指示 Import-CSV 使用为当前区域性定义的列表分隔符。

第二个命令显示当前区域性的列表分隔符。它使用 Get-Culture cmdlet 来获取当前区域性。它使用点 (.)方法获取当前区域性的 TextInfo 属性以及 TextInfo 中的对象的 ListSeparator 属性。在此示例中，该命令返回逗号。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
start-job -scriptblock { get-process } | export-csv jobs.csv

C:\PS&gt; $header = &quot;MoreData&quot;,&quot;StatusMessage&quot;,&quot;Location&quot;,&quot;Command&quot;,&quot;State&quot;,&quot;Finished&quot;,&quot;InstanceId&quot;,&quot;SessionId&quot;,&quot;Name&quot;,&quot;ChildJobs&quot;,&quot;Output&quot;,&quot;Error&quot;,&quot;Progress&quot;,&quot;Verbose&quot;,&quot;Debug&quot;,&quot;Warning&quot;,&quot;StateChanged&quot;

# Delete header from file
C:\PS&gt; $a = (get-content jobs.csv)
C:\PS&gt; $a = $a[0], $a[2..($a.count - 1)]
C:\PS&gt; $a &gt; jobs.csv

C:\PS&gt; $j = import-csv jobs.csv -header $header

C:\PS&gt; $j

MoreData      : True
StatusMessage :
Location      : localhost
Command       : get-process
State         : Running
Finished      : System.Threading.ManualResetEvent
InstanceId    : 135bdd25-40d6-4a20-bd68-05282a59abd6
SessionId     : 1
Name          : Job1
ChildJobs     : System.Collections.Generic.List`1[System.Management.Automation.Job]
Output        : System.Management.Automation.PSDataCollection`1[System.Management.Automation.PSObject]
Error         : System.Management.Automation.PSDataCollection`1[System.Management.Automation.ErrorRecord]
Progress      : System.Management.Automation.PSDataCollection`1[System.Management.Automation.ProgressRecord]
Verbose       : System.Management.Automation.PSDataCollection`1[System.String]
Debug         : System.Management.Automation.PSDataCollection`1[System.String]
Warning       : System.Management.Automation.PSDataCollection`1[System.String]
StateChanged  :                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何使用 Import-CSV 的 Header 参数来更改所得到的导入对象中的属性名称。

第一条命令使用 Start-Job cmdlet 启动一个后台作业，该作业在本地计算机上运行 Get-Process 命令。管道运算符 (|) 将生成的作业对象发送至 Export-CSV cmdlet，该 cmdlet 将作业对象转换为 CSV 格式。赋值运算符 (=) 将生成的 CSV 保存在 Jobs.csv 文件中。

第二条命令将标题保存在 $header 变量中。与默认标题不同，该标题使用“MoreData”和“State”，而不是“HasMoreData”和“JobStateInfo”。

接下来的三个命令从 Jobs.csv 文件中删除原始标题（第二行）。

第六个命令使用 Import-CSV cmdlet 导入 Jobs.csv 文件并将 CSV 字符串转换为作业对象的 CSV 版本。该命令使用 Header 参数提交备用标题。结果存储在 $j 变量中。

第七个命令显示 $j 变量中的对象。所得到的对象具有“MoreData”和“State”属性，如命令输出中所示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;.\processes.csv&quot; | import-csv                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从 Processes.csv 文件导入对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113341</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertFrom-CSV</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-LocalizedData
		</command:name>
		<maml:description>
			<maml:para>根据为操作系统选择的 UI 区域性，将语言特定的数据导入脚本和函数。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Import</command:verb>
		<command:noun>LocalizedData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Import-LocalizedData cmdlet 从其名称与为操作系统的当前用户设置的 UI 语言相匹配的子目录中动态检索字符串。它用于使脚本以当前用户所选的 UI 语言显示用户消息。

Import-LocalizedData 从脚本目录的语言特定子目录中的 .psd1 文件导入数据，并将数据保存在该命令中指定的局部变量中。该 cmdlet 根据 $PSUICulture 自动变量的值选择子目录和文件。使用脚本中的本地变量显示用户消息时，将以用户的 UI 语言显示该消息。

可以使用 Import-LocalizedData 的参数来指定备用 UI 区域性、路径和文件名，添加支持的命令，取消显示在未找到 .psd1 文件时出现的错误消息。

在 Windows PowerShell 2.0 中，Import-LocalizedData cmdlet 支持脚本国际化。此计划的目的在于通过使脚本更易于以当前用户的 UI 语言显示用户消息，从而更好地为全世界的用户服务。有关此方面以及 .psd1 文件的格式的详细信息，请参阅 about_Script_Internationalization。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-LocalizedData</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>BindingVariable</maml:name>
				<maml:description>
					<maml:para>指定文本字符串将导入到的变量。输入变量名称，不带美元符号 ($)。

使用 Import-LocalizedData 替换在脚本的 DATA 节中指定的默认文本字符串时，请将 DATA 节赋予一个变量，然后在 BindingVariable 参数的值中输入 DATA 节变量的名称。然后，当 Import-LocalizedData 将导入的内容保存在 BindingVariable 中时，导入的数据将替换默认文本字符串。如果没有指定默认文本字符串，则可以选择任何变量名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>UICulture</maml:name>
				<maml:description>
					<maml:para>指定备用 UI 区域性。默认值为 $PsUICulture 自动变量的值。以“&lt;语言&gt;-&lt;区域&gt;”格式输入 UI 区域性，如 en-US、de-DE 或 ar-SA。

UICulture 参数的值确定语言特定的子目录（在基目录内），Import-LocalizedData 从该子目录获取脚本的 .psd1 文件。

该 cmdlet 搜索与 UICulture 参数或 $PsUICulture 自动变量的值具有相同名称的子目录（如“de-DE”或“ar-SA”）。如果该 cmdlet 找不到该目录或该目录不包含脚本的 .psd1 文件，它会搜索具有语言代码名称的子目录（如“de”或“ar”）。如果它找不到该子目录或 .psd1 文件，该命令将失败，并以脚本中指定的默认语言显示数据。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>BaseDirectory</maml:name>
				<maml:description>
					<maml:para>指定 .psd1 文件所在的基目录。默认值为脚本所在的目录。Import-LocalizedData 在基目录的语言特定子目录中搜索脚本的 .psd1 文件。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FileName</maml:name>
				<maml:description>
					<maml:para>指定要导入的 .psd1 文件的名称。输入不带 .psd1 文件扩展名的文件名。

默认值为脚本的名称。例如，如果脚本为 FindFiles.ps1，Import-LocalizedData 会搜索 FindFiles.psd1。可以使用此参数来指示 Import-LocalizedData 搜索其他 .psd1 文件。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>SupportedCommand</maml:name>
				<maml:description>
					<maml:para>指定仅生成数据的 cmdlet 和函数。

可使用此参数包含已编写或已测试的 cmdlet 和函数。有关详细信息，请参阅 about_Script_Internationalization。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>BaseDirectory</maml:name>
			<maml:description>
				<maml:para>指定 .psd1 文件所在的基目录。默认值为脚本所在的目录。Import-LocalizedData 在基目录的语言特定子目录中搜索脚本的 .psd1 文件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>BindingVariable</maml:name>
			<maml:description>
				<maml:para>指定文本字符串将导入到的变量。输入变量名称，不带美元符号 ($)。

使用 Import-LocalizedData 替换在脚本的 DATA 节中指定的默认文本字符串时，请将 DATA 节赋予一个变量，然后在 BindingVariable 参数的值中输入 DATA 节变量的名称。然后，当 Import-LocalizedData 将导入的内容保存在 BindingVariable 中时，导入的数据将替换默认文本字符串。如果没有指定默认文本字符串，则可以选择任何变量名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FileName</maml:name>
			<maml:description>
				<maml:para>指定要导入的 .psd1 文件的名称。输入不带 .psd1 文件扩展名的文件名。

默认值为脚本的名称。例如，如果脚本为 FindFiles.ps1，Import-LocalizedData 会搜索 FindFiles.psd1。可以使用此参数来指示 Import-LocalizedData 搜索其他 .psd1 文件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>SupportedCommand</maml:name>
			<maml:description>
				<maml:para>指定仅生成数据的 cmdlet 和函数。

可使用此参数包含已编写或已测试的 cmdlet 和函数。有关详细信息，请参阅 about_Script_Internationalization。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>UICulture</maml:name>
			<maml:description>
				<maml:para>指定备用 UI 区域性。默认值为 $PsUICulture 自动变量的值。以“&lt;语言&gt;-&lt;区域&gt;”格式输入 UI 区域性，如 en-US、de-DE 或 ar-SA。

UICulture 参数的值确定语言特定的子目录（在基目录内），Import-LocalizedData 从该子目录获取脚本的 .psd1 文件。

该 cmdlet 搜索与 UICulture 参数或 $PsUICulture 自动变量的值具有相同名称的子目录（如“de-DE”或“ar-SA”）。如果该 cmdlet 找不到该目录或该目录不包含脚本的 .psd1 文件，它会搜索具有语言代码名称的子目录（如“de”或“ar”）。如果它找不到该子目录或 .psd1 文件，该命令将失败，并以脚本中指定的默认语言显示数据。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Collections.Hashtable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Import-LocalizedData 将哈希表保存在由 BindingVariable 参数的值指定的变量中。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          使用 Import-LocalizedData 之前，请对用户消息进行本地化。在由键/值对组成的哈希表中，设置每个区域设置（UI 区域性）的消息的格式，然后将哈希表保存在与脚本同名、文件扩展名为 .psd1 的文件中。在脚本目录下为每个受支持的 UI 区域性创建一个目录，然后将每个 UI 区域性的 .psd1 文件保存在具有该 UI 区域性名称的目录中。

例如，对 de-DE 区域设置的用户消息进行本地化并在哈希表中对它们进行格式化。将该哈希表保存在 &lt;ScriptName&gt;.psd1 文件中。然后在脚本目录下创建 de-DE 子目录，并将 de-DE &lt;ScriptName&gt;.psd1 文件保存在该 de-DE 子目录中。对支持的每个区域设置重复此方法。

Import-LocalizedData 执行结构化搜索，以便获得脚本的本地化的用户消息。

Import-LocalizedData 在脚本文件所在的目录（或 BaseDirectory 参数的值）中开始该搜索。然后，它会在基目录中搜索与 $PsUICulture 变量的值（或 UICulture 参数的值）具有相同名称的子目录（如“de-DE”或“ar-SA”）。接着，它会在该子目录中搜索与脚本（或 FileName 参数的值）具有相同名称的 .psd1 文件。

如果 Import-LocalizedData 找不到具有 UI 区域性名称的子目录或子目录不包含脚本的 .psd1 文件，它会在具有语言代码名称的子目录（如“de”或“ar”）中搜索脚本的 .psd1 文件。如果它找不到该子目录或 .psd1 文件，该命令将失败，将以脚本中的默认语言显示数据，并且会显示一条错误消息，说明无法导入数据。若要取消该消息，从而正常失败，请使用具有 SilentlyContinue 值的 ErrorAction 通用参数。

如果 Import-LocalizedData 找到子目录和 .psd1 文件，它会将用户消息的哈希表导入命令中的 BindingVariable 参数的值中。然后，当您显示该变量中的哈希表中的消息时，将显示本地化的消息。

有关详细信息，请参阅 about_Script_Internationalization。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-localizeddata -bindingVariable messages                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将文本字符串导入 $messages 变量中。它使用 cmdlet 参数的所有默认值。

如果该命令包含在 C:\test 目录中的 Archives.ps1 脚本中，且 $PsUICulture 自动变量的值为 zh-CN，则 Import-LocalizedData 会导入 C:\test\zh-CN 目录中的 Archives.psd1 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-localizeddata -bindingVariable msgTbl -uiculture ar-SA -filename Simple -baseDirectory C:\Data\Localized                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将文本字符串导入脚本的 $msgTbl 变量中。

它使用 UICulture 参数来指示该 cmdlet 从 C:\Data\Localized 的 ar-SA 子目录中的 Simple.psd1 文件导入数据。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
# In C:\Test\en-US\test.psd1:

ConvertFrom-StringData @'
 # English strings
Msg1 = &quot;The Name parameter is missing from the command.&quot;
Msg2 = &quot;This command requires the credentials of a member of the Administrators group on the computer.&quot;
Msg3 = &quot;Use $_ to represent the object that is being processed.&quot;
'@

# In C:\Test\Test.ps1

import-localizeddata -bindingvariable messages
write-host $messages.msg2

# In Windows PowerShell

C:\PS&gt; .\test.ps1
This command requires the credentials of a member of the Administrators group on the computer.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何在简单的脚本中使用本地化的数据。

该示例的第一部分显示 Test.psd1 文件的内容。它包含 ConvertFrom-StringData 命令，可以将一系列命名文本字符串转换为哈希表。test.psd1 文件位于包含脚本的 C:\Test 目录的 en-US 子目录中。

该示例的第二部分显示 Test.ps1 脚本的内容。它包含一个 Import-LocalizedData 命令（用于将匹配的 .psd1 文件中的数据导入到 $Messages 变量中）和一个 Write-Host 命令（用于将 $Messages 变量中的一条消息写入主机程序）。

该示例的最后部分运行脚本。输出表明，它用为操作系统的当前用户设置的 UI 语言显示正确的用户消息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
# In TestScript.ps1

$UserMessages = DATA {
    ConvertFrom-StringData @'
    # English strings
        Msg1 = &quot;Enter a name.&quot;
        Msg2 = &quot;Enter your employee ID.&quot;
        Msg3 = &quot;Enter your building number.&quot;
'@ }

Import-LocalizedData -bindingVariable UserMessages

$UserMessages.Msg1
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何使用 Import-LocalizedData 替换在脚本的 DATA 节中定义的默认文本字符串。

在此示例中，TestScript.ps1 脚本的 DATA 节包含一个 ConvertFrom-StringData 命令，该命令将 DATA 节的内容转换为哈希表，并将其存储在 $UserMessages 变量的值中。

该脚本还包含一个 Import-LocalizedData 命令，该命令从 $PsUICulture 变量的值所指定的子目录中的 TestScript.psd1 文件中导入已翻译文本字符串的哈希表。如果该命令找到该 .psd1 文件，则将文件中的已翻译字符串保存到 $UserMessages 变量的值中，覆盖由 DATA 节逻辑保存的哈希表。

第三个命令显示 $UserMessages 变量中的第一条消息。

如果 Import-LocalizedData 命令找到 $PsUICulture 语言的 .psd1 文件，则 $UserMessages 变量的值将包含已翻译文本字符串。如果由于任何原因而导致命令失败，则该命令显示在脚本的 DATA 节中定义的默认文本字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
# In Day1.ps1
Import-LocalizedData -bindingVariable Day
Day.MessageDate

# In Day2.ps1
Import-LocalizedData -bindingVariable Day -errorAction:silentlycontinue
Day.MessageDate

C:\PS&gt; .\Day1.ps1

Import-LocalizedData : Cannot find PowerShell data file 'Day1.psd1' in directory 'C:\ps-test\fr-BE\' or any parent culture directories.
At C:\ps-test\Day1.ps1:17 char:21
+ Import-LocalizedData &lt;&lt;&lt;&lt;  Day
Today is Tuesday


C:\PS&gt; .\Day2.ps1

Today is Tuesday                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了当 Import-LocalizedData 找不到与用户的 UI 区域性匹配的目录或在那些目录中找不到脚本的 .psd1 文件时，如何取消显示的错误消息。

可以使用具有“SilentlyContinue”值的 ErrorAction 通用参数来取消错误消息。当您已经使用默认或“回退”语言提供了用户消息并且不需要任何错误消息时，以上操作尤其有用。

此示例比较包含 Import-LocalizedData 命令的两个脚本：Day1.ps1 和 Day2.ps1。这两个脚本是相同的，但是 Day2 使用具有 SilentlyContinue 值的 ErrorAction 通用参数。

示例输出显示了当 UI 区域性设置为 fr-BE 且该 UI 区域性没有匹配的文件或目录时运行这两个脚本的结果。Day1.ps1 显示一条错误消息和英文输出。Day2.ps1 只显示英文输出。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113342</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Script_Internationalization</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-PSSession
		</command:name>
		<maml:description>
			<maml:para>将来自其他会话的命令导入到当前会话中。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Import</command:verb>
		<command:noun>PSSession</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Import-PSSession cmdlet 将命令（如 cmdlet、函数和别名）从本地或远程计算机上的 PSSession 导入到当前会话中。可以导入 Get-Command 能够在 PSSession 中找到的任何命令。

使用 Import-PSSession 命令可以从自定义 shell（如 Microsoft Exchange Server shell）导入命令，也可以从会话（如果包含当前会话所不具有的 Windows PowerShell 模块和管理单元或其他元素）导入命令。

若要导入命令，请首先使用 New-PSSession cmdlet 创建 PSSession。然后，使用 Import-PSSession cmdlet 导入命令。默认情况下，Import-PSSession 导入所有命令，但与当前会话中的命令同名的命令除外。若要导入所有命令，请使用 AllowClobber 参数。

可以像使用会话中的任何命令那样使用导入的命令。使用导入的命令时，该命令的导入部分是在从中导入该命令的会话中隐式运行。但是，远程操作完全由 Windows PowerShell 进行处理。除了必须保持与另一会话 (PSSession) 的连接之外，您甚至不需要知道这些操作。如果关闭该连接，导入的命令将不再可用。

因为导入的命令需要花费比本地命令更长的时间来运行，所以 Import-PSSession 会向每个导入的命令添加 AsJob 参数。该参数允许您将命令作为 Windows PowerShell 后台作业运行。有关详细信息，请参阅 about_Jobs。

使用 Import-PSSession 时，Windows PowerShell 将导入的命令添加到仅存在于您的会话中的临时模块，并返回表示该模块的对象。若要创建可在将来会话中使用的永久性模块，请使用 Export-PSSession cmdlet。

Import-PSSession cmdlet 使用 Windows PowerShell 的隐式远程处理功能。将命令导入当前会话后，导入的命令将在原始会话中或在源计算机上的一个相似会话中隐式运行。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-PSSession</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Session</maml:name>
				<maml:description>
					<maml:para>指定从中导入 cmdlet 的 PSSession。输入包含会话对象的变量或获取会话对象的命令，如 New-PSSession 或 Get-PSSession 命令。只能指定一个会话。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSSession</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="3">
				<maml:name>CommandName</maml:name>
				<maml:description>
					<maml:para>仅导入具有指定名称或名称模式的命令。允许使用通配符。使用“CommandName”或其别名“Name”。

默认情况下，Import-PSSession 导入会话中的所有命令，但与当前会话中的命令具有相同名称的命令除外。这样可以防止导入的命令隐藏或替换会话中的命令。若要导入所有命令（甚至是那些隐藏或替换其他命令的命令），请使用 AllowClobber 参数。

如果使用 CommandName 参数，除非使用 FormatTypeName 参数，否则不导入命令的格式设置文件。同样，如果使用 FormatTypeName 参数，除非使用 CommandName 参数，否则不导入命令。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="4">
				<maml:name>FormatTypeName</maml:name>
				<maml:description>
					<maml:para>导入针对指定的 Microsoft .NET Framework 类型的格式设置指令。输入类型名称。允许使用通配符。

此参数的值必须是从其中导入命令的会话中的 Get-FormatData 命令所返回的类型的名称。若要获取远程会话中的所有格式数据，请键入 *。

如果该命令不包含 CommandName 或 FormatTypeName 参数，则 Import-PSSession
导入远程会话中的 Get-FormatData 命令所返回的所有 .NET Framework 类型的格式设置指令。

如果使用 FormatTypeName 参数，除非使用 CommandName 参数，否则不导入命令。
同样，如果使用 CommandName 参数，除非使用 FormatTypeName 参数，否则不导入命令的格式设置文件。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllowClobber</maml:name>
				<maml:description>
					<maml:para>导入指定命令，即使它们与当前会话中的命令同名。

如果导入与当前会话中的命令同名的命令，则导入的命令会隐藏或替换原始命令。有关详细信息，请参阅 about_Command_Precedence。

默认情况下，Import-PSSession 不会导入与当前会话中的命令同名的命令。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ArgumentList</maml:name>
				<maml:description>
					<maml:para>导入使用指定的实际参数（形式参数值）得到的命令的变体。

例如，若要导入 $s 中 PSSession 中的证书 (Cert:) 驱动器中 Get-Item 命令的变体，请键入“import-pssession -session $s -command get-item -argumentlist cert:”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CommandType</maml:name>
				<maml:description>
					<maml:para>仅导入指定类型的命令对象。默认值为 Cmdlet。使用“CommandType”或它的别名“Type”。

有效值包括：
-- Alias：远程会话中的 Windows PowerShell 别名。
-- All：远程会话中的 cmdlet 和函数。
-- Application：位于远程会话中 Path 环境变量 ($env:path) 所列路径中的 Windows-PowerShell 文件以外的所有文件，包括 .txt、.exe. 和 .dll 文件。
-- Cmdlet：远程会话中的 cmdlet。默认值为“Cmdlet”。
-- ExternalScript：位于远程会话中 Path 环境变量 ($env:path) 所列路径中的 .ps1 文件。
-- Filter 和 Function：远程会话中的 Windows PowerShell 函数。
-- Script：远程会话中的脚本块。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Alias</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Function</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Filter</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Cmdlet</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ExternalScript</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Application</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Script</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Module</maml:name>
				<maml:description>
					<maml:para>仅导入指定的 Windows PowerShell 管理单元和模块中的命令。输入管理单元和模块的名称。不允许使用通配符。

有关详细信息，请参阅 about_PSSnapins 和 Import-Module。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Prefix</maml:name>
				<maml:description>
					<maml:para>将指定前缀添加到所导入命令的名称中的名词中。

使用此参数可以避免当会话中的不同命令具有相同名称时可能发生的名称冲突。
例如，如果指定前缀“Remote”，然后导入一个 Get-Date cmdlet，则该 cmdlet 在会话中称为 Get-RemoteDate，因而不会与原始 Get-Date cmdlet 混淆。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllowClobber</maml:name>
			<maml:description>
				<maml:para>导入指定命令，即使它们与当前会话中的命令同名。

如果导入与当前会话中的命令同名的命令，则导入的命令会隐藏或替换原始命令。有关详细信息，请参阅 about_Command_Precedence。


默认情况下，Import-PSSession 不会导入与当前会话中的命令同名的命令。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>ArgumentList</maml:name>
			<maml:description>
				<maml:para>导入使用指定的实际参数（形式参数值）得到的命令的变体。

例如，若要导入 $s 中 PSSession 中的证书 (Cert:) 驱动器中 Get-Item 命令的变体，请键入“import-pssession -session $s -command get-item -argumentlist cert:”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>PSSession 中的所有命令，与当前会话中的命令名称相同的命令除外。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="3">
			<maml:name>CommandName</maml:name>
			<maml:description>
				<maml:para>仅导入具有指定名称或名称模式的命令。允许使用通配符。使用“CommandName”或其别名“Name”。

默认情况下，Import-PSSession 导入会话中的所有命令，但与当前会话中的命令具有相同名称的命令除外。这样可以防止导入的命令隐藏或替换会话中的命令。若要导入所有命令（甚至是那些隐藏或替换其他命令的命令），请使用 AllowClobber 参数。

如果使用 CommandName 参数，除非使用 FormatTypeName 参数，否则不导入命令的格式设置文件。同样，如果使用 FormatTypeName 参数，除非使用 CommandName 参数，否则不导入命令。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>PSSession 中的所有命令，与当前会话中的命令名称相同的命令除外。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CommandType</maml:name>
			<maml:description>
				<maml:para>仅导入指定类型的命令对象。默认值为 Cmdlet。使用“CommandType”或它的别名“Type”。

有效值包括：
-- Alias：远程会话中的 Windows PowerShell 别名。
-- All：远程会话中的 cmdlet 和函数。
-- Application：位于远程会话中 Path 环境变量 ($env:path) 所列路径中的 Windows-PowerShell 文件以外的所有文件，包括 .txt、.exe. 和 .dll 文件。
-- Cmdlet：远程会话中的 cmdlet。默认值为“Cmdlet”。
-- ExternalScript：位于远程会话中 Path 环境变量 ($env:path) 所列路径中的 .ps1 文件。
-- Filter 和 Function：远程会话中的 Windows PowerShell 函数。
-- Script：远程会话中的脚本块。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">CommandTypes</command:parameterValue>
			<dev:type>
				<maml:name>CommandTypes</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>PSSession 中的所有命令，与当前会话中的命令名称相同的命令除外。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="4">
			<maml:name>FormatTypeName</maml:name>
			<maml:description>
				<maml:para>导入针对指定的 Microsoft .NET Framework 类型的格式设置指令。输入类型名称。允许使用通配符。

此参数的值必须是从其中导入命令的会话中的 Get-FormatData 命令所返回的类型的名称。若要获取远程会话中的所有格式数据，请键入 *。

如果该命令不包含 CommandName 或 FormatTypeName 参数，则 Import-PSSession
导入远程会话中的 Get-FormatData 命令所返回的所有 .NET Framework 类型的格式设置指令。

如果使用 FormatTypeName 参数，除非使用 CommandName 参数，否则不导入命令。
同样，如果使用 CommandName 参数，除非使用 FormatTypeName 参数，否则不导入命令的格式设置文件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>在 System.Management.Automation 命名空间中键入</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Module</maml:name>
			<maml:description>
				<maml:para>仅导入指定的 Windows PowerShell 管理单元和模块中的命令。输入管理单元和模块的名称。不允许使用通配符。

有关详细信息，请参阅 about_PSSnapins 和 Import-Module。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>PSSession 中的所有命令，与当前会话中的命令名称相同的命令除外。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Prefix</maml:name>
			<maml:description>
				<maml:para>将指定前缀添加到所导入命令的名称中的名词中。

使用此参数可以避免当会话中的不同命令具有相同名称时可能发生的名称冲突。
例如，如果指定前缀“Remote”，然后导入一个 Get-Date cmdlet，则该 cmdlet 在会话中称为 Get-RemoteDate，因而不会与原始 Get-Date cmdlet 混淆。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Session</maml:name>
			<maml:description>
				<maml:para>指定从中导入 cmdlet 的 PSSession。输入包含会话对象的变量或获取会话对象的命令，如 New-PSSession 或 Get-PSSession 命令。只能指定一个会话。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSSession</command:parameterValue>
			<dev:type>
				<maml:name>PSSession</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSModuleInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Import-PSSession 返回的模块对象与 New-Module 和 Get-Module 返回的模块对象相同。但是，导入的模块是临时的，仅存在于当前会话中。若要在磁盘上创建永久性模块，请使用 Export-PSSession cmdlet。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Import-PSSession 依赖于 Windows PowerShell 远程处理基础结构。若要使用此 cmdlet，必须对计算机进行相应配置以进行 WS-Management 远程处理。有关详细信息，请参阅 about_Remote and about_Remote_Requirements。

不能使用 Import-PSSession 来导入变量或 Windows PowerShell 提供程序。

当导入与当前会话中的命令同名的命令时，导入的命令可隐藏会话中的别名、函数和 cmdlet，还可以替换会话中的函数和变量。有关详细信息，请参阅 about_Command_Precedence。

Import-PSSession 在导入命令之前，将所有命令转换为函数。因此，导入的命令与保持其原始命令类型的命令的行为略有不同。例如，如果从 PSSession 导入一个 cmdlet，然后从模块或管理单元导入一个同名的 cmdlet，则在默认情况下，始终运行从 PSSession 导入的 cmdlet，因为函数优先于 cmdlet。相反，如果将别名导入到含有同名别名的会话中，则始终使用原始别名，因为别名优先于函数。有关详细信息，请参阅 about_Command_Precedence。

Import-PSSession 使用 Write-Progress cmdlet 来显示该命令的进度。该命令正在运行时，您可能会看到进度条。

为了查找要导入的命令，Import-PSSession 使用 Invoke-Command cmdlet 在 PSSession 中运行 Get-Command 命令。为了获取命令的格式数据，它使用 Get-FormatData cmdlet。运行 Import-PSSession 命令时，您可能会看到来自 Invoke-Command、Get-Command 和 Get-FormatData 的错误消息。另外，Import-PSSession 不能从不包含 Get-Command、Get-FormatData、Select-Object 和 Get-Help cmdlet 的 PSSession 中导入命令。

导入的命令与其他远程命令具有相同的限制（包括无法启动具有用户界面的程序，如记事本）。

因为 Windows PowerShell 配置文件不在 PSSession 中运行，所以配置文件添加到会话中的命令无法用于 Import-PSSession。若要从配置文件导入命令，请在导入命令之前使用 Invoke-Command 命令在 PSSession 中手动运行该配置文件。

即使 Import-PSSession 命令不导入格式数据，该命令所创建的临时模块也可能包含一个格式设置文件。如果该命令不导入格式数据，则创建的任何格式设置文件都不包含格式数据。

若要使用 Import-PSSession，当前会话中的执行策略不能为 Restricted 或 AllSigned，因为 Import-PSSession 创建的模块包含被这些策略禁止的未签名脚本文件。若要在不更改本地计算机的执行策略的情况下使用 Import-PSSession，请使用 Set-ExecutionPolicy 的 Scope 参数为单个进程设置限制性较弱的执行策略。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computername Server01

C:\PS&gt; import-pssession -session $s                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 Server01 计算机上某个 PSSession 中的所有命令导入当前会话，但与当前会话中的命令同名的命令除外。

因为此命令不使用 CommandName 参数，所以它还将导入所导入的命令所必需的所有格式数据。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession https://ps.testlabs.com/powershell

C:\PS&gt; import-pssession -session $s -commandname *-test -formatTypeName *

C:\PS&gt; new-test -name test1

C:\PS&gt; get-test test1 | run-test                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将 PSSession 中名称以“-test”结尾的命令导入本地会话，然后说明如何使用导入的 cmdlet。

第一个命令使用 New-PSSession cmdlet 创建 PSSession。它将 PSSession 保存在 $s 变量中。

第二个命令使用 Import-PSSession cmdlet 从 $s 中的 PSSession 将命令导入当前会话。它使用 CommandName 参数来指定带有 Test 名词的命令，使用 FormatTypeName 参数来导入各 Test 命令的格式数据。

第三个和第四个命令使用当前会话中导入的命令。因为导入的命令实际添加到当前会话，所以您可以使用本地语法来运行这些命令。不需要使用 Invoke-Command cmdlet 来运行导入的命令。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s1 = new-pssession -computername s1 

C:\PS&gt; $s2 = new-pssession -computername s2

C:\PS&gt; import-pssession -session s1 -type cmdlet -name New-Test, Get-Test -FormatTypeName *

C:\PS&gt; import-pssession -session s2 -type cmdlet -name Set-Test -FormatTypeName *

C:\PS&gt; new-test Test1 | set-test -runtype full                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明您可以像使用本地 cmdlet 那样使用导入的 cmdlet。

这些命令导入 Server01 计算机上某个 PSSession 中的 New-Test 和 Get-Test cmdlet，并导入 Server02 计算机上某个 PSSession 中的 Set-Test cmdlet。

即使 cmdlet 是从不同 PSSession 导入的，也可以通过管道将对象从一个 cmdlet 传递到另一个 cmdlet，而不会发生错误。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computername Server01

C:\PS&gt; import-pssession -session $s -commandname *-test* -formattypename *

C:\PS&gt; $batch = new-test -name Batch -asjob

C:\PS&gt; receive-job $batch                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何将导入的命令作为后台作业运行。

因为导入的命令需要花费比本地命令更长的时间来运行，所以 Import-PSSession 会向每个导入的命令添加 AsJob 参数。AsJob 参数允许您将命令作为后台作业运行。

第一个命令在 Server01 计算机上创建一个 PSSession，并将该 PSSession 对象保存在 $s 变量中。

第二个命令使用 Import-PSSession 将 Test cmdlet 从 $s 中的 PSSession 导入当前会话。

第三个命令使用导入的 New-Test cmdlet 的 AsJob 参数将 New-Test 命令作为后台作业运行。该命令将 New-Test 返回的作业对象保存在 $batch 变量中。

第四个命令使用 Receive-Job cmdlet 来获取 $batch 变量中的作业的结果。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -comp Server01

C:\PS&gt; invoke-command -session $s {import-module TestManagement}

C:\PS&gt; import-pssession -session $s -module TestManagement                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何将远程计算机上某个 Windows PowerShell 模块中的 cmdlet 和函数导入当前会话。

第一条命令在 Server01 计算机上创建一个 PSSession，并将它保存在 $s 变量中。

第二个命令使用 Invoke-Command cmdlet 在 $s 中的 PSSession 中运行 Import-Module 命令。

通常，该模块将通过 Windows PowerShell 配置文件中的 Import-Module 命令添加到所有会话，但是配置文件不在 PSSession 中运行。

第三个命令使用 Import-PSSession 的 Module 参数将模块中的 cmdlet 和函数导入当前会话。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-pssession $s -CommandName Get-Date, SearchHelp  -formatTypeName * -AllowClobber


Name              : tmp_79468106-4e1d-4d90-af97-1154f9317239_tcw1zunz.ttf
Path              : C:\Users\User01\AppData\Local\Temp\tmp_79468106-4e1d-4d90-af97-1154f9317239_tcw1zunz.ttf\tmp_79468106-4e1d-4d90-af97-1154f9317239_
                    tcw1zunz.ttf.psm1
Description       : Implicit remoting for http://server01.corp.fabrikam.com/wsman
Guid              : 79468106-4e1d-4d90-af97-1154f9317239
Version           : 1.0
ModuleBase        : C:\Users\User01\AppData\Local\Temp\tmp_79468106-4e1d-4d90-af97-1154f9317239_tcw1zunz.ttf
ModuleType        : Script
PrivateData       : {ImplicitRemoting}
AccessMode        : ReadWrite
ExportedAliases   : {}
ExportedCmdlets   : {}
ExportedFunctions : {[Get-Date, Get-Date], [SearchHelp, SearchHelp]}
ExportedVariables : {}
NestedModules     : {}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明 Import-PSSession 在磁盘上的临时文件中创建一个模块。还说明所有命令在导入到当前会话之前都已转换为函数。

该命令使用 Import-PSSession cmdlet 将 Get-Date cmdlet 和 SearchHelp 函数导入当前会话。

Import-PSSession cmdlet 返回一个表示临时模块的 PSModuleInfo 对象。Path 属性的值表明 Import-PSSession 在临时位置创建了一个脚本模块 (.psm1) 文件。ExportedFunctions 属性表明 Get-Date cmdlet 和 SearchHelp 函数都是作为函数导入的。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-pssession $s -CommandName Get-Date -formatTypeName * -AllowClobber

C:\PS&gt; get-command get-date

CommandType   Name       Definition
-----------   ----       ----------
Function      Get-Date   ...
Cmdlet        Get-Date   Get-Date [[-Date] &lt;DateTime&gt;] [-Year &lt;Int32&gt;] [-Month &lt;Int32&gt;]

C:\PS&gt; Get-Date
09074   

C:\PS&gt; (get-command -type cmdlet -name get-date).pssnapin.name
Microsoft.PowerShell.Utility

C:\PS&gt; Microsoft.PowerShell.Utility\get-date

Sunday, March 15, 2009 2:08:26 PM
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示如何运行由导入的命令隐藏的命令。

第一个命令从 $s 变量中的 PSSession 导入 Get-Date cmdlet。因为当前会话包含 Get-Date cmdlet，所以 AllowClobber 参数在该命令中是必需的。

第二个命令使用 Get-Command cmdlet 获取当前会话中的 Get-Date 命令。输出表明该会话包含原始 Get-Date cmdlet 和一个 Get-Date 函数。Get-Date 函数运行在 $s 中的 PSSession 中导入的 Get-Date cmdlet。

第三个命令运行 Get-Date 命令。因为函数优先于 cmdlet，所以 Windows PowerShell 运行导入的 Get-Date 函数，该函数返回一个儒略历日期。

第四和第五个命令演示如何使用限定名称运行由导入的命令隐藏的命令。

第四个命令获取将原始 Get-Date cmdlet 添加到当前会话的 Windows PowerShell 管理单元的名称。

第五个命令使用 Get-Date cmdlet 的管理单元限定名称来运行 Get-Date 命令。

有关命令优先级和隐藏的命令的详细信息，请参阅 about_Command_Precedence。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-pssession -session $s -commandName *Item* -AllowClobber                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从 $s 中的 PSSession 导入名称中包含“Item”的命令。因为该命令包含 CommandName 参数但不包含 FormatTypeData 参数，所以仅导入该命令。

如果要使用 Import-PSSession 在远程计算机上运行命令，并且当前会话中已有该命令的格式数据，可使用此命令。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$m = import-pssession -session $s -CommandName *bits* -formattypename *bits*

C:\PS&gt; get-command -module $m

CommandType     Name
-----------     ----
Function        Add-BitsFile
Function        Complete-BitsTransfer
Function        Get-BitsTransfer
Function        Remove-BitsTransfer
Function        Resume-BitsTransfer
Function        Set-BitsTransfer
Function        Start-BitsTransfer
Function        Suspend-BitsTransfer                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示如何使用 Get-Command 的 Module 参数来查明 Import-PSSession 命令将哪些命令导入到会话中。

第一个命令使用 Import-PSSession cmdlet 从 $s 变量中的 PSSession 导入名称中包含“bits”的命令。Import-PSSession 命令返回一个临时模块，并将该模块保存在 $m 变量中。

第二个命令使用 Get-Command cmdlet 获取由该模块导出到 $m 变量中的命令。

Module 参数接受一个字符串值，该字符串值用作模块名称。但是，在提交模块对象时，Windows PowerShell 使用模块对象的 ToString 方法，该方法返回模块名称。

Get-Command 命令与“get-command $m.name”等效。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135221</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Command_Precedence</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-PSSession</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-PSSession</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Jobs</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_PSSessions</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Invoke-Expression
		</command:name>
		<maml:description>
			<maml:para>在本地计算机上运行命令或表达式。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Invoke</command:verb>
		<command:noun>Expression</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Invoke-Expression cmdlet 以命令形式计算或运行指定的字符串，并返回表达式或命令的结果。如果没有 Invoke-Expression，在命令行提交的字符串将原样返回（回显）。

</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-Expression</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Command</maml:name>
				<maml:description>
					<maml:para>指定要运行的命令或表达式。键入该命令或表达式，或输入包含该命或表达式的变量。 Command 参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Command</maml:name>
			<maml:description>
				<maml:para>指定要运行的命令或表达式。键入该命令或表达式，或输入包含该命或表达式的变量。 Command 参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String 或 PSObject
</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将表示命令的对象传递到 Invoke-Expression。使用 $input 自动变量可表示命令中的输入对象。

				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSObject
</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					返回所调用的命令生成的输出（Command 参数的值）。

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          -- 表达式是可以计算并生成结果的语句，如 Windows PowerShell 命令。
 
-- 在脚本中使用 Invoke-Expression cmdlet 时一定要谨慎。使用 Invoke-Expression 运行用户输入的命令时，在运行前需要验证该命令是安全的。通常，最好设计脚本包含预定义的输入选项，而不允许随意输入。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$command = &quot;Get-Process&quot;

C:\PS&gt; $command
Get-Process


C:\PS&gt; invoke-expression $command

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
    296       4     1572       1956    20     0.53   1348 AdtAgent
    270       6     1328        800    34     0.06   2396 alg
     67       2      620        484    20     0.22    716 ati2evxx
   1060      15    12904      11840    74    11.48    892 CcmExec
   1400      33    25280      37544   223    38.44   2564 communicator
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Invoke-Expression 计算表达式。如果没有 Invoke-Expression，将输出表达式，但不计算。

第一个命令将“Get-Process”的值（字符串）赋值给 $command 变量。

第二个命令显示在命令行键入变量名称的效果。Windows PowerShell 回显该字符串。

第三个命令使用 Invoke-Expression 计算该字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
invoke-expression -command &quot;C:\ps-test\testscript.ps1&quot;

C:\PS&gt; &quot;C:\ps-test\testscript.ps1&quot; | invoke-expression                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令使用 Invoke-Expression 在本地计算机上运行脚本 TestScript.ps1。这两个命令是等效的。第一个命令使用 Command 参数来指定要运行的命令。第二个命令使用管道运算符 (|) 将命令字符串发送到 Invoke-Expression。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$cmd = 'get-process | where {$_.cpu -gt 1000}'

C:\PS&gt; iex $command                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例运行 $cmd 变量中保存的一个命令字符串。

该命令字符串括在单引号中，因为它包含一个变量 $_，该变量表示当前对象。如果该命令字符串括在双引号中，$_ 变量在被保存在 $command 字符串中之前将被它自己的值所替换。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$cmdlet_name = &quot;get-eventlog&quot;

C:\PS&gt; $example_number = 1

C:\PS&gt; $example_code = (get-help $cmdlet_name).examples.example[($example_number-1)].code

C:\PS&gt; invoke-expression $example_code                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令检索和运行 Get-EventLog cmdlet 帮助主题中的第一个示例。

若要运行其他 cmdlet 的示例，请将 $cmdlet_name 变量的值更改为该 cmdlet 的名称。另外，请要将 $example_number 变量更改为要运行的示例编号。如果示例数字无效，该命令将失败。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113343</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Measure-Command
		</command:name>
		<maml:description>
			<maml:para>度量运行脚本块和 cmdlet 所用的时间。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Measure</command:verb>
		<command:noun>Command</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Measure-Command cmdlet 在内部运行脚本块或 cmdlet，并度量执行操作的时间，然后返回执行时间。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Measure-Command</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Expression</maml:name>
				<maml:description>
					<maml:para>指定被度量时间的表达式。将表达式放在大括号 ({}) 中。参数名称（“Expression”）为可选项。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定表示要度量的表达式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Expression</maml:name>
			<maml:description>
				<maml:para>指定被度量时间的表达式。将表达式放在大括号 ({}) 中。参数名称（“Expression”）为可选项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定表示要度量的表达式的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将对象传递给 Measure-Command。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.TimeSpan</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Measure-Command 返回表示结果的时间跨度对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          有关详细信息，请键入“Get-Help Measure-Command -detailed”。有关技术信息，请键入“Get-Help Measure-Command -full”。

 在为一个参数指定多个值时，请使用逗号分隔这些值。例如，“&lt;参数名&gt; &lt;值 1&gt;, &lt;值 2&gt;”。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Measure-Command { get-eventlog &quot;windows powershell&quot; }                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令度量运行一个获取 Windows PowerShell 事件日志中的事件的“get-eventlog”命令所用的时间。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
measure-command {get-childitem c:\windows -include *.txt -recurse}

Days              : 0
Hours             : 0
Minutes           : 0
Seconds           : 8
Milliseconds      : 618
Ticks             : 86182763
TotalDays         : 9.9748568287037E-05
TotalHours        : 0.00239396563888889
TotalMinutes      : 0.143637938333333
TotalSeconds      : 8.6182763
TotalMilliseconds : 8618.2763

C:\PS&gt;measure-command {get-childitem c:\windows -filter &quot;*.txt&quot; -recurse}

Days              : 0
Hours             : 0
Minutes           : 0
Seconds           : 1
Milliseconds      : 140
Ticks             : 11409189
TotalDays         : 1.32050798611111E-05
TotalHours        : 0.000316921916666667
TotalMinutes      : 0.019015315
TotalSeconds      : 1.1409189
TotalMilliseconds : 1140.9189                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令显示在 Windows PowerShell 命令中使用特定于提供程序的筛选器的值。第一个命令度量处理使用 Include 参数的递归 Get-ChildItem 命令所用的时间。第二个命令度量处理使用提供程序特定 Filter 参数的递归 Get-ChildItem 命令所用的时间。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113348</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Measure-Object
		</command:name>
		<maml:description>
			<maml:para>计算对象的数字属性以及字符串对象（如文本文件）中的字符数、单词数和行数。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Measure</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Measure-Object cmdlet 计算某些类型对象的属性值。Measure-Object 执行三种类型测量，具体取决于命令中的参数。
Measure-Object cmdlet 计算对象的属性值。它可以对对象计数并计算数字值的最小值、最大值、总和及平均值。对于文本对象，它可以计数并计算行数、单词数和字符数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Measure-Object</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Average</maml:name>
				<maml:description>
					<maml:para>显示指定属性的平均值。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Maximum</maml:name>
				<maml:description>
					<maml:para>显示指定属性的最大值。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Minimum</maml:name>
				<maml:description>
					<maml:para>显示指定属性的最小值。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Sum</maml:name>
				<maml:description>
					<maml:para>显示指定属性的值的总和。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要度量的一个或多个数字属性。默认值是对象的 Count (Length) 属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要度量的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Measure-Object</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Character</maml:name>
				<maml:description>
					<maml:para>计算输入对象中的字符数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>IgnoreWhiteSpace</maml:name>
				<maml:description>
					<maml:para>在单词计数和字符计数时忽略空白。默认情况下，不忽略空白。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Line</maml:name>
				<maml:description>
					<maml:para>计算输入对象中的行数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Word</maml:name>
				<maml:description>
					<maml:para>计算输入对象中的单词数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要度量的一个或多个数字属性。默认值是对象的 Count (Length) 属性。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要度量的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Average</maml:name>
			<maml:description>
				<maml:para>显示指定属性的平均值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Character</maml:name>
			<maml:description>
				<maml:para>计算输入对象中的字符数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>IgnoreWhiteSpace</maml:name>
			<maml:description>
				<maml:para>在单词计数和字符计数时忽略空白。默认情况下，不忽略空白。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要度量的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Line</maml:name>
			<maml:description>
				<maml:para>计算输入对象中的行数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Maximum</maml:name>
			<maml:description>
				<maml:para>显示指定属性的最大值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Minimum</maml:name>
			<maml:description>
				<maml:para>显示指定属性的最小值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要度量的一个或多个数字属性。默认值是对象的 Count (Length) 属性。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Count</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Sum</maml:name>
			<maml:description>
				<maml:para>显示指定属性的值的总和。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Word</maml:name>
			<maml:description>
				<maml:para>计算输入对象中的单词数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将对象传递给 Measure-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>GenericMeasureInfo 或 TextMeasureInfoObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | measure-object                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令对当前目录中的文件数和文件夹数进行计数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | measure-object -property length -minimum -maximum -average                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示当前目录中所有文件的最小、最大和总大小，以及目录中文件的平均大小。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-content C:\test.txt | measure-object -character -line -word                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示 Text.txt 文件中的字符数、单词数和行数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | measure-object -property workingset -minimum -maximum -average                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示计算机上进程的工作集的最小、最大和平均大小。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
import-csv d:\test\serviceyrs.csv | measure-object -property years -minimum -maximum -average                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令计算公司员工的平均服务年数。

ServiceYrs.csv 文件是一个包含员工编号以及每个员工的服务年数的 CSV 文件。该表中的第一行是标题行“EmpNo、Years”。

使用 Import-Csv 导入该文件时，结果是具有 EmpNo 和 Years 的注释属性的 PSCustomObject。可以使用 Measure-Object 计算这些属性的值，就像计算对象的任何其他属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | measure-object -property psiscontainer -max -sum -min -average

Count    : 126
Average  : 0.0634920634920635
Sum      : 8
Maximum  : 1
Minimum  : 0
Property : PSIsContainer
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明 Measure-Object 能够度量布尔值。在此示例中，它使用 PSIsContainer 布尔属性来度量当前目录中文件夹（相对于文件）的出现频率。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113349</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Alias
		</command:name>
		<maml:description>
			<maml:para>创建新别名。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>Alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>New-Alias cmdlet 在当前 Windows PowerShell 会话中创建新别名。退出会话或关闭 Windows PowerShell 之后，不保存通过使用 New-Alias 创建的别名。可以使用 Export-Alias cmdlet 将别名信息保存在文件中。以后可以使用 Import-Alias 检索所保存的别名信息。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定新别名。别名中可以使用任何字母数字字符，但第一个字符不能是数字。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>指定作为别名的 cmdlet 或命令元素的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>指定别名的说明。可以键入任何字符串。如果说明包括空格，请将其括在引号中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>如果设置，并且已经存在该命名别名，则其行为像 set-alias。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>设置别名的一个或多个可选属性。有效值包括：

-- None：不设置任何选项。（默认）

-- ReadOnly：除非使用 Force 参数，否则无法更改别名。

--  Constant：即使使用 Force 参数，也无法更改别名。

-- Private：别名只在 Scope 参数指定的作用域内可用。在所有其他作用域中它都不可见。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadOnly</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constant</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回一个表示新别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定新别名的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>指定别名的说明。可以键入任何字符串。如果说明包括空格，请将其括在引号中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>如果设置，并且已经存在该命名别名，则其行为像 set-alias。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定新别名。别名中可以使用任何字母数字字符，但第一个字符不能是数字。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>设置别名的一个或多个可选属性。有效值包括：

-- None：不设置任何选项。（默认）

-- ReadOnly：除非使用 Force 参数，否则无法更改别名。

--  Constant：即使使用 Force 参数，也无法更改别名。

-- Private：别名只在 Scope 参数指定的作用域内可用。在所有其他作用域中它都不可见。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回一个表示新别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定新别名的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>指定作为别名的 cmdlet 或命令元素的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 Passthru 参数，则 New-Alias 生成一个表示新别名的 System.Management.Automation.AliasInfo 对象。否则，此 cmdlet 将不产生任何输出。

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          若要创建新别名，请使用 Set-Alias 或 New-Alias。若要更改别名，请使用 Set-Alias。若要删除别名，请使用 Remove-Item。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-alias list get-childitem                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建名为“list”的别名，以表示 Get-ChildItem cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-alias -name w -value get-wmiobject -description &quot;quick wmi alias&quot; -option ReadOnly

C:\PS&gt; get-alias -name w | format-list *                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建名为“w”的别名，以表示 Get-WMIObject cmdlet。它为别名创建说明“quick wmi alias”，并使其为只读。该命令的最后一行使用 Get-Alias 获取新别名，并通过管道将它传递给 Format-List 以显示它的所有相关信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113352</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Event
		</command:name>
		<maml:description>
			<maml:para>创建新事件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>Event</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>New-Event cmdlet 创建新自定义事件。

可以使用自定义事件通知用户您程序中的状态更改以及您的程序可以检测到的任何更改，包括硬件或系统状况、应用程序状态、磁盘状态、网络状态或后台作业的完成。

每次引发自定义事件时，它们都会自动添加到会话中的事件队列，您无需订阅这些事件。但是，如果希望将事件转发到本地会话或指定一个操作来响应该事件，请使用 Register-EngineEvent cmdlet 来订阅自定义事件。

订阅自定义事件时，会向会话中添加事件订阅程序。如果通过使用 Unregister-Event cmdlet 取消事件订阅，将从会话中删除事件订阅程序和自定义事件。如果不订阅自定义事件，若要删除事件，必须更改程序状况或关闭 Windows PowerShell 会话。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>指定新事件的名称。此参数是必需的，并且在会话中必须是唯一的。

此参数的值显示在事件的 SourceIdentifier 属性中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Sender</maml:name>
				<maml:description>
					<maml:para>指定引发事件的对象。默认值是 Windows PowerShell 引擎。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="3">
				<maml:name>EventArguments</maml:name>
				<maml:description>
					<maml:para>指定包含事件选项的对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>MessageData</maml:name>
				<maml:description>
					<maml:para>指定与事件关联的其他数据。此参数的值显示在事件对象的 MessageData 属性中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="3">
			<maml:name>EventArguments</maml:name>
			<maml:description>
				<maml:para>指定包含事件选项的对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>MessageData</maml:name>
			<maml:description>
				<maml:para>指定与事件关联的其他数据。此参数的值显示在事件对象的 MessageData 属性中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Sender</maml:name>
			<maml:description>
				<maml:para>指定引发事件的对象。默认值是 Windows PowerShell 引擎。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>指定新事件的名称。此参数是必需的，并且在会话中必须是唯一的。

此参数的值显示在事件的 SourceIdentifier 属性中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSEventArgs</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          新自定义事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-event -sourceidentifier Timer -sender windows.timer  -messagedata &quot;Test&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Windows PowerShell 事件队列中创建一个新事件。它使用 Windows.Timer 对象来发送该事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function Enable-ProcessCreationEvent 
{ 
   $query = New-Object System.Management.WqlEventQuery &quot;__InstanceCreationEvent&quot;, (New-Object TimeSpan 0,0,1), &quot;TargetInstance isa 'Win32_Process'&quot; 
   $processWatcher = New-Object System.Management.ManagementEventWatcher $query 
   $identifier = &quot;WMI.ProcessCreated&quot; 

   Register-ObjectEvent $processWatcher &quot;EventArrived&quot; -SupportEvent $identifier -Action { 
       [void] (New-Event -sourceID &quot;PowerShell.ProcessCreated&quot; -Sender $args[0] -EventArguments $args[1].SourceEventArgs.NewEvent.TargetInstance) 
   } 
}                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例函数使用 New-Event cmdlet 引发一个事件来响应另一个事件。该命令使用 Register-ObjectEvent cmdlet 来订阅创建新进程时引发的 Windows Management Instrumentation (WMI) 事件。该命令使用该 cmdlet 的 Action 参数来调用 New-Event cmdlet，其将创建新事件。

因为 New-Event 引发的事件将自动添加到 Windows PowerShell 事件队列，所以您不需要注册该事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135234</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Object
		</command:name>
		<maml:description>
			<maml:para>创建 Microsoft .NET Framework 或 COM 对象的实例。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>New-Object cmdlet 创建 .NET Framework 或 COM 对象的实例。

可以指定 .NET Framework 类的类型，也可以指定 COM 对象的 ProgID。默认情况下，键入 .NET Framework 类的完全限定名称时，该 cmdlet 返回对该类的实例的引用。若要创建 COM 对象的实例，请使用 ComObject 参数并指定对象的 ProgID 作为它的值。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ComObject</maml:name>
				<maml:description>
					<maml:para>指定 COM 对象的编程标识符 (ProgID)。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Strict</maml:name>
				<maml:description>
					<maml:para>指定如果试图创建的 COM 对象使用互操作程序集则应当引发的错误。这使您能够将实际 COM 对象与具有 COM 可调用包装的 .NET Framework 对象区分开来。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>设置属性值，并调用新对象的方法。

输入一个哈希表，其中的键是属性或方法的名称，值是属性值或方法参数。New-Object 创建对象并设置每个属性值，并按方法在哈希表中的出现顺序调用每个方法。

如果新对象是从 PSObject 类派生的，并且您指定该对象中不存在的一个属性，则 New-Object 将该指定属性作为 NoteProperty 添加到该对象中。如果该对象不是 PSObject，则命令将生成一个非终止错误。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>TypeName</maml:name>
				<maml:description>
					<maml:para>指定 NET Framework 类的完全限定名称。不能同时指定 TypeName 参数和 ComObject 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>ArgumentList</maml:name>
				<maml:description>
					<maml:para>指定传递给 .NET Framework 类的构造函数的参数列表。使用逗号 (,) 分隔列表中的元素。ArgumentList 的别名为 Args。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>设置属性值，并调用新对象的方法。

输入一个哈希表，其中的键是属性或方法的名称，值是属性值或方法参数。New-Object 创建对象并设置每个属性值，并按方法在哈希表中的出现顺序调用每个方法。

如果新对象是从 PSObject 类派生的，并且您指定该对象中不存在的一个属性，则 New-Object 将该指定属性作为 NoteProperty 添加到该对象中。如果该对象不是 PSObject，则命令将生成一个非终止错误。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>ArgumentList</maml:name>
			<maml:description>
				<maml:para>指定传递给 .NET Framework 类的构造函数的参数列表。使用逗号 (,) 分隔列表中的元素。ArgumentList 的别名为 Args。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ComObject</maml:name>
			<maml:description>
				<maml:para>指定 COM 对象的编程标识符 (ProgID)。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>设置属性值，并调用新对象的方法。

输入一个哈希表，其中的键是属性或方法的名称，值是属性值或方法参数。New-Object 创建对象并设置每个属性值，并按方法在哈希表中的出现顺序调用每个方法。

如果新对象是从 PSObject 类派生的，并且您指定该对象中不存在的一个属性，则 New-Object 将该指定属性作为 NoteProperty 添加到该对象中。如果该对象不是 PSObject，则命令将生成一个非终止错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Strict</maml:name>
			<maml:description>
				<maml:para>指定如果试图创建的 COM 对象使用互操作程序集则应当引发的错误。这使您能够将实际 COM 对象与具有 COM 可调用包装的 .NET Framework 对象区分开来。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>TypeName</maml:name>
			<maml:description>
				<maml:para>指定 NET Framework 类的完全限定名称。不能同时指定 TypeName 参数和 ComObject 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					New-Object 返回创建的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          New-Object 提供 VBScript CreateObject 函数的最常用功能。像 VBScript 中 Set objShell = CreateObject(&quot;Shell.Application&quot;) 这样的语句可以转换成 Windows PowerShell 中的 $objShell = new-object -comobject &quot;Shell.Application&quot;。

New-Object 通过使您更容易从命令行和在脚本内处理 .NET Framework 对象，扩展了在 Windows 脚本宿主环境中可用的功能。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-object -typename System.Version -argumentlist &quot;1.2.3.4&quot; 

Major  Minor  Build  Revision
-----  -----  -----  --------
1      2      3      4                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用字符串“1.2.3.4”作为构造函数来创建 System.Version 对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$ie = new-object -comobject InternetExplorer.Application -property @{navigate2=&quot;www.microsoft.com&quot;; visible = $true}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建表示 Internet Explorer 应用程序的 COM 对象的实例。它使用 Property 参数来调用 Navigate2 方法，并将该对象的 Visible 属性设置为 $true，使应用程序可见。

此命令与下列命令等效：

$ie = new-object -comobject InternetExplorer.Application
$ie.navigate2(&quot;www.microsoft.com&quot;)
$ie.visible = $true</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a=new-object -comobject Word.Application -strict -property @{visible=$true}

New-Object : The object written to the pipeline is an instance of the type
&quot;Microsoft.Office.Interop.Word.ApplicationClass&quot; from the component's prima
ry interop assembly. If this type exposes different members than the IDispa
tch members, scripts written to work with this object might not work if the
 primary interop assembly is not installed.
At line:1 char:14
+ $a=New-Object  &lt;&lt;&lt;&lt; -COM Word.Application -Strict; $a.visible=$true                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示：如果所创建的 COM 对象使用互操作程序集，则指定 Strict 参数将使 New-Object cmdlet 生成非终止错误。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$objshell = new-object -comobject &quot;Shell.Application&quot;

C:\PS&gt; $objshell | get-member

C:\PS&gt; $objshell.ToggleDesktop()                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>该命令使用 ComObject 参数创建 ProgID 为“Shell.Application”的 COM 对象。它将生成的对象存储在 $objShell 变量中。

第二个命令通过管道将 $objShell 变量传递到 Get-Member cmdlet，该 cmdlet 显示 COM 对象的属性和方法。

第三个命令调用该对象的 ToggleDesktop 方法，将桌面上打开的窗口最小化。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113355</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-TimeSpan
		</command:name>
		<maml:description>
			<maml:para>创建 TimeSpan 对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>TimeSpan</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>New-TimeSpan cmdlet 创建表示时间间隔的 TimeSpan 对象。可以使用 TimeSpan 对象对 DateTime 对象进行时间的加或减操作。

如果不使用参数，则“New-Timespan”命令返回表示零时间间隔的时间跨度对象。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-TimeSpan</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Start</maml:name>
				<maml:description>
					<maml:para>指示时间跨度的开始。输入一个表示日期和时间的字符串（如“3/15/09”）或一个 DateTime 对象（如 Get-Date 命令返回的对象）。

默认值为当前日期和时间。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>End</maml:name>
				<maml:description>
					<maml:para>指示时间跨度的结束。默认值为当前日期和时间。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-TimeSpan</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Days</maml:name>
				<maml:description>
					<maml:para>指示时间跨度中的天数。默认值为 0。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Hours</maml:name>
				<maml:description>
					<maml:para>指示时间跨度中的小时数。默认值为 0。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Minutes</maml:name>
				<maml:description>
					<maml:para>指示时间跨度中的分钟数。默认值为 0。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Seconds</maml:name>
				<maml:description>
					<maml:para>指示时间跨度的长度，以秒为单位。默认值为 0。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Days</maml:name>
			<maml:description>
				<maml:para>指示时间跨度中的天数。默认值为 0。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>End</maml:name>
			<maml:description>
				<maml:para>指示时间跨度的结束。默认值为当前日期和时间。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>当前日期和时间</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Hours</maml:name>
			<maml:description>
				<maml:para>指示时间跨度中的小时数。默认值为 0。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Minutes</maml:name>
			<maml:description>
				<maml:para>指示时间跨度中的分钟数。默认值为 0。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Seconds</maml:name>
			<maml:description>
				<maml:para>指示时间跨度的长度，以秒为单位。默认值为 0。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Start</maml:name>
			<maml:description>
				<maml:para>指示时间跨度的开始。输入一个表示日期和时间的字符串（如“3/15/09”）或一个 DateTime 对象（如 Get-Date 命令返回的对象）。

默认值为当前日期和时间。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>当前日期和时间</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.DateTime</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将表示开始时间的 DateTime 对象传递给 New-TimeSpan。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Timespan</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					New-TimeSpan 返回表示时间跨度的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$timespan = new-timespan -hour 1 -minute 25                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建持续时间为 1 小时 25 分钟的 TimeSpan 对象，并将它存储在名为 $timespan 的变量中。它显示 TimeSpan 对象的表示形式。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-timespan -end (get-date -year 2010 -month 1 -day 1)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例创建新的 TimeSpan 对象，该对象表示从命令运行时到 2010 年 1 月 1 日之间的时间间隔。

此命令不需要 Start 参数，因为 Start 参数的默认值是当前日期和时间。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$90days = new-timespan -days 90

C:\PS&gt; (get-date) + $90days                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令返回当前日期之后 90 天时的日期。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113360</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Date</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Date</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Variable
		</command:name>
		<maml:description>
			<maml:para>创建新变量</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>New</command:verb>
		<command:noun>Variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>New-Variable cmdlet 在 Windows PowerShell 中创建新变量。可以在创建该变量时向其赋值，也可以在创建该变量后向其赋值或更改值。

可以使用 New-Variable 的参数来设置变量的属性（如那些创建只读或常量变量的属性），设置变量的作用域以及确定变量是公共的还是专用的。

通常，通过键入变量名称及其值来创建新变量（如“$var = 3”），但可以使用 New-Variable cmdlet 来使用它的参数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Variable</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定新变量的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>指定变量的初始值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>指定变量的说明。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许您创建名称与现有只读变量相同的新变量。

默认情况下，可以覆盖某个变量，除非该变量的选项值为“ReadOnly”或“Constant”。有关详细信息，请参阅 Option 参数。
</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>设置新变量的 Options 属性的值。

有效值包括：

-- None：不设置任何选项。（“None”为默认值。）

-- ReadOnly：除非使用 Force 参数，否则无法更改变量的值。您可以使用 Remove-Variable 来删除该变量。

-- Constant：无法删除变量，也无法更改其属性。“Constant”仅在您创建别名时才可用。不能将现有变量的选项更改为“Constant”。

-- Private：变量只在 Scope 参数指定的作用域内可用。它由子作用域继承。（此值与 Visibility 参数的“Private”值无关。）

-- AllScope：变量将复制到创建的所有新作用域中。

若要查看变量的 Options 属性，请键入“get-variable| format-table -property name, options -autosize”。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadOnly</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constant</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示新变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>确定新变量的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Visibility</maml:name>
				<maml:description>
					<maml:para>确定变量在创建它的会话之外是否可见。此参数供传递给其他用户的脚本和命令使用。

有效值包括：

-- Public：变量可见。（“Public”为默认值。）
-- Private：变量不可见。

当变量为专用时，它不会出现在变量列表（如 Get-Variable 返回的变量列表）中，也不会出现在 Variable: 驱动器的显示内容中。读取或更改专用变量值的命令会返回错误。但是，用户可以运行使用专用变量的命令，前提是这些命令是在定义该变量的会话中写入的。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Public</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>指定变量的说明。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许您创建名称与现有只读变量相同的新变量。

默认情况下，可以覆盖某个变量，除非该变量的选项值为“ReadOnly”或“Constant”。有关详细信息，请参阅 Option 参数。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定新变量的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>设置新变量的 Options 属性的值。

有效值包括：

-- None：不设置任何选项。（“None”为默认值。）

-- ReadOnly：除非使用 Force 参数，否则无法更改变量的值。您可以使用 Remove-Variable 来删除该变量。

-- Constant：无法删除变量，也无法更改其属性。“Constant”仅在您创建别名时才可用。不能将现有变量的选项更改为“Constant”。

-- Private：变量只在 Scope 参数指定的作用域内可用。它由子作用域继承。（此值与 Visibility 参数的“Private”值无关。）

-- AllScope：变量将复制到创建的所有新作用域中。

若要查看变量的 Options 属性，请键入“get-variable| format-table -property name, options -autosize”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示新变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>确定新变量的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>指定变量的初始值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Visibility</maml:name>
			<maml:description>
				<maml:para>确定变量在创建它的会话之外是否可见。此参数供传递给其他用户的脚本和命令使用。

有效值包括：

-- Public：变量可见。（“Public”为默认值。）
-- Private：变量不可见。

当变量为专用时，它不会出现在变量列表（如 Get-Variable 返回的变量列表）中，也不会出现在 Variable: 驱动器的显示内容中。读取或更改专用变量值的命令会返回错误。但是，用户可以运行使用专用变量的命令，前提是这些命令是在定义该变量的会话中写入的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SessionStateEntryVisibility</command:parameterValue>
			<dev:type>
				<maml:name>SessionStateEntryVisibility</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Public</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以将值通过管道传递给 New-Variable。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.PSVariable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 New-Variable 生成一个表示新变量的 System.Management.Automation.PSVariable 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-variable days                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建名为“days”的新变量。执行该命令后此变量不会立即有值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-variable zipcode -value 98033                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建名为“zipcode”的变量，并为其赋值“98033”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-variable -name max -value 256 -option readonly

new-variable -name max -value 1024

new-variable -name max -value 1024 -force

C:\PS&gt; new-variable -name max -value 256 -option readonly

C:\PS&gt; new-variable -name max -value 1024
New-Variable : A variable with name 'max' already exists.
At line:1 char:13
+ new-variable &lt;&lt;&lt;&lt;  -name max -value 1024

C:\PS&gt; new-variable -name max -value 1024 -force                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 New-Variable 的 ReadOnly 选项保护变量免于被覆盖。

第一个命令创建名为 Max 的新变量，并为其赋值“256”。它使用值为 ReadOnly 的 Option 参数。

第二个命令尝试创建具有相同名称的另一个变量。此命令将返回错误，因为对该变量设置了只读选项。

第三个命令使用 Force 参数覆盖该变量上的只读保护。在此例中，创建具有相同名称的新变量的命令运行成功。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-variable -name counter -visibility private

#Effect of private variable in a module.

C:\PS&gt; get-variable c*

Name                           Value
----                           -----
Culture                        en-US
ConsoleFileName
ConfirmPreference              High
CommandLineParameters          {}

C:\PS&gt; $counter
&quot;Cannot access the variable '$counter' because it is a private variable&quot;

C:\PS&gt; Get-Counter
Name         Value
----         -----
Counter1     3.1415
...
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示了模块中专用变量的行为。该模块包含 Get-Counter cmdlet，该 cmdlet 有一个名为“Counter”的专用变量。该命令使用值为“Private”的 Visibility 参数来创建变量。

示例输出显示了专用变量的行为。加载了该模块的用户无法查看或更改 Counter 变量的值，但可以通过该模块中的命令读取和更改 Counter 变量。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113361</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Default
		</command:name>
		<maml:description>
			<maml:para>将输出发送到默认的格式化程序和默认的输出 cmdlet。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>Default</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-Default cmdlet 将输出发送到默认格式化程序和默认的输出 cmdlet。此 cmdlet 对 Windows PowerShell 命令的格式设置或输出没有影响。它是一个占位符，用于编写您自己的 Out-Default 函数或 cmdlet。
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Default</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113362</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-File
		</command:name>
		<maml:description>
			<maml:para>将输出发送到文件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>File</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-File cmdlet 将输出发送到文件。如果需要使用它的参数，可以使用此 cmdlet 而不是重定向运算符 (&gt;)。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-File</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>指定输出文件的路径。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>指定在文件中使用的字符编码的类型。有效值是“Unicode”、“UTF7”、“UTF8”、“UTF32”、“ASCII”、“BigEndianUnicode”、“Default”和“OEM”。默认值为“Unicode”。

“Default”使用系统当前 ANSI 代码页的编码。

“OEM”使用操作系统的当前原始设备制造商代码页标识符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Append</maml:name>
				<maml:description>
					<maml:para>将输出添加到现有文件的末尾，而不替换文件内容。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 覆盖现有只读文件。即使使用 Force 参数，该 cmdlet 也无法覆盖安全限制。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要写入文件的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoClobber</maml:name>
				<maml:description>
					<maml:para>将不会覆盖现有文件（替换其内容）。默认情况下，如果指定的路径中存在同名文件，则 Out-File 将覆盖该文件，而不会发出警告。如果同时使用了 Append 和 NoClobber，则输出内容将追加到现有文件中。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Width</maml:name>
				<maml:description>
					<maml:para>指定输出中每一行的字符数。将截断任何额外字符，不换行。如果省略此参数，则由主机特征确定宽度。Windows PowerShell 控制台的默认值是 80（字符）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Append</maml:name>
			<maml:description>
				<maml:para>将输出添加到现有文件的末尾，而不替换文件内容。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>指定在文件中使用的字符编码的类型。有效值是“Unicode”、“UTF7”、“UTF8”、“UTF32”、“ASCII”、“BigEndianUnicode”、“Default”和“OEM”。默认值为“Unicode”。

“Default”使用系统当前 ANSI 代码页的编码。

“OEM”使用操作系统的当前原始设备制造商代码页标识符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>FilePath</maml:name>
			<maml:description>
				<maml:para>指定输出文件的路径。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 覆盖现有只读文件。即使使用 Force 参数，该 cmdlet 也无法覆盖安全限制。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要写入文件的对象。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoClobber</maml:name>
			<maml:description>
				<maml:para>将不会覆盖现有文件（替换其内容）。默认情况下，如果指定的路径中存在同名文件，则 Out-File 将覆盖该文件，而不会发出警告。如果同时使用了 Append 和 NoClobber，则输出内容将追加到现有文件中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Width</maml:name>
			<maml:description>
				<maml:para>指定输出中每一行的字符数。将截断任何额外字符，不换行。如果省略此参数，则由主机特征确定宽度。Windows PowerShell 控制台的默认值是 80（字符）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Out-File。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-File 不生成任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          输出 cmdlet 不格式化对象；它们只是生成对象的显示信息，并将它们发送到指定的显示目标。如果将未格式化的对象发送给输出 cmdlet，该 cmdlet 会为它生成显示信息，然后将它发送给格式化 cmdlet。

输出 cmdlet 没有用于提供名称和文件路径的参数。若要将数据发送到含有 Out 动词（输出 cmdlet）的 cmdlet，请使用管道运算符 (|) 将 Windows PowerShell 命令的输出发送到该 cmdlet。还可以将数据存储在变量中，并使用 InputObject 参数将数据传递给 cmdlet。有关帮助信息，请参阅相关示例。

Out-File 发送数据，但不发出任何输出对象。如果将 Out-File 的输出通过管道传递给 Get-Member，则 Get-Member 将报告尚未指定对象。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | out-file -filepath C:\Test1\process.txt                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将计算机上的进程列表发送到 Process.txt 文件。如果该文件不存在，则 Out-File 将创建该文件。因为 FilePath 参数的名称是可选的，所以可以将其省略，然后提交等效命令“get-process | outfile C:\Test1\process.txt”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | out-file C:\Test1\process.txt -noclobber

Out-File : File C:\Test1\process.txt already exists and NoClobber was specified.
At line:1 char:23
+ get-process | out-file  &lt;&lt;&lt;&lt; process.txt -noclobber                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令还会将进程列表发送到 Process.txt 文件，但它使用 NoClobber 参数，该参数可使现有文件不会被覆盖。输出显示对现有文件使用 NoClobber 时出现的错误消息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-process

C:\PS&gt; out-file -filepath C:\Test1\process.txt -inputobject $a -encoding ASCII -width 50                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将计算机上的进程列表发送到 Process.txt 文件。文本以 ASCII 格式编码，从而 Findstr 和 Grep 等搜索程序可以读取该文本。默认情况下，Out-File 使用 Unicode 格式。

第一个命令获取进程的列表，并将它们存储在 $a 变量中。第二个命令使用 Out-File cmdlet 将列表发送到 Process.txt 文件。

该命令使用 InputObject 参数指定输入来自 $a 变量。它使用 Encoding 参数将输出转换为 ASCII 格式。它使用 Width 参数将文件中每一行的长度限制为 50 个字符以内。由于输出行将在第 50 个字符处被截断，因此将省略进程表中的最右列。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-location hklm:\software

c:\PS&gt;get-acl mycompany\mykey | out-file -filepath c:\ps\acl.txt

c:\PS&gt;get-acl mycompany\mykey | out-file -filepath filesystem::acl.txt                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令演示当您不在 FileSystem 驱动器中时如何使用 Out-File cmdlet。

第一个命令将当前位置设置为 HKLM:\Software 注册表项。

第二和第三个命令的效果相同。它们使用 Get-Acl cmdlet 获取 MyKey 注册表子项 (HKLM\Software\MyCompany\MyKey) 的安全描述符。管道运算符将结果传递给 Out-File cmdlet，后者将它发送到 Acl.txt 文件。

因为 Windows PowerShell Registry 提供程序不支持 Out-File，所以必须在 FilePath 参数的值中指定文件系统驱动器名称（例如“c:”），或指定提供程序的名称并且后跟两个冒号（例如“FileSystem::”）。第二和第三个命令演示这些方法。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113363</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-GridView
		</command:name>
		<maml:description>
			<maml:para>将输出发送到单独窗口中的交互表。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>GridView</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-GridView cmdlet 将命令的输出发送到网格视图窗口，在该窗口中输出显示在一个交互表中。此功能需要 Microsoft .NET Framework 3.5 Service Pack 1。

可以使用该表的以下功能来检查您的数据：

-- 隐藏、显示和重新排序列：若要隐藏、显示或重新排序某一列，请右键单击列标题，然后单击“选择列”。

-- 排序。若要对数据排序，请单击列标题。再次单击从升序切换到降序。

-- 快速筛选。使用窗口顶部的“筛选”框在表中搜索文本。可以在特定列中搜索文本，搜索文字以及搜索多个单词。

-- 条件筛选。使用“添加条件”下拉菜单来创建数据筛选规则。这对于非常大的数据集（如事件日志）非常有用。

-- 复制和粘贴。若要从 Out-GridView 复制多行数据，请按 Ctrl+C（复制）。可以将该数据粘贴到任何文本或电子表格程序。

若要获得这些功能的使用说明，请键入“get-help out-gridview -full”，然后在“注释”部分查看“如何使用网格视图窗口功能”。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-GridView</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>接受 Out-GridView 的输入。

如果使用 InputObject 参数将对象集合（多个对象）发送到 Out-GridView，则 Out-GridView 将该集合视为一个集合对象，显示一行来表示该集合。若要显示该集合中的每个对象，请使用管道运算符 (|) 将对象发送到 Out-GridView。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Title</maml:name>
				<maml:description>
					<maml:para>指定出现在 Out-GridView 窗口标题栏中的文本。

默认情况下，标题栏显示调用 Out-GridView 的命令。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>接受 Out-GridView 的输入。

如果使用 InputObject 参数将对象集合（多个对象）发送到 Out-GridView，则 Out-GridView 将该集合视为一个集合对象，显示一行来表示该集合。若要显示该集合中的每个对象，请使用管道运算符 (|) 将对象发送到 Out-GridView。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Title</maml:name>
			<maml:description>
				<maml:para>指定出现在 Out-GridView 窗口标题栏中的文本。

默认情况下，标题栏显示调用 Out-GridView 的命令。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>当前命令</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以将任何对象发送到 Out-GridView。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-GridView 不返回任何对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          OUT-GRIDVIEW 的注释
----------------------

可以从 Microsoft 下载中心下载 Microsoft .NET Framework 3.5 Service Pack 1。

因为此 cmdlet 需要用户界面，所以它无法在 Windows Server 的 Server Core 安装上运行。

不能使用远程命令来打开远程计算机上的网格视图窗口。

发送的命令输出不能进行预先格式化，例如通过使用 Format-Table 或 Format-Wide cmdlet 进行格式化。若要选择属性，请使用 Select-Object cmdlet。

在网格视图窗口中，可能无法对来自远程命令的反序列化输出正确进行格式设置。


OUT-GRIDVIEW 的键盘快捷方式
-----------------------------------

通过使用下列键盘快捷方式，可以快速执行许多任务。

使用此键：     执行此操作：
-------------     ----------------------------------------------------------------
Tab               将光标从“筛选”框移动到表的“添加条件”菜单，然后再返回。
向上键          上移一行。将移至列标题。
向下键        下移一行。
向左键        在列标题行中，左移一列。
向右键       在列标题行中，右移一列。
上下文菜单键         在列标题行中显示“选择列”选项。
Enter 或空格键 在列标题行中，对列数据排序（切换 A-Z、Z-A）。


如何使用网格视图窗口功能
----------------------------------------
以下主题说明如何使用 Out-GridView 显示的窗口的功能。

如何隐藏、显示和重新排序列
--------------------------------------
隐藏或显示列：

1. 在列标题中的任何位置单击右键，然后单击“选择列”。

2. 在“选择列”对话框中，使用箭头键将“选定的列”中的列移动到“可用的列”框。只有“选定的列”框中的列才显示在网格视图窗口中。


对列重新排序：

-- 将列拖放到所需位置上。

- 或者 -

1. 在列标题中的任何位置单击右键，然后单击“选择列”。

2. 在“选择列”对话框中，使用“向上移动”和“向下移动”按钮对列重新排序。列表顶部的列显示在网格视图窗口中列表底部的列的左侧。


如何对表数据排序
----------------------
-- 若要对数据排序，请单击列标题。
-- 若要更改排序顺序，请再次单击该列标题。每次单击同一标题时，排序顺序都在升序和降序之间切换。当前顺序由列标题中的三角形来指示。


如何选择表数据
------------------------ 
-- 若要选择行，请单击该行或使用向上或向下键导航到该行。
-- 若要选择所有行（除了标题行），请按 Ctrl+A。
-- 若要选择连续行，请在单击这些行或使用箭头键时按住 Shift 键。
-- 若要选择非连续行，请按住 Ctrl 键并单击某行将其选中。
不能选择列，也不能选择整个列标题行。


如何复制行
----------------------
-- 若要复制表中的一个或多个行，请选择该行，然后按 Ctrl+C。
可以将该数据粘贴到任何文本或电子表格程序。无法复制列或行的一部分，并且无法复制列标题行。


如何在表中搜索（快速筛选）
---------------------------------
使用“筛选”框搜索表中的数据。当您在该框中键入文本时，将仅在表中显示包括所键入文本的项目。

-- 搜索文本。若要在表中搜索文本，请在“筛选”框中键入要查找的文本。

-- 搜索多个单词。若要在表中搜索多个单词，请键入单词，使用空格来分隔。Out-GridView 显示包括所有单词（逻辑 AND）的行。

-- 搜索文字短语。若要搜索包括空格或特殊字符的短语，请使用引号将该短语括起来。Out-GridView 显示包括该短语的精确匹配项的行。

-- 在列中搜索。若要在一个或多个列中搜索文本，请使用以下格式：

 &lt;column&gt;:&lt;text&gt; [&lt;column&gt;:&lt;text&gt;] ...

    例如，若要在 DisplayName 列中查找“Net”，请在“筛选”框中键入：

 displayname:net

    若要在 DisplayName 和 Name 列中查找包含“Net”的行，请在“筛选”框中键入：

 displayname:net  name:net

-- 禁用搜索。若要重新显示整个表，请单击“筛选”框右上角的红色 X 按钮或删除“筛选”框中的文本。


使用条件来筛选表
--------------------------------
可以使用规则或“条件”来确定要在表中显示的项。项仅在满足设立的所有条件时才会显示。可用的条件由网格视图窗口中显示的对象的属性以及这些属性的 .NET Framework 类型来确定。

每个条件具有以下格式：
&lt;列&gt; &lt;运算符&gt; &lt;值&gt;

不同属性的条件通过 AND 来连接。相同属性的条件通过 OR 来连接。无法更改逻辑连接符。

条件仅影响显示。它不会从表中删除项目。

如何添加条件
---------------------------
1. 若要显示“添加条件”菜单按钮，请在窗口的右上角单击“展开”箭头。
2. 单击“添加条件”菜单按钮。
3. 单击以选择列（属性）。可以选择一个或多个属性。
4. 选择完属性后，单击“添加”按钮。
5. 若要取消添加，请单击“取消”。
6. 若要添加更多条件，请再次单击“添加条件”按钮。

如何编辑条件
--------------------
-- 若要更改运算符，请单击蓝色运算符值，然后单击以从
   下拉列表中选择其他运算符。
-- 若要输入或更改值，请在值框中键入一个值。如果输入的值无效，则会出现一个圆形 X 图标。若要删除该图标，请更改该值。
-- 若要创建 OR 语句，请添加具有同一属性的条件。

如何删除条件
-------------------------
-- 若要删除选定的条件，请单击每个条件旁边的红色 X。
-- 若要删除所有条件，请单击“全部清除”按钮。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取本地计算机上运行的进程并将它们发送到网格视图窗口。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$p = get-process

C:\PS&gt; $p | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令也获取本地计算机上运行的进程并将它们发送到网格视图窗口。

第一个命令使用 Get-Process 命令获取计算机上的进程，然后将进程对象保存在 $p 变量中。

第二个命令使用管道运算符将 $p 变量发送至 Out-GridView。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | select-object -property name, workingset, peakworkingset | sort-object -property workingset -desc | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在网格视图窗口中显示格式化的表。

它使用 Get-Process cmdlet 获取计算机上的进程。

然后，它使用管道运算符 (|) 将进程对象发送到 Select-Object cmdlet。该命令使用 Select-Object 的 Property 参数选择要在表中显示的 Name、WorkingSet 和 PeakWorkingSet 属性。

另一个管道运算符将筛选的对象发送到 Sort-Object cmdlet，该 cmdlet 按 WorkingSet 属性的值对这些对象进行降序排序。


该命令的最后部分使用管道运算符 (|) 将格式化的表发送到 Out-GridView。

现在可以使用网格视图的功能来对数据进行搜索、排序和筛选。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
($a = get-childitem -path $pshome -recurse) | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将其输出保存在一个变量中并将该输出发送到 Out-GridView。

该命令使用 Get-ChildItem cmdlet 获取 Windows PowerShell 安装目录及其子目录中的文件。安装目录的路径保存在 $pshome 自动变量中。

该命令使用赋值运算符 (=) 将输出保存在 $a 变量中，使用管道运算符 (|) 将输出发送到 Out-GridView。
命令中的括号确定操作的顺序。结果，Get-ChildItem 命令的输出先保存在 $a 变量中，然后发送到 Out-GridView。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process -computername Server01| ogv -title &quot;Processes - Server01&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在网格视图窗口中显示 Server01 计算机上运行的进程。

该命令使用“ogv”（即 Out-GridView cmdlet 的内置别名），并使用 Title 参数指定窗口标题。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
invoke-command -ComputerName S1, S2, S3 -scriptblock {get-culture} | out-gridview                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明将从远程计算机收集的数据发送到 Out-GridView cmdlet 的正确格式。

该命令使用 Invoke-Command cmdlet 在三台远程计算机上运行 Get-Culture 命令。它使用管道运算符将返回的数据发送至 Out-GridView cmdlet。

请注意，包含远程运行的命令的脚本块不包括 Out-GridView 命令。如果该脚本块包括该命令，则当该脚本块尝试在每台远程计算机上打开网格视图窗口时，该命令将会失败。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113364</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Host
		</command:name>
		<maml:description>
			<maml:para>将输出发送到命令行。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>Host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-Host cmdlet 将输出发送到 Windows PowerShell 主机以进行显示。主机将在命令行显示输出。因为 Out-Host 是默认设置，所以除非要使用其参数来更改显示，否则不需要指定它。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定写入控制台的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Paging</maml:name>
				<maml:description>
					<maml:para>输出每次显示一页，在显示其余页之前会等待用户输入，这很像传统的“more”命令。默认情况下，所有输出均以单页显示。页大小由主机的特征确定。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定写入控制台的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Paging</maml:name>
			<maml:description>
				<maml:para>输出每次显示一页，在显示其余页之前会等待用户输入，这很像传统的“more”命令。默认情况下，所有输出均以单页显示。页大小由主机的特征确定。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Out-Host。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-Host 不生成任何输出。但是，主机可能显示 Out-Host 向其发送的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Out-Host 的内置别名“oh”来对其进行引用。有关详细信息，请参阅 about_Aliases。

包含 Out 动词的 cmdlet（输出 cmdlet）不格式化对象；它们只呈现对象，并将对象发送到指定的显示目标。如果将未格式化的对象发送给输出 cmdlet，该 cmdlet 会为它生成显示信息，然后将它发送给格式化 cmdlet。

输出 cmdlet 没有用于提供名称和文件路径的参数。若要向某个输出 cmdlet 发送数据，请使用管道运算符 (|) 将 Windows PowerShell 命令的输出发送到该 cmdlet。还可以将数据存储在变量中，并使用 InputObject 参数将数据传递给 cmdlet。有关帮助信息，请参阅相关示例。

Out-Host 发送数据，但不发出任何输出对象。如果将 Out-Host 的输出通过管道传递给 Get-Member，则 Get-Member 将报告尚未指定对象。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | out-host -paging                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令每次一页地显示系统中的进程。它使用 Get-Process 命令获取系统中的进程。管道运算符 (|) 将结果发送给 Out-Host，后者将它们显示在控制台上。Paging 参数使数据每次显示一页。

内置在 Windows PowerShell 中的 Help 函数使用相同的命令格式。该函数从 Get-Help 获取数据，然后使用 Out-Host 的 Paging 参数使数据每次显示一页，其命令格式如下：get-help $args[0] | out-host -paging。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-history

C:\PS&gt;out-host -InputObject $a                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令在命令行显示会话历史记录。第一条命令使用 Get-History cmdlet 获取会话历史记录，然后将历史记录存储在 $a 变量中。第二条命令使用 Out-Host 显示 $a 变量的内容，并使用 InputObject 参数将变量指定为 Out-Host。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113365</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Null
		</command:name>
		<maml:description>
			<maml:para>删除输出，不将其发送到控制台。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>Null</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-Null cmdlet 将输出发送到 NULL，实际上是删除输出。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Null</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定已发送到 null（删除）的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定已发送到 null（删除）的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Out-Null。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-Null 不生成任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          包含 Out 动词的 cmdlet（输出 cmdlet）没有用于提供名称或文件路径的参数。若要向某个输出 cmdlet 发送数据，请使用管道运算符 (|) 将 Windows PowerShell 命令的输出发送到该 cmdlet。还可以将数据存储在变量中，并使用 InputObject 参数将数据传递给 cmdlet。有关详细信息，请参阅示例。

Out-Null 不返回任何输出对象。如果将 Out-Null 的输出通过管道传递给 Get-Member，则 Get-Member 将报告尚未指定对象。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | out-null                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取本地目录中的项，但随后将其丢弃，而不是通过管道传递或在命令行显示它们。这在丢弃不需要的输出时非常有用。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113366</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Printer
		</command:name>
		<maml:description>
			<maml:para>将输出发送到打印机。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>Printer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-Printer cmdlet 将输出发送到默认打印机或备用打印机（如果指定）。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Printer</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定备用打印机。参数名（“Name”）为可选项。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要发送到打印机的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要发送到打印机的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定备用打印机。参数名（“Name”）为可选项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Out-Printer。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-Printer 不返回任何对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Out-Printer 的内置别名“lp”来对其进行引用。有关详细信息，请参阅 about_Aliases。

包含 Out 动词的 cmdlet（输出 cmdlet）不格式化对象；它们只呈现对象，并将对象发送到指定的显示目标。如果将未格式化的对象发送给输出 cmdlet，该 cmdlet 会为它生成显示信息，然后将它发送给格式化 cmdlet。

输出 cmdlet 没有用于提供名称和文件路径的参数。若要向某个输出 cmdlet 发送数据，请使用管道运算符 (|) 将 Windows PowerShell 命令的输出发送到该 cmdlet。还可以将数据存储在变量中，并使用 InputObject 参数将数据传递给 cmdlet。有关详细信息，请参阅示例。

Out-Printer 发送数据，但不发出任何输出对象。如果将 Out-Printer 的输出通过管道传递给 Get-Member，则 Get-Member 将报告尚未指定对象。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-content $pshome\about_signing.help.txt | Out-Printer                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 about_Signing 帮助主题的内容打印到默认打印机。此示例演示如何在 Out-Printer 没有 Path 参数的情况下打印文件。

该命令使用 Get-Content cmdlet 获取帮助主题的内容。路径包括 $pshome，这是一个内置变量，用于存储 Windows PowerShell 的安装目录。管道运算符 (|) 将结果传递给 Out-Printer，后者将它发送到默认打印机。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;Hello, World&quot; | out-printer -name &quot;\\Server01\Prt-6B Color&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令用 Server01 上的“Prt-6B Color”打印机打印“Hello, World”。此命令使用 Name 参数指定备用打印机。因为参数名称可选，所以可以省略该参数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$h = get-help -full get-wmiobject

C:\PS&gt; out-printer -inputobject $h                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令打印 Get-WmiObject 的完整版本的帮助主题。第一个命令使用 Get-Help cmdlet 获取 Get-WmiObject 的完整版本的帮助主题，并将它存储在 $h 变量中。第二个命令将内容发送到默认打印机。它使用 InputObject 参数将 $h 变量的值传递给 Out-Printer。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113367</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-String
		</command:name>
		<maml:description>
			<maml:para>将对象作为一列字符串发送到主机。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Out</command:verb>
		<command:noun>String</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Out-String cmdlet 将 Windows PowerShell 管理的对象转换成字符串数组。默认情况下，Out-String 累积字符串并作为单个字符串返回它们，但您可以使用 stream 参数让 Out-String 每次返回一个字符串。此 cmdlet 用于在对象操纵不太方便时像在传统外壳程序中一样搜索和操纵字符串输出。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-String</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要写入字符串的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Stream</maml:name>
				<maml:description>
					<maml:para>单独发送每个对象的字符串。默认情况下，每个对象的字符串将作为单个字符串进行累积和发送。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Width</maml:name>
				<maml:description>
					<maml:para>指定输出中每一行的字符数。将截断任何额外字符，不换行。如果省略此参数，则由主机特征确定宽度。PowerShell.exe 主机的默认值是 80（字符）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要写入字符串的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Stream</maml:name>
			<maml:description>
				<maml:para>单独发送每个对象的字符串。默认情况下，每个对象的字符串将作为单个字符串进行累积和发送。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Width</maml:name>
			<maml:description>
				<maml:para>指定输出中每一行的字符数。将截断任何额外字符，不换行。如果省略此参数，则由主机特征确定宽度。PowerShell.exe 主机的默认值是 80（字符）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将对象传递给 Out-String。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Out-String 返回它根据输入对象创建的字符串。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          包含 Out 动词的 cmdlet（输出 cmdlet）不格式化对象；它们只呈现对象，并将对象发送到指定的显示目标。如果将未格式化的对象发送给输出 cmdlet，该 cmdlet 会为它生成显示信息，然后将它发送给格式化 cmdlet。

输出 cmdlet 没有用于提供名称和文件路径的参数。若要向某个输出 cmdlet 发送数据，请使用管道运算符 (|) 将 Windows PowerShell 命令的输出发送到该 cmdlet。还可以将数据存储在变量中，并使用 InputObject 参数将数据传递给 cmdlet。有关详细信息，请参阅示例。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-content C:\test1\testfile2.txt | out-string                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 Testfile2.txt 文件的内容作为单个字符串发送到控制台。它使用 Get-Content cmdlet 来获取文件的内容。管道运算符 (|) 将内容发送到 Out-String，后者将该内容作为字符串发送到控制台。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$c = get-culture | select-object *

C:\PS&gt; out-string -inputobject $c -width 100                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令获取当前用户的区域设置，并将该数据转换为字符串。第一个命令使用 Get-Culture cmdlet 来获取区域设置。管道运算符 (|) 将结果发送给 Select-Object cmdlet，后者选择 Get-Culture 检索到的区域性对象的所有属性 (*)。然后该命令将结果存储在 $c 变量中。

第二个命令使用 Out-String 将 CultureInfo 对象转换成一列字符串（每个属性一个字符串）。它使用 InputObject 参数将 $c 变量传递给 Out-String。width 参数被设置为每行 100 个字符，以防止发生截断。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-alias | out-string -stream | select-string &quot;Get-Command&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示包含短语“Get-Command”的别名。它使用 Get-Alias cmdlet 来获取一组 AliasInfo 对象（当前会话中的每个别名对应一个 AliasInfo 对象）。此示例说明处理对象与处理字符串之间的不同之处。

管道运算符 (|) 将 Get-Alias 的输出发送至 Out-String，后者将对象转换为一系列字符串。它使用 Stream 参数逐一发送每个字符串，而不是将它们连成单个字符串。另一个管道运算符将这些字符串发送至 Select-String，后者选择这些字符串中任意位置包含“Get-Command”的字符串。

如果省略 Stream 参数，则该命令将显示所有别名，因为 Select-String 在由 Out-String 返回的单个字符串中查找“Get-Command”，格式化程序将以表的形式显示该字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113368</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Read-Host
		</command:name>
		<maml:description>
			<maml:para>从控制台读取一行输入。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Read</command:verb>
		<command:noun>Host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Read-Host cmdlet 从控制台读取一行输入。可以使用它来提示用户输入数据。因为可以将输入保存为安全字符串，所以可以使用此 cmdlet 来提示用户输入安全数据（如密码）以及共享的数据。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Read-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Prompt</maml:name>
				<maml:description>
					<maml:para>指定提示的文本。键入一个字符串。如果该字符串包括空格，请将其括在引号中。例如，&quot;Type an integer:  &quot;。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AsSecureString</maml:name>
				<maml:description>
					<maml:para>显示星号 (*) 来替代用户作为输入键入的字符。

使用此参数时，Read-Host cmdlet 的输出是一个 SecureString 对象 (System.Security.SecureString)。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AsSecureString</maml:name>
			<maml:description>
				<maml:para>显示星号 (*) 来替代用户作为输入键入的字符。

使用此参数时，Read-Host cmdlet 的输出是一个 SecureString 对象 (System.Security.SecureString)。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Prompt</maml:name>
			<maml:description>
				<maml:para>指定提示的文本。键入一个字符串。如果该字符串包括空格，请将其括在引号中。例如，&quot;Type an integer:  &quot;。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String 或 System.Security.SecureString</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用了 AsSecureString 参数，Read-Host 将返回一个 SecureString。否则，它将返回一个字符串。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$age = read-host &quot;Please enter your age:&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示字符串“Please enter your age:”作为提示。输入值并按 Enter 键时，该值将存储在 $age 变量中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$pwd_secure_string = read-host &quot;Enter a Password:&quot; -assecurestring                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示字符串“Enter a Password:”作为提示。输入值时，控制台中显示星号 (*) 来替代输入。按 Enter 键时，值将作为 SecureString 对象存储在 $pwd_secure_string 变量中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113371</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertFrom-SecureString</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Register-EngineEvent
		</command:name>
		<maml:description>
			<maml:para>订阅由 Windows PowerShell 引擎以及由 New-Event cmdlet 生成的事件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Register</command:verb>
		<command:noun>EngineEvent</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Register-EngineEvent cmdlet 订阅由 Windows PowerShell 引擎以及由 New-Event cmdlet 生成的事件。使用 SourceIdentifier 参数指定事件。

可以使用此 cmdlet 来订阅“Exiting”引擎事件以及由 New-Event cmdlet 生成的事件。这些事件将自动添加到会话中的事件队列，而无需订阅。但是，订阅允许您转发事件，指定操作来响应事件以及取消订阅。

当引发订阅的事件时，该事件将添加到会话中的事件队列。若要获取事件队列中的事件，请使用 Get-Event cmdlet。

订阅事件时，会向会话中添加一个事件订阅程序。若要获取会话中的事件订阅程序，请使用 Get-EventSubscriber cmdlet。若要取消订阅，请使用 Unregister-Event cmdlet，该 cmdlet 将从会话中删除事件订阅程序。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Register-EngineEvent</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="101">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>指定要订阅的事件的源标识符。该源标识符在当前会话中必须是唯一的。此参数是必需的。

此参数的值出现在订阅者对象以及与此订阅关联的所有事件对象的 SourceIdentifier 属性值中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="102">
				<maml:name>Action</maml:name>
				<maml:description>
					<maml:para>指定用于处理事件的命令。Action 中的命令在引发事件时运行，而不将事件发送到事件队列。用大括号 ({ }) 括起命令以形成脚本块。

Action 参数的值可以包含 $Event、$EventSubscriber、$Sender、$SourceEventArgs 和 $SourceArgs 自动变量，这些变量为 Action 脚本块提供有关事件的信息。有关详细信息，请参阅 about_Automatic_Variables。

指定操作时，Register-EngineEvent 会返回一个表示该操作的事件作业对象。可以使用 Job cmdlet 来管理事件作业。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Forward</maml:name>
				<maml:description>
					<maml:para>将此订阅的事件发送到本地计算机上的会话。如果要在远程计算机或远程会话中注册事件，可使用此参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MessageData</maml:name>
				<maml:description>
					<maml:para>指定与事件关联的其他数据。此参数的值显示在事件对象的 MessageData 属性中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SupportEvent</maml:name>
				<maml:description>
					<maml:para>隐藏事件订阅。在当前订阅是更复杂的事件注册机制的一部分并且不应单独发现时，可使用此参数。

若要查看或取消使用 SupportEvent 参数创建的订阅，请使用 Get-EventSubscriber 和 Unregister-Event cmdlet 的 Force 参数。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="102">
			<maml:name>Action</maml:name>
			<maml:description>
				<maml:para>指定用于处理事件的命令。Action 中的命令在引发事件时运行，而不将事件发送到事件队列。用大括号 ({ }) 括起命令以形成脚本块。

Action 参数的值可以包含 $Event、$EventSubscriber、$Sender、$SourceEventArgs 和 $SourceArgs 自动变量，这些变量为 Action 脚本块提供有关事件的信息。有关详细信息，请参阅 about_Automatic_Variables。

指定操作时，Register-EngineEvent 会返回一个表示该操作的事件作业对象。可以使用 Job cmdlet 来管理事件作业。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Forward</maml:name>
			<maml:description>
				<maml:para>将此订阅的事件发送到本地计算机上的会话。如果要在远程计算机或远程会话中注册事件，可使用此参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MessageData</maml:name>
			<maml:description>
				<maml:para>指定与事件关联的其他数据。此参数的值显示在事件对象的 MessageData 属性中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="101">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>指定要订阅的事件的源标识符。该源标识符在当前会话中必须是唯一的。此参数是必需的。

此参数的值出现在订阅者对象以及与此订阅关联的所有事件对象的 SourceIdentifier 属性值中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SupportEvent</maml:name>
			<maml:description>
				<maml:para>隐藏事件订阅。在当前订阅是更复杂的事件注册机制的一部分并且不应单独发现时，可使用此参数。

若要查看或取消使用 SupportEvent 参数创建的订阅，请使用 Get-EventSubscriber 和 Unregister-Event cmdlet 的 Force 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给 Register-EngineEvent。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.PSEventJob</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 Action 参数，则 Register-EngineEvent 返回 System.Management.Automation.PSEventJob 对象。否则，将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computername Server01, Server02

C:\PS&gt; invoke-command -session $s { Register-EngineEvent -sourceIdentifier ([System.Management.Automation.PsEngineEvent]::Exiting) -forward }                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在两台远程计算机上注册 Windows PowerShell 引擎事件。

第一个命令在每台远程计算机上创建一个 PSSession。

第二个命令使用 Invoke-Command cmdlet 在远程会话中运行 Register-EngineEvent 命令。

Register-EngineEvent 命令使用 SourceIdentifier 参数来标识事件。它使用 Forward 参数将事件从远程会话转发到本地会话。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$j = register-engineEvent -sourceIdentifier PowerShell.ProcessCreated -action { $processName | add-content processLog.txt } 

C:\PS&gt; get-event

C:\PS&gt; $results = $j | receive-job

C:\PS&gt; unregister-event PowerShell.ProcessCreated                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示了如何使用 Job cmdlet 来管理当使用 Action 参数时 Register-EngineEvent 返回的事件作业对象。

可以像管理任何其他 Windows PowerShell 作业那样管理事件作业。有关详细信息，请参阅 about_jobs。在此示例中，使用 Receive-Job cmdlet 获取作业的结果。

若要从会话中删除作业，请使用 Remove-Job。若要取消事件订阅，请使用 Unregister-Event cmdlet。若要删除事件队列中的事件，请使用 Remove-Event。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135243</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Job</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Receive-Job</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Job</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Job</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Register-ObjectEvent
		</command:name>
		<maml:description>
			<maml:para>订阅由 Microsoft .NET Framework 对象生成的事件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Register</command:verb>
		<command:noun>ObjectEvent</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Register-ObjectEvent cmdlet 订阅由本地计算机或远程计算机上的 .NET Framework 对象生成的事件。

当引发订阅的事件时，该事件将添加到会话中的事件队列。若要获取事件队列中的事件，请使用 Get-Event cmdlet。

可以使用 Register-ObjectEvent 的参数指定可帮助您在队列中标识事件的事件属性值。还可以使用 Action 参数指定当引发订阅的事件时要采取的操作，以及使用 Forward 参数将远程事件发送到本地会话中的事件队列。

订阅事件时，会向会话中添加一个事件订阅者。若要获取会话中的事件订阅程序，请使用 Get-EventSubscriber cmdlet。若要取消订阅，请使用 Unregister-Event cmdlet，该 cmdlet 将从会话中删除事件订阅程序。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Register-ObjectEvent</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定生成事件的 .NET Framework 对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>EventName</maml:name>
				<maml:description>
					<maml:para>指定要订阅的事件。请输入事件名称。此参数是必需的。

此参数的值不是您为事件订阅选择的名称，而是 .NET Framework 对象公开的事件名称。例如，ManagementEventWatcher 类具有名为“EventArrived”和“Stopped”的事件。若要查找事件的事件名称，请使用 Get-Member cmdlet。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="101">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>指定您为订阅选择的名称。您选择的名称必须在当前会话中唯一。默认值为 Windows PowerShell 指定的 GUID。

此参数的值出现在订阅方对象以及与此订阅关联的所有事件对象的 SourceIdentifier 属性值中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="102">
				<maml:name>Action</maml:name>
				<maml:description>
					<maml:para>指定用于处理事件的命令。Action 中的命令在引发事件时运行，而不将事件发送到事件队列。用大括号 ({ }) 括起命令以形成脚本块。

Action 参数的值可以包含 $Event、$EventSubscriber、$Sender、$SourceEventArgs 和 $SourceArgs 自动变量，这些变量为 Action 脚本块提供有关事件的信息。有关详细信息，请参阅 about_Automatic_Variables。

指定操作时，Register-ObjectEvent 会返回一个表示该操作的事件作业对象。可以使用 Job cmdlet 来管理事件作业。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Forward</maml:name>
				<maml:description>
					<maml:para>将此订阅的事件发送到远程会话。如果要在远程计算机或远程会话中注册事件，可使用此参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>MessageData</maml:name>
				<maml:description>
					<maml:para>指定将与此事件订阅关联的任何额外数据。此参数的值出现在与此订阅关联的所有事件的 MessageData 属性中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SupportEvent</maml:name>
				<maml:description>
					<maml:para>隐藏事件订阅。在当前订阅是更复杂的事件注册机制的一部分并且不应单独发现时，可使用此参数。

若要查看或取消使用 SupportEvent 参数创建的订阅，请使用 Get-EventSubscriber 和 Unregister-Event cmdlet 的 Force 参数。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="102">
			<maml:name>Action</maml:name>
			<maml:description>
				<maml:para>指定用于处理事件的命令。Action 中的命令在引发事件时运行，而不将事件发送到事件队列。用大括号 ({ }) 括起命令以形成脚本块。

Action 参数的值可以包含 $Event、$EventSubscriber、$Sender、$SourceEventArgs 和 $SourceArgs 自动变量，这些变量为 Action 脚本块提供有关事件的信息。有关详细信息，请参阅 about_Automatic_Variables。

指定操作时，Register-ObjectEvent 会返回一个表示该操作的事件作业对象。可以使用 Job cmdlet 来管理事件作业。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>EventName</maml:name>
			<maml:description>
				<maml:para>指定要订阅的事件。请输入事件名称。此参数是必需的。

此参数的值不是您为事件订阅选择的名称，而是 .NET Framework 对象公开的事件名称。例如，ManagementEventWatcher 类具有名为“EventArrived”和“Stopped”的事件。若要查找事件的事件名称，请使用 Get-Member cmdlet。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Forward</maml:name>
			<maml:description>
				<maml:para>将此订阅的事件发送到远程会话。如果要在远程计算机或远程会话中注册事件，可使用此参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定生成事件的 .NET Framework 对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>MessageData</maml:name>
			<maml:description>
				<maml:para>指定将与此事件订阅关联的任何额外数据。此参数的值出现在与此订阅关联的所有事件的 MessageData 属性中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="101">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>指定您为订阅选择的名称。您选择的名称必须在当前会话中唯一。默认值为 Windows PowerShell 指定的 GUID。

此参数的值出现在订阅方对象以及与此订阅关联的所有事件对象的 SourceIdentifier 属性值中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>GUID</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SupportEvent</maml:name>
			<maml:description>
				<maml:para>隐藏事件订阅。在当前订阅是更复杂的事件注册机制的一部分并且不应单独发现时，可使用此参数。

若要查看或取消使用 SupportEvent 参数创建的订阅，请使用 Get-EventSubscriber 和 Unregister-Event cmdlet 的 Force 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将对象传递给 Register-ObjectEvent。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。

                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$query = New-Object System.Management.WqlEventQuery &quot;__InstanceCreationEvent&quot;, (New-Object TimeSpan 0,0,1), &quot;TargetInstance isa 'Win32_Process'&quot; 

C:\PS&gt; $processWatcher = New-Object System.Management.ManagementEventWatcher $query 

C:\PS&gt; register-objectEvent -inputObject $processWatcher -eventName &quot;EventArrived&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例订阅启动新进程时生成的事件。

该命令使用 ManagementEventWatcher 对象获取 EventArrived 事件。查询对象指定这些事件是 Win32_Process 类的实例创建事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$query = New-Object System.Management.WqlEventQuery &quot;__InstanceCreationEvent&quot;, (New-Object TimeSpan 0,0,1), &quot;TargetInstance isa 'Win32_Process'&quot; 

C:\PS&gt; $processWatcher = New-Object System.Management.ManagementEventWatcher $query 

C:\PS&gt; $action = { New-Event &quot;PowerShell.ProcessCreated&quot; -Sender $sender -EventArguments $SourceEventArgs.NewEvent.TargetInstance } 

C:\PS&gt; register-objectEvent -inputObject $processWatcher -eventName &quot;EventArrived&quot; -action $action

Id    Name            State      HasMoreData     Location             Command
--    ----            -----      -----------     --------             -------
2     422cfe5a-65e... Running    True                                 New-Event &quot;PowerShe...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何指定操作来响应事件。如果指定操作，则引发的事件不会添加到事件队列中，而是由该操作对事件进行响应。

在此示例中，当引发指示新进程已启动的实例创建事件时，便会引发新 ProcessCreated 事件。

操作使用仅针对事件操作填充的 $Sender 和 $SourceEventArgs 自动变量。

Register-ObjectEvent 命令返回表示操作的作业对象，该操作作为后台作业运行。可以使用 Job cmdlet（如 Get-Job 和 Receive-Job）来管理该后台作业。

有关详细信息，请参阅 about_Jobs。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$s = new-pssession -computername Server01, Server02

C:\PS&gt; invoke-command -session $s -filepath ProcessCreationEvent.ps1

C:\PS&gt; invoke-command -session $s { get-event }

# ProcessCreationEvent.ps1

function Enable-ProcessCreationEvent 
{ 
   $query = New-Object System.Management.WqlEventQuery &quot;__InstanceCreationEvent&quot;, ` 
       (New-Object TimeSpan 0,0,1), ` 
       &quot;TargetInstance isa 'Win32_Process'&quot; 
   $processWatcher = New-Object System.Management.ManagementEventWatcher $query 

   $identifier = &quot;WMI.ProcessCreated&quot; 
   Register-ObjectEvent -input $processWatcher -eventName &quot;EventArrived&quot; `
      -sourceIdentifier $identifier -messageData &quot;Test&quot; -forward 
   } 
} 

EnableProcessCreationEvent                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何订阅远程计算机上的对象事件。

第一个命令在两台远程计算机上创建 PSSession 并将它们保存在 $s 变量中。

第二个命令使用 Invoke-Command cmdlet 的 FilePath 参数在 $s 的每个 PSSession 中运行 ProcessCreationEvent.ps1 脚本。

该脚本包括 Register-ObjectEvent 命令，该命令通过 ManagementEventWatcher 对象及其 EventArrived 事件订阅 Win32_Process 对象上的实例创建事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$timer  = New-Object Timers.Timer

C:\PS&gt; $timer.Interval = 500

C:\PS&gt; $job = Register-ObjectEvent -inputObject $timer -eventName Elapsed -sourceIdentifier Timer.Random -Action {$random = Get-Random -Min 0 -Max 100}

C:\PS&gt; $job.gettype().fullname
System.Management.Automation.PSEventJob

C:\PS&gt; $job | format-list -property *

State         : Running
Module        : __DynamicModule_6b5cbe82-d634-41d1-ae5e-ad7fe8d57fe0
StatusMessage :
HasMoreData   : True
Location      :
Command       : $random = Get-Random -Min 0 -Max 100
JobStateInfo  : Running
Finished      : System.Threading.ManualResetEvent
InstanceId    : 88944290-133d-4b44-8752-f901bd8012e2
Id            : 1
Name          : Timer.Random
ChildJobs     : {}
...

C:\PS&gt; $timer.Enabled = $true

C:\PS&gt; &amp; $job.module {$random}
60

C:\PS&gt; &amp; $job.module {$random}
47                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明如何在事件注册中包含 Action 时创建的 PSEventJob 对象中使用动态模块。

第一条命令使用 New-Object cmdlet 创建一个计时器对象。第二条命令将计时器间隔设置为 500（毫秒）。

第三条命令使用 Register-ObjectEvent cmdlet 注册该计时器对象的 Elapsed 事件。该命令包含处理该事件的操作。每当经过该计时器间隔时，就会引发一个事件并运行操作中的命令。在此示例中，Get-Random cmdlet 生成一个介于 0 和 100 之间的随机数，并将其保存在 $random 变量中。

在 Register-ObjectEvent 命令中使用 Action 参数时，该命令返回表示该操作的 PSEventJob 对象。该命令将作业对象保存在 $job 变量中。

Register-ObjectEvent cmdlet 返回的 PSEventJob 对象也包含在事件订阅者的 Action 属性中。有关详细信息，请参阅 Get-EventSubscriber。

第四条命令显示 $job 变量包含 PSEventJob 对象。第五条命令使用 Format-List cmdlet 在列表中显示 PSEventJob 对象的所有属性。

PSEventJob 具有 Module 属性，该属性包含实现该操作的动态脚本模块。

第六条命令启用计时器。

其余的命令使用调用运算符 (&amp;) 调用模块中的命令并显示 $random 变量的值。您可以使用调用运算符调用模块中的任何命令，包括未导出的命令。在此示例中，这些命令显示 Elapsed 事件发生时所生成的随机数。

有关模块的详细信息，请参阅 about_Modules。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135244</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-Event
		</command:name>
		<maml:description>
			<maml:para>删除事件队列中的事件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>Event</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Remove-Event cmdlet 删除当前会话中事件队列中的事件。

此 cmdlet 仅删除当前位于队列中的事件。若要取消事件注册或取消订阅，请使用 Unregister-Event cmdlet。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>EventIdentifier</maml:name>
				<maml:description>
					<maml:para>仅删除具有指定的事件标识符的事件。EventIdentifier 或 SourceIdentifier 参数在每个命令中都是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>仅删除具有指定的源标识符的事件。不允许使用通配符。EventIdentifier 或 SourceIdentifier 参数在每个命令中都是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>EventIdentifier</maml:name>
			<maml:description>
				<maml:para>仅删除具有指定的事件标识符的事件。EventIdentifier 或 SourceIdentifier 参数在每个命令中都是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>仅删除具有指定的源标识符的事件。不允许使用通配符。EventIdentifier 或 SourceIdentifier 参数在每个命令中都是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSEventArgs</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将事件从 Get-Event 传递到 Remove-Event。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					该 cmdlet 不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
remove-event -sourceIdentifier &quot;ProcessStarted&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从事件队列中删除源标识符为“Process Started”的事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
 remove-event -eventIdentifier 30                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令从事件队列中删除事件 ID 为 30 的事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-event | remove-event                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除事件队列中的所有事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135247</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-PSBreakpoint
		</command:name>
		<maml:description>
			<maml:para>删除当前控制台中的断点。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>PSBreakpoint</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Remove-PSBreakpoint cmdlet 可以删除断点。请输入断点对象或断点 ID。

删除断点时，断点对象不再可用或不再发生作用。如果已在变量中保存了断点对象，则该引用仍存在，但该断点不再发生作用。

Remove-PSBreakpoint 是专门用来调试 Windows PowerShell 脚本的多个 cmdlet 之一。有关 Windows PowerShell 调试程序的详细信息，请参阅 about_Debuggers。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Id</maml:name>
				<maml:description>
					<maml:para>删除具有指定断点 ID 的断点。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Breakpoint</maml:name>
				<maml:description>
					<maml:para>指定要删除的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。也可以通过管道将断点对象传递给 Remove-PSBreakpoint。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Breakpoint</maml:name>
			<maml:description>
				<maml:para>指定要删除的断点。输入包含断点对象的变量或者用来获取断点对象的命令（如 Get-PSBreakpoint 命令）。也可以通过管道将断点对象传递给 Remove-PSBreakpoint。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Breakpoint[]</command:parameterValue>
			<dev:type>
				<maml:name>Breakpoint[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Id</maml:name>
			<maml:description>
				<maml:para>删除具有指定断点 ID 的断点。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.Breakpoint</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将断点对象传递给 Remove-PSBreakpoint。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					该 cmdlet 不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-breakpoint | remove-breakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除当前控制台中的所有断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$b = set-psbreakpoint -script sample.ps1 -variable Name

C:\PS&gt; $b | remove-psbreakpoint                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令可以删除断点。

第一个命令使用 Set-PSBreakpoint cmdlet 在 Sample.ps1 脚本中的 Name 变量上创建断点。然后，它将断点对象保存在 $b 变量中。

第二个命令使用 Remove-PSBreakpoint cmdlet 来删除新断点。它使用管道运算符 (|) 将 $b 变量中的断点对象发送至 Remove-PSBreakpoint cmdlet。

此命令的结果是，如果您运行脚本，该脚本将运行直到完成，中间不停止。另外，Get-PSBreakpoint cmdlet 不返回此断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
remove-psbreakpoint -id 2                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除断点 ID 为 2 的断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function del-psb { get-psbreakpoint | remove-psbreakpoint }                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此简单函数删除当前控制台中的所有断点。它使用 Get-PSBreakpoint cmdlet 来获取断点。然后，它使用管道运算符 (|) 将断点发送到 Remove-PSBreakpoint cmdlet，该 cmdlet 将删除这些断点。

结果，您可以键入“del-psb”，而不用键入更长的命令。

若要保存该函数，请将其添加到 Windows PowerShell 配置文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113375</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSCallStack</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-Variable
		</command:name>
		<maml:description>
			<maml:para>删除变量及其值。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Remove</command:verb>
		<command:noun>Variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Remove-Variable cmdlet 从定义变量的作用域（例如，当前会话）中删除变量及其值。不能使用此 cmdlet 删除被设置为常量的变量或那些被系统拥有的变量。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定要删除的变量的名称。参数名（“Name”）为可选项。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 删除变量（即使该变量是只读的）。即使使用 Force 参数，该 cmdlet 也无法删除常量。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>只删除指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>忽略指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 删除变量（即使该变量是只读的）。即使使用 Force 参数，该 cmdlet 也无法删除常量。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>只删除指定项。此参数的值对 Name 参数进行限定。请输入名称元素或模式，例如“s*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定要删除的变量的名称。参数名（“Name”）为可选项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSVariable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将变量对象传递给 Remove-Variable。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          所做更改只影响当前作用域，如会话。要将一个变量从所有会话中删除，请在 Windows PowerShell 配置文件中添加 Remove-Variable 命令。

还可以使用其内置别名“rv”引用 RemoveVariable。有关详细信息，请参阅 about_Aliases。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
remove-variable Smp                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令删除 $Smp 变量。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113380</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Profiles</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Select-Object
		</command:name>
		<maml:description>
			<maml:para>选择一个对象或一组对象的指定属性。它还可以从对象的数组中选择唯一对象，也可以从对象数组的开头或末尾选择指定个数的对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Select</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Select-Object cmdlet 仅获取一个或一组对象的指定属性。它还可以从对象的数组中选择唯一对象，也可以从对象数组的开头或末尾选择指定个数的对象。
 
如果使用 Select-Object 来选择指定属性，则它会从输入对象中复制这些属性的值，并创建具有指定的属性和复制的值的新对象。

使用 Property 参数指定您要选择的属性。或者，使用 First、Last、Unique、Skip 和 Index 参数从输入对象数组中选择特定对象。若要执行更特定的对象筛选，请使用 Where-Object cmdlet。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Select-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定要选择的属性。允许使用通配符。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：
-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>ExcludeProperty</maml:name>
				<maml:description>
					<maml:para>删除所选的指定属性。允许使用通配符。仅当命令中也包含 Property 参数时，此参数才有效。

该属性参数的值可以是计算属性，这是指定名称并计算值以显示属性的哈希表。有效键包括：

 -- Name 或 Label &lt;字符串&gt;
 -- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;

有关详细信息，请参阅示例。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>ExpandProperty</maml:name>
				<maml:description>
					<maml:para>指定要选择的属性，并指示应当尝试展开该属性。属性名中允许使用通配符。

例如，如果指定的属性是数组，则应当在输出中包括该数组的每个值。如果属性包含对象，则该对象的属性会显示在输出中。
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>First</maml:name>
				<maml:description>
					<maml:para>指定要从输入对象的数组的开头选择的对象数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要通过管道发送到 cmdlet 的对象。使用此参数可以通过管道将对象传递给 Select-Object。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Last</maml:name>
				<maml:description>
					<maml:para>指定要从输入对象的数组的末尾选择的对象数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Skip</maml:name>
				<maml:description>
					<maml:para>跳过（不选择）指定数量的项目。默认情况下，Skip 参数会从数组或对象列表的开头开始计数，但如果命令使用 Last 参数，它会从列表或数组的末尾开始计数。

与从 0 开始计数的 Index 参数不同，Skip 参数从 1 开始计数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Unique</maml:name>
				<maml:description>
					<maml:para>指定如果输入对象的子集有相同的属性和值，则只选择该子集的一个成员。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Select-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Index</maml:name>
				<maml:description>
					<maml:para>基于对象的索引值从数组中选择对象。以逗号分隔的列表形式输入索引。

数组中的索引从 0 开始，0 表示第一个值，(n-1) 表示最后一个值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要通过管道发送到 cmdlet 的对象。使用此参数可以通过管道将对象传递给 Select-Object。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Unique</maml:name>
				<maml:description>
					<maml:para>指定如果输入对象的子集有相同的属性和值，则只选择该子集的一个成员。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>ExcludeProperty</maml:name>
			<maml:description>
				<maml:para>删除所选的指定属性。允许使用通配符。仅当命令中也包含 Property 参数时，此参数才有效。

该属性参数的值可以是计算属性，这是指定名称并计算值以显示属性的哈希表。有效键包括：

 -- Name 或 Label &lt;字符串&gt;
 -- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;

有关详细信息，请参阅示例。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>ExpandProperty</maml:name>
			<maml:description>
				<maml:para>指定要选择的属性，并指示应当尝试展开该属性。属性名中允许使用通配符。

例如，如果指定的属性是数组，则应当在输出中包括该数组的每个值。如果属性包含对象，则该对象的属性会显示在输出中。
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>First</maml:name>
			<maml:description>
				<maml:para>指定要从输入对象的数组的开头选择的对象数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Index</maml:name>
			<maml:description>
				<maml:para>基于对象的索引值从数组中选择对象。以逗号分隔的列表形式输入索引。

数组中的索引从 0 开始，0 表示第一个值，(n-1) 表示最后一个值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要通过管道发送到 cmdlet 的对象。使用此参数可以通过管道将对象传递给 Select-Object。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Last</maml:name>
			<maml:description>
				<maml:para>指定要从输入对象的数组的末尾选择的对象数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定要选择的属性。允许使用通配符。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：
-- Name（或 Label）&lt;字符串&gt;
-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Skip</maml:name>
			<maml:description>
				<maml:para>跳过（不选择）指定数量的项目。默认情况下，Skip 参数会从数组或对象列表的开头开始计数，但如果命令使用 Last 参数，它会从列表或数组的末尾开始计数。

与从 0 开始计数的 Index 参数不同，Skip 参数从 1 开始计数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Unique</maml:name>
			<maml:description>
				<maml:para>指定如果输入对象的子集有相同的属性和值，则只选择该子集的一个成员。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将任何对象传递给 Select-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Select-Object 的内置别名“select”来对其进行引用。有关详细信息，请参阅 about_Aliases。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | select-object ProcessName,Id,WS                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示进程的列表。只显示进程的名称、ID 和工作集 (WS) 属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | select-object processname -expandproperty modules |
format-list

ProcessName       : 00THotkey
Size              : 256
Company           : TOSHIBA Corporation
FileVersion       : 1, 0, 0, 27
ProductVersion    : 6, 2, 0, 0
Description       : THotkey
Product           : TOSHIBA THotkey
ModuleName        : 00THotkey.exe
FileName          : C:\WINDOWS\system32\00THotkey.exe
BaseAddress       : 4194304                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示有关在计算机上运行的进程所使用的模块的信息。它使用 ExpandProperty 参数显示在模块属性中包含的详细信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | sort-object -property WS | select-object -Last 5

Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   2866     320    33432      45764   203   222.41   1292 svchost
    577      17    23676      50516   265    50.58   4388 WINWORD
    826      11    75448      76712   188    19.77   3780 Ps
   1367      14    73152      88736   216    61.69    676 Ps
   1612      44    66080      92780   380   900.59   6132 INFOPATH                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示占用内存最多的五个进程。Sort-Object cmdlet 用于按内存（工作集）使用量对进程排序，Select-Object cmdlet 用于只选择所得到的对象数组的最后五个成员。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | select-object -property ProcessName,@{Name=&quot;Start Day&quot;; Expression = {$_.StartTime.DayOfWeek}}

ProcessName  StartDay
----         --------
alg          Wednesday
ati2evxx     Wednesday
ati2evxx     Thursday
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示计算机上正在运行的进程的名称和启动日期。

Property 参数的值为 ProcessName 和名为“Start Day”的计算属性。通过使用具有 Name 和 Expression 键的哈希表来添加“Start Day”属性。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot; | select-object -unique

a
b
c                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示字符数组中的唯一字符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-eventlog -log &quot;Windows PowerShell&quot; 

C:\PS&gt; $a | select-object -index 0, ($a.count - 1)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令获取 Windows Powershell 事件日志中的第一个（最新）和最后一个（最旧）事件。

第一条命令使用 Get-EventLog cmdlet 获取 Windows Powershell 日志中的所有事件。它将事件保存在 $a 变量中。

第二条命令使用管道运算符 (|) 将 $a 中的事件发送到 Select-Object cmdlet。Select-Object 命令使用 Index 参数按项目的索引号选择项目。第一个事件的索引为 0。最后一个事件的索引是 $a 中的项数减 1。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
new-pssession -computername (get-content servers.txt | select-object -skip 1)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Servers.txt 文件中列出的每台计算机上创建一个新的 PSSession，第一台计算机除外。

此命令使用 Select-Object cmdlet 选择计算机名称列表中除第一台计算机外的全部计算机。生成的计算机列表设置为 New-PSSession cmdlet 的 ComputerName 参数的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113387</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Select-String
		</command:name>
		<maml:description>
			<maml:para>查找字符串和文件中的文本。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Select</command:verb>
		<command:noun>String</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Select-String cmdlet 在输入字符串和文件中搜索文本和文本模式。您可以像在 UNIX 中使用 Grep、在 Windows 中使用 Findstr 一样使用该命令。

Select-String 以文本行为基础。默认情况下，Select-String 会查找每行中的第一个匹配项，对于每个匹配项，它会显示文件名、行号以及包含匹配项的行中的所有文本。

但是，您可以指示它检测每行中的多个匹配项，显示匹配项前后的文本，或只显示指明是否找到匹配项的布尔值（True 或 False）。

Select-String 使用正则表达式匹配，但它还执行简单匹配，以在输入内容中搜索您指定的文本。

Select-String 可以显示每个输入文件的所有文本匹配项或者在找到第一个匹配项后停止。它还可以显示与指定模式不匹配的所有文本。

您还可以指定 Select-String 应采用特定的字符编码（例如搜索 Unicode 文本文件时）。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Select-String</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定要搜索的文件的路径。允许使用通配符。默认位置为本地目录。

指定目录中的文件，如“log1.txt”、“*.doc”或“*.*”。如果只指定一个目录，该命令会失败。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Pattern</maml:name>
				<maml:description>
					<maml:para>指定要查找的文本。键入字符串或正则表达式。如果您键入字符串，则使用 SimpleMatch 参数。

若要了解正则表达式，请参阅 about_Regular_Expressions。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllMatches</maml:name>
				<maml:description>
					<maml:para>在每个文本行中搜索多个匹配项。若不使用此参数，Select-String 只会查找每个文本行中的第一个匹配项。

当 Select-String 在一个文本行中找到多个匹配项时，它仍然只会为该行发出一个 MatchInfo 对象，但是该对象的 Matches 属性包含所有匹配项。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CaseSensitive</maml:name>
				<maml:description>
					<maml:para>使匹配项区分大小写。默认情况下，匹配项不区分大小写。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Context</maml:name>
				<maml:description>
					<maml:para>捕获包含匹配项的行前后的指定行数。这允许您在上下文中查看匹配项。

如果您输入一个数字作为此参数的值，该数字将确定捕获的匹配项前后的行数。如果您输入两个数字作为此参数的值，则第一个数字将确定匹配项前面的行数，第二个数字确定匹配后面的行数。

在默认显示中，包含匹配项的行会通过显示内容第一列中的右尖括号 (ASCII 62) 来指示。无标记行是上下文。

此参数不会更改 Select-String 生成的对象数。Select-String 会为每个匹配项生成一个 MatchInfo (Microsoft.PowerShell.Commands.MatchInfo) 对象。上下文以字符串数组的形式存储在该对象的 Context 属性中。

当您将 Select-String 命令的输出通过管道传递给另一个 Select-String 命令时，接收命令只搜索匹配行（MatchInfo 对象的 Line 属性的值）中的文本，而不会搜索上下文行中的文本。因此，Context 参数在接收 Select-String 命令上无效。

当上下文包括匹配项时，每个匹配项的 MatchInfo 对象都将包括所有上下文行，但是重叠行只会在显示内容中出现一次。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>指定 Select-String 在搜索文件时应采用的字符编码。默认值为 UTF8。

有效值包括“UTF7”、“UTF8”、“UTF32”、“ASCII”、“Unicode”、“BigEndianUnicode”、“Default”和“OEM”。“Default”是系统当前 ANSI 代码页的编码。“OEM”是操作系统的当前原始设备制造商代码页标识符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>排除指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>只包括指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>List</maml:name>
				<maml:description>
					<maml:para>只返回每个输入文件中的第一个匹配项。默认情况下，Select-String 会为它找到的每个匹配项返回一个 MatchInfo 对象。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NotMatch</maml:name>
				<maml:description>
					<maml:para>查找与指定模式不匹配的文本。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Quiet</maml:name>
				<maml:description>
					<maml:para>返回布尔值（True 或 False），而不是 MatchInfo 对象。如果找到模式，则该值为“True”，否则为“False”。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SimpleMatch</maml:name>
				<maml:description>
					<maml:para>使用简单匹配，而不是正则表达式匹配。在简单匹配中，Select-String 会在输入内容中搜索 Pattern 参数中的文本。它不会将 Pattern 参数的值解释为正则表达式语句。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Select-String</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要搜索的文本。请输入包含文本的变量，或键入可获取文本的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Pattern</maml:name>
				<maml:description>
					<maml:para>指定要查找的文本。键入字符串或正则表达式。如果您键入字符串，则使用 SimpleMatch 参数。

若要了解正则表达式，请参阅 about_Regular_Expressions。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>AllMatches</maml:name>
				<maml:description>
					<maml:para>在每个文本行中搜索多个匹配项。若不使用此参数，Select-String 只会查找每个文本行中的第一个匹配项。

当 Select-String 在一个文本行中找到多个匹配项时，它仍然只会为该行发出一个 MatchInfo 对象，但是该对象的 Matches 属性包含所有匹配项。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CaseSensitive</maml:name>
				<maml:description>
					<maml:para>使匹配项区分大小写。默认情况下，匹配项不区分大小写。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Context</maml:name>
				<maml:description>
					<maml:para>捕获包含匹配项的行前后的指定行数。这允许您在上下文中查看匹配项。

如果您输入一个数字作为此参数的值，该数字将确定捕获的匹配项前后的行数。如果您输入两个数字作为此参数的值，则第一个数字将确定匹配项前面的行数，第二个数字确定匹配后面的行数。

在默认显示中，包含匹配项的行会通过显示内容第一列中的右尖括号 (ASCII 62) 来指示。无标记行是上下文。

此参数不会更改 Select-String 生成的对象数。Select-String 会为每个匹配项生成一个 MatchInfo (Microsoft.PowerShell.Commands.MatchInfo) 对象。上下文以字符串数组的形式存储在该对象的 Context 属性中。

当您将 Select-String 命令的输出通过管道传递给另一个 Select-String 命令时，接收命令只搜索匹配行（MatchInfo 对象的 Line 属性的值）中的文本，而不会搜索上下文行中的文本。因此，Context 参数在接收 Select-String 命令上无效。

当上下文包括匹配项时，每个匹配项的 MatchInfo 对象都将包括所有上下文行，但是重叠行只会在显示内容中出现一次。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>指定 Select-String 在搜索文件时应采用的字符编码。默认值为 UTF8。

有效值包括“UTF7”、“UTF8”、“UTF32”、“ASCII”、“Unicode”、“BigEndianUnicode”、“Default”和“OEM”。“Default”是系统当前 ANSI 代码页的编码。“OEM”是操作系统的当前原始设备制造商代码页标识符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>排除指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>只包括指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>List</maml:name>
				<maml:description>
					<maml:para>只返回每个输入文件中的第一个匹配项。默认情况下，Select-String 会为它找到的每个匹配项返回一个 MatchInfo 对象。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NotMatch</maml:name>
				<maml:description>
					<maml:para>查找与指定模式不匹配的文本。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Quiet</maml:name>
				<maml:description>
					<maml:para>返回布尔值（True 或 False），而不是 MatchInfo 对象。如果找到模式，则该值为“True”，否则为“False”。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SimpleMatch</maml:name>
				<maml:description>
					<maml:para>使用简单匹配，而不是正则表达式匹配。在简单匹配中，Select-String 会在输入内容中搜索 Pattern 参数中的文本。它不会将 Pattern 参数的值解释为正则表达式语句。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>AllMatches</maml:name>
			<maml:description>
				<maml:para>在每个文本行中搜索多个匹配项。若不使用此参数，Select-String 只会查找每个文本行中的第一个匹配项。

当 Select-String 在一个文本行中找到多个匹配项时，它仍然只会为该行发出一个 MatchInfo 对象，但是该对象的 Matches 属性包含所有匹配项。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CaseSensitive</maml:name>
			<maml:description>
				<maml:para>使匹配项区分大小写。默认情况下，匹配项不区分大小写。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Context</maml:name>
			<maml:description>
				<maml:para>捕获包含匹配项的行前后的指定行数。这允许您在上下文中查看匹配项。

如果您输入一个数字作为此参数的值，该数字将确定捕获的匹配项前后的行数。如果您输入两个数字作为此参数的值，则第一个数字将确定匹配项前面的行数，第二个数字确定匹配后面的行数。

在默认显示中，包含匹配项的行会通过显示内容第一列中的右尖括号 (ASCII 62) 来指示。无标记行是上下文。

此参数不会更改 Select-String 生成的对象数。Select-String 会为每个匹配项生成一个 MatchInfo (Microsoft.PowerShell.Commands.MatchInfo) 对象。上下文以字符串数组的形式存储在该对象的 Context 属性中。

当您将 Select-String 命令的输出通过管道传递给另一个 Select-String 命令时，接收命令只搜索匹配行（MatchInfo 对象的 Line 属性的值）中的文本，而不会搜索上下文行中的文本。因此，Context 参数在接收 Select-String 命令上无效。

当上下文包括匹配项时，每个匹配项的 MatchInfo 对象都将包括所有上下文行，但是重叠行只会在显示内容中出现一次。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>指定 Select-String 在搜索文件时应采用的字符编码。默认值为 UTF8。

有效值包括“UTF7”、“UTF8”、“UTF32”、“ASCII”、“Unicode”、“BigEndianUnicode”、“Default”和“OEM”。“Default”是系统当前 ANSI 代码页的编码。“OEM”是操作系统的当前原始设备制造商代码页标识符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>排除指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>只包括指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要搜索的文本。请输入包含文本的变量，或键入可获取文本的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>List</maml:name>
			<maml:description>
				<maml:para>只返回每个输入文件中的第一个匹配项。默认情况下，Select-String 会为它找到的每个匹配项返回一个 MatchInfo 对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NotMatch</maml:name>
			<maml:description>
				<maml:para>查找与指定模式不匹配的文本。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定要搜索的文件的路径。允许使用通配符。默认位置为本地目录。

指定目录中的文件，如“log1.txt”、“*.doc”或“*.*”。如果只指定一个目录，该命令会失败。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Pattern</maml:name>
			<maml:description>
				<maml:para>指定要查找的文本。键入字符串或正则表达式。如果您键入字符串，则使用 SimpleMatch 参数。

若要了解正则表达式，请参阅 about_Regular_Expressions。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Quiet</maml:name>
			<maml:description>
				<maml:para>返回布尔值（True 或 False），而不是 MatchInfo 对象。如果找到模式，则该值为“True”，否则为“False”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SimpleMatch</maml:name>
			<maml:description>
				<maml:para>使用简单匹配，而不是正则表达式匹配。在简单匹配中，Select-String 会在输入内容中搜索 Pattern 参数中的文本。它不会将 Pattern 参数的值解释为正则表达式语句。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将具有 ToString 方法的任何对象传递给 Select-String。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Microsoft.PowerShell.Commands.MatchInfo 或 System.Boolean</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					默认情况下，输出内容是一组 MatchInfo 对象，每个找到的匹配项对应于一个 MatchInfo 对象。如果使用 Quiet 参数，则输出内容是一个指示是否找到模式的布尔值。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Select-String 类似于 UNIX 中的 Grep 命令和 Windows 中的 FindStr 命令。

若要使用 Select-String，请键入要查找的文本作为 Pattern 参数的值。


若要指定要搜索的文本，请执行以下操作：

-- 以带引号字符串的形式键入文本，然后通过管道将其传递给 Select-String。
-- 将文本字符串存储到变量中，然后将该变量指定为 InputObject 参数的值。
-- 如果文本存储在文件中，则使用 Path 参数指定文件的路径。


默认情况下，Select-String 会将 Pattern 参数的值解释为正则表达式。（有关详细信息，请参阅 about_Regular_Expressions。）不过，您可以使用 SimpleMatch 参数来重写正则表达式匹配。SimpleMatch 参数会在输入内容中查找 Pattern 参数值的实例。

Select-String 的默认输出是 MatchInfo 对象，它包含有关匹配项的详细信息。当您在文件中搜索文本时，该对象中的信息非常有用，因为 MatchInfo 对象具有 Filename 和 Line 之类的属性。当输入内容不是来自文件时，这些参数的值是“InputStream”。

如果您不需要 MatchInfo 对象中的信息，可使用 Quiet 参数，它会返回一个布尔值（True 或 False）以指明是否找到了匹配项，而不返回 MatchInfo 对象。

匹配短语时，Select-String 使用为系统设置的当前区域性。若要查找当前区域性，请使用 Get-Culture cmdlet。

若要查找 MatchInfo 对象的属性，请键入：

select-string -path test.txt -pattern &quot;test&quot; | get-member | format-list -property *
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
&quot;Hello&quot;,&quot;HELLO&quot; | select-string -pattern &quot;HELLO&quot; -casesensitive                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令为通过管道传递给 Select-String 命令的文本执行区分大小写的匹配。

因此，Select-String 只查找“HELLO”，因为“Hello”不匹配。

因为每个带引号的字符串都被视为一行，所以若不使用 CaseSensitive 参数，Select-String 会将这两个字符串都识别为匹配项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
select-string -path *.xml -pattern &quot;the the&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在当前目录中搜索所有扩展名为 .xml 的文件，并显示这些文件中包含字符串“the the”的各行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
select-string -path $pshome\en-US\*.txt -pattern &quot;@&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Windows PowerShell 概念性帮助文件 (about_*.txt) 中搜索有关 at 符号 (@) 用法的信息。

为了指示路径，此命令使用 $pshome 自动变量的值，该变量存储 Windows PowerShell 安装目录的路径。在此示例中，该命令搜索 en-US 子目录，该目录包含 Windows PowerShell 的美国英语版帮助文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function search-help
{
    $pshelp = &quot;$pshome\es\about_*.txt&quot;, &quot;$pshome\en-US\*dll-help.xml&quot;
    select-string -path $pshelp -pattern $args[0]
}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这一简单函数使用 Select-String cmdlet 在 Windows PowerShell 帮助文件中搜索特定字符串。在此示例中，该函数在“en-US”子目录中搜索美国英语语言文件。

若要使用该函数查找字符串（如“psdrive”），请键入“search-help psdrive”。

若要在任何 Windows PowerShell 控制台中使用此函数，请将路径更改为指向系统上的 Windows PowerShell 帮助文件，然后将该函数粘贴到您的 Windows PowerShell 配置文件中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$events = get-eventlog -logname application -newest 100

C:\PS&gt; $events | select-string -inputobject {$_.message} -pattern &quot;failed&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例在事件查看器的应用程序日志的 100 个最新事件中搜索字符串“failed”。

第一条命令使用 Get-EventLog cmdlet 从应用程序事件日志中获取 100 个最新事件。然后，它将事件存储在 $events 变量中。

第二条命令使用管道运算符 (|) 将 $events 变量中的对象发送到 Select-String。它使用 InputObject 参数代表来自 $events 变量的输入。InputObject 参数的值是每个通过管道传递的对象的 Message 属性。当前对象由 $_ 符号表示。

当每个事件到达管道中时，Select-String 会在它的 Message 属性值中搜索“failed”字符串，然后显示包含匹配项的所有行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem c:\windows\system32\* -include *.txt -recurse |
select-string -pattern &quot;Microsoft&quot; -casesensitive                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令检查 C:\Windows\System32 子目录中所有扩展名为 .txt 的文件，并搜索字符串“Microsoft”。CaseSensitive 参数指明“Microsoft”中的“M”必须大写，其余字符必须小写，以便 Select-String 按此条件查找匹配项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
select-string -path process.txt -pattern idle, svchost -notmatch                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令查找 Process.txt 文件中不包括“idle”或“svchost”字词的文本行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$f = select-string -path audit.log -pattern &quot;logon failed&quot; -context 2, 3

C:\PS&gt; $f.count

C:\PS&gt; ($f)[0].context | format-list                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>第一条命令在 Audit.Log 文件中搜索短语“logon failed”。它使用 Context 参数捕获匹配项的前 2 行和后 3 行。

第二条命令使用对象数组的 Count 属性来显示找到的匹配项数，在本例中为 2。

第三条命令显示第一个 MatchInfo 对象的 Context 属性中存储的行。它使用数组表示法指明第一个匹配项（在从零开始的数组中为匹配项 0），然后使用 Format-List cmdlet 以列表形式显示 Context 属性的值。

输出内容包括两个 MatchInfo 对象，每个检测到的匹配项一个。上下文行存储在 MatchInfo 对象的 Context 属性中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = get-childitem $pshome\en-us\about*.help.txt | select-string -pattern transcript


C:\PS&gt; $b = get-childitem $pshome\en-us\about*.help.txt | select-string -pattern transcript -allmatches

C:\PS&gt; $a
C:\Windows\system32\WindowsPowerShell\v1.0\en-us\about_Pssnapins.help.txt:39:       Start-Transcript and Stop-Transcript.

C:\PS&gt; $b
C:\Windows\system32\WindowsPowerShell\v1.0\en-us\about_Pssnapins.help.txt:39:       Start-Transcript and Stop-Transcript.


C:\PS&gt;&gt; $a.matches
Groups   : {Transcript}
Success  : True
Captures : {Transcript}
Index    : 13
Length   : 10
Value    : Transcript


C:\PS&gt; $b.matches
Groups   : {Transcript}
Success  : True
Captures : {Transcript}
Index    : 13
Length   : 10
Value    : Transcript

Groups   : {Transcript}
Success  : True
Captures : {Transcript}
Index    : 33
Length   : 10
Value    : Transcript
                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明 Select-String 的 AllMatches 参数的作用。AllMatches 会查找一行中的所有模式匹配，而不是只查找每行中的第一个匹配项。

该示例中的第一条命令在 Windows PowerShell 概念性帮助文件（“about”帮助）中搜索单词“transcript”。第二条命令与之相同，只不过它使用 AllMatches 参数。

第一条命令的输出保存在 $a 变量中，第二条命令的输出保存在 $b 变量中。

当您显示变量的值时，默认显示是相同的，如输出示例中所示。

但是，第五条和第六条命令会显示每个对象的 Matches 属性的值。第一条命令的 Matches 属性只包含一个匹配项（也就是一个 System.Text.RegularExpressions.Match 对象），而第二条命令的 Matches 属性包含该行中两个匹配项的对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113388</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Comparison_Operators</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Regular_Expressions</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Select-XML
		</command:name>
		<maml:description>
			<maml:para>在 XML 字符串或文档中查找文本。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Select</command:verb>
		<command:noun>XML</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Select-XML cmdlet 使您可以使用 XPath 查询来搜索 XML 字符串或文档中的文本。输入 XPath 查询，并使用 Content、Path 或 Xml 参数指定要搜索的 XML。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Select-XML</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>Content</maml:name>
				<maml:description>
					<maml:para>指定包含要搜索的 XML 的字符串。也可以通过管道将字符串传递给 Select-XML。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Xpath</maml:name>
				<maml:description>
					<maml:para>指定 XPath 搜索查询。查询语言区分大小写。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Namespace</maml:name>
				<maml:description>
					<maml:para>指定 XML 中使用的命名空间的哈希表。使用格式 @{&lt;namespaceName&gt; = &lt;namespaceValue&gt;}。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Select-XML</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Path</maml:name>
				<maml:description>
					<maml:para>指定要搜索的 XML 文件的路径和文件名。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Xpath</maml:name>
				<maml:description>
					<maml:para>指定 XPath 搜索查询。查询语言区分大小写。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Namespace</maml:name>
				<maml:description>
					<maml:para>指定 XML 中使用的命名空间的哈希表。使用格式 @{&lt;namespaceName&gt; = &lt;namespaceValue&gt;}。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Select-XML</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>Xml</maml:name>
				<maml:description>
					<maml:para>指定一个或多个 XML 节点。每条命令中都需要 Path 或 Xml 参数。

XML 文档将作为 XML 节点的集合进行处理。如果您通过管道将 XML 文档传递给 Select-XML，则会在文档通过管道时分别搜索每个文档节点。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">XmlNode[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Xpath</maml:name>
				<maml:description>
					<maml:para>指定 XPath 搜索查询。查询语言区分大小写。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Namespace</maml:name>
				<maml:description>
					<maml:para>指定 XML 中使用的命名空间的哈希表。使用格式 @{&lt;namespaceName&gt; = &lt;namespaceValue&gt;}。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>Content</maml:name>
			<maml:description>
				<maml:para>指定包含要搜索的 XML 的字符串。也可以通过管道将字符串传递给 Select-XML。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Namespace</maml:name>
			<maml:description>
				<maml:para>指定 XML 中使用的命名空间的哈希表。使用格式 @{&lt;namespaceName&gt; = &lt;namespaceValue&gt;}。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">hashtable</command:parameterValue>
			<dev:type>
				<maml:name>hashtable</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Path</maml:name>
			<maml:description>
				<maml:para>指定要搜索的 XML 文件的路径和文件名。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>Xml</maml:name>
			<maml:description>
				<maml:para>指定一个或多个 XML 节点。每条命令中都需要 Path 或 Xml 参数。

XML 文档将作为 XML 节点的集合进行处理。如果您通过管道将 XML 文档传递给 Select-XML，则会在文档通过管道时分别搜索每个文档节点。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">XmlNode[]</command:parameterValue>
			<dev:type>
				<maml:name>XmlNode[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Xpath</maml:name>
			<maml:description>
				<maml:para>指定 XPath 搜索查询。查询语言区分大小写。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String 或 System.Xml.XmlNode</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					您可以通过管道将路径或 XML 节点传递给 Select-XML。

				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Xml.XmlElement 或 System.Xml.XmlText</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          XPath 是用于识别 XML 文档的组成部分的标准语言。有关 XPath 语言的详细信息，请参阅 MSDN (Microsoft Developer Network) Library 中的“事件选择”主题的“选择筛选器”部分，网址是 http://go.microsoft.com/fwlink/?LinkId=143608。另请参阅 MSDN Library 中的“XPath 参考”，网址是 http://go.microsoft.com/fwlink/?LinkId=143609。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$path = &quot;$env:windir\System32\WindowsPowerShell\v1.0\Types.ps1xml&quot;

C:\PS&gt; select-xml -path $path -xpath &quot;/Types/Type/Members/AliasProperty&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例在 Types.ps1xml 文件中搜索 AliasProperty 节点的子项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
select-xml -path test*.xml, help.xml -xpath &quot;/Tests/Test[1]/Name&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Select-XML 在多个 XML 文件中搜索。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
[xml]$Types = get-content &quot;$env:windir\System32\WindowsPowerShell\v1.0\Types.ps1xml&quot;

C:\PS&gt; select-xml -xml $Types -xpath &quot;//MethodName&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何通过管道将 XML 文档传递给搜索路径。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$namespace = @{command=&quot;http://schemas.microsoft.com/maml/dev/command/2004/10&quot;; maml=&quot;http://schemas.microsoft.com/maml/2004/10&quot;; dev=&quot;http://schemas.microsoft.com/maml/dev/2004/10&quot;}

C:\PS&gt; $path = &quot;$env:windir\System32\WindowsPowerShell\V1.0\en-us\*dll-Help.xml&quot;

C:\PS&gt; select-xml -path $path -namespace $namespace -xpath &quot;//command:name&quot;

Text                      Node      Path                                      
----                      ----      ----                                      
Add-Computer              name      C:\Windows\System32\WindowsPowerShell\V...
Add-Content               name      C:\Windows\System32\WindowsPowerShell\V...
Checkpoint-Computer       name      C:\Windows\System32\WindowsPowerShell\V...
Clear-Content             name      C:\Windows\System32\WindowsPowerShell\V...
Clear-EventLog            name      C:\Windows\System32\WindowsPowerShell\V...
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Select-XML cmdlet 搜索 Windows PowerShell 基于 XML 的 cmdlet 帮助文件。

第一条命令创建一个表示 XML 命名空间的哈希表，并将它保存在 $namespace 变量中。

第二条命令将帮助文件的路径保存到 $path 变量中。

第三条命令使用 Select-Xml 通过查找文件中任意位置的 Command:Name 标记来搜索 XML 中的 cmdlet 名称。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
select-xml -content $xml -xpath &quot;//edition&quot;

C:\PS&gt; $xml = @&quot;
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
 &lt;Book&gt;
   &lt;projects&gt;
     &lt;project name=&quot;Book1&quot; date=&quot;2009-01-20&quot;&gt;
       &lt;editions&gt;
          &lt;edition language=&quot;English&quot;&gt;En.Book1.com&lt;/edition&gt;
          &lt;edition language=&quot;German&quot;&gt;Ge.Book1.Com&lt;/edition&gt;
          &lt;edition language=&quot;French&quot;&gt;Fr.Book1.com&lt;/edition&gt;
          &lt;edition language=&quot;Polish&quot;&gt;Pl.Book1.com&lt;/edition&gt;
       &lt;/editions&gt;
     &lt;/project&gt;
   &lt;/projects&gt;
 &lt;/Book&gt;
&quot;@

C:\PS&gt; select-xml -content $xml -xpath &quot;//edition&quot;

Text            Node          Path                                      
----            ----          ----                                      
En.Book1.com    edition       InputStream                               
Ge.Book1.Com    edition       InputStream                               
Fr.Book1.com    edition       InputStream                               
Pl.Book1.com    edition       InputStream


C:\PS&gt; $xml | select-xml -xpath &quot;//edition&quot;      

Text            Node          Path                                      
----            ----          ----                                      
En.Book1.com    edition       InputStream                               
Ge.Book1.Com    edition       InputStream                               
Fr.Book1.com    edition       InputStream                               
Pl.Book1.com    edition       InputStream                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例使用 Select-XML 的 Content 参数搜索 here-string 中的 XML 内容。

第一条命令将 here-string 保存在 $xml 变量中。

第二条命令使用 Content 参数指定 $xml 变量中的 XML。

第三条命令与第二条命令等效。它使用管道运算符 (|) 将 $xml 变量中的 XML 发送到 Select-XML cmdlet。

有关 here-string 的详细信息，请键入 about_Quoting_Rules。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135255</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-XML</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Send-MailMessage
		</command:name>
		<maml:description>
			<maml:para>发送电子邮件。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Send</command:verb>
		<command:noun>MailMessage</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Send-MailMessage cmdlet 可从 Windows PowerShell 内发送电子邮件。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Send-MailMessage</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>To</maml:name>
				<maml:description>
					<maml:para>指定邮件发送到的地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Subject</maml:name>
				<maml:description>
					<maml:para>指定电子邮件的主题。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>From</maml:name>
				<maml:description>
					<maml:para>指定用来发送邮件的地址。输入姓名（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。此参数是必需的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Body</maml:name>
				<maml:description>
					<maml:para>指定电子邮件的正文（内容）。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>SmtpServer</maml:name>
				<maml:description>
					<maml:para>指定发送电子邮件的 SMTP 服务器的名称。

默认值是 $PSEmailServer 首选项变量的值。如果未设置该首选项变量并且省略了此参数，该命令会失败。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>Attachments</maml:name>
				<maml:description>
					<maml:para>指定要附加到电子邮件的文件的路径和文件名。您可以使用此参数或通过管道将路径和文件名传递给 Send-MailMessage。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Bcc</maml:name>
				<maml:description>
					<maml:para>指定接收邮件副本但未列为邮件收件人的电子邮件地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>BodyAsHtml</maml:name>
				<maml:description>
					<maml:para>指示 Body 参数的值包含 HTML。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Cc</maml:name>
				<maml:description>
					<maml:para>指定电子邮件要抄送 (CC) 到的电子邮件地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Credential</maml:name>
				<maml:description>
					<maml:para>指定有权执行此操作的用户帐户。默认值为当前用户。

键入用户名，例如“User01”或“Domain01\User01”。或者，输入 PSCredential 对象，例如来自 Get-Credential cmdlet 的对象。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DeliveryNotificationOption</maml:name>
				<maml:description>
					<maml:para>指定电子邮件的送达通知选项。您可以指定多个值。“None”为默认值。此参数的别名为“dno”。

送达通知会通过电子邮件发送到 To 参数的值中指定的地址。

有效值包括：

 -- None：无通知。
 -- OnSuccess：成功送达时通知。
 -- OnFailure：未能送达时通知。
 -- Delay：送达延迟时通知。
 -- Never：从不通知。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OnSuccess</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OnFailure</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Delay</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Never</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Encoding</maml:name>
				<maml:description>
					<maml:para>指定对正文和主题使用的编码。有效值包括 ASCII、UTF8、UTF7、UTF32、Unicode、BigEndianUnicode、Default 和 OEM。ASCII 是默认值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Encoding</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Priority</maml:name>
				<maml:description>
					<maml:para>指定电子邮件的优先级。此参数的有效值包括 Normal、High 和 Low。Normal 是默认值。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Normal</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Low</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">High</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>UseSsl</maml:name>
				<maml:description>
					<maml:para>使用安全套接字层 (SSL) 协议来建立与远程计算机的连接，以便发送邮件。默认情况下，不使用 SSL。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>Attachments</maml:name>
			<maml:description>
				<maml:para>指定要附加到电子邮件的文件的路径和文件名。您可以使用此参数或通过管道将路径和文件名传递给 Send-MailMessage。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Bcc</maml:name>
			<maml:description>
				<maml:para>指定接收邮件副本但未列为邮件收件人的电子邮件地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Body</maml:name>
			<maml:description>
				<maml:para>指定电子邮件的正文（内容）。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>BodyAsHtml</maml:name>
			<maml:description>
				<maml:para>指示 Body 参数的值包含 HTML。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Cc</maml:name>
			<maml:description>
				<maml:para>指定电子邮件要抄送 (CC) 到的电子邮件地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Credential</maml:name>
			<maml:description>
				<maml:para>指定有权执行此操作的用户帐户。默认值为当前用户。

键入用户名，例如“User01”或“Domain01\User01”。或者，输入 PSCredential 对象，例如来自 Get-Credential cmdlet 的对象。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>当前用户</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DeliveryNotificationOption</maml:name>
			<maml:description>
				<maml:para>指定电子邮件的送达通知选项。您可以指定多个值。“None”为默认值。此参数的别名为“dno”。

送达通知会通过电子邮件发送到 To 参数的值中指定的地址。

有效值包括：

 -- None：无通知。
 -- OnSuccess：成功送达时通知。
 -- OnFailure：未能送达时通知。
 -- Delay：送达延迟时通知。
 -- Never：从不通知。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DeliveryNotificationOptions</command:parameterValue>
			<dev:type>
				<maml:name>DeliveryNotificationOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Encoding</maml:name>
			<maml:description>
				<maml:para>指定对正文和主题使用的编码。有效值包括 ASCII、UTF8、UTF7、UTF32、Unicode、BigEndianUnicode、Default 和 OEM。ASCII 是默认值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Encoding</command:parameterValue>
			<dev:type>
				<maml:name>Encoding</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>ASCII</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>From</maml:name>
			<maml:description>
				<maml:para>指定用来发送邮件的地址。输入姓名（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Priority</maml:name>
			<maml:description>
				<maml:para>指定电子邮件的优先级。此参数的有效值包括“普通”、“高”和“低”。“普通”是默认值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">MailPriority</command:parameterValue>
			<dev:type>
				<maml:name>MailPriority</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>普通。</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>SmtpServer</maml:name>
			<maml:description>
				<maml:para>指定发送电子邮件的 SMTP 服务器的名称。

默认值是 $PSEmailServer 首选项变量的值。如果未设置该首选项变量并且省略了此参数，该命令会失败。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>$PSEmailServer</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Subject</maml:name>
			<maml:description>
				<maml:para>指定电子邮件的主题。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>To</maml:name>
			<maml:description>
				<maml:para>指定邮件发送到的地址。输入名称（可选）和电子邮件地址，如“Name &lt;someone@example.com&gt;”。此参数是必需的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>UseSsl</maml:name>
			<maml:description>
				<maml:para>使用安全套接字层 (SSL) 协议来建立与远程计算机的连接，以便发送邮件。默认情况下，不使用 SSL。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					您可以通过管道将附件的路径和文件名传递给 Send-MailMessage。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
send-mailmessage -to &quot;User01 &lt;user01@example.com&gt;&quot; -from &quot;User02 &lt;user02@example.com&gt;&quot; -subject &quot;Test mail&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 User01 的电子邮件发送给 User02。

该电子邮件有主题，但没有正文，主题是必需的，正文是可选的。此外，由于未指定 SmtpServer 参数，Send-MailMessage 会对 SMTP 服务器使用 $PSEmailServer 首选项变量的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
send-mailmessage -from &quot;User01 &lt;user01@example.com&gt;&quot; -to &quot;User02 &lt;user02@example.com&gt;&quot;, &quot;User03 &lt;user03@example.com&gt;&quot; -subject &quot;Sending the Attachment&quot; -body &quot;Forgot to send the attachment. Sending now.&quot; -Attachment &quot;data.csv&quot; -priority High -dno onSuccess, onFailure -smtpServer smtp.fabrikam.com                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 User01 的含有附件的电子邮件发送给其他两个用户。

它指定优先级值为“High”，并请求在电子邮件送达或发送失败时通过电子邮件接收送达通知。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
send-mailmessage -to &quot;User01 &lt;user01@example.com&gt;&quot; -from &quot;ITGroup &lt;itdept@example.com&gt;&quot; -cc &quot;User02 &lt;user02@example.com&gt;&quot; -bcc ITMgr &lt;itmgr@example.com&gt; -subject &quot;Don't forget today's meeting!&quot; -credential domain01\admin01 -useSSL                         </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将 User01 的电子邮件发送给 ITGroup 邮件列表，并抄送 (CC) 给 User02，密件抄送 (BCC) 给 IT 经理 (ITMgr)。

此命令使用域管理员的凭据以及 UseSSL 参数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135256</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Alias
		</command:name>
		<maml:description>
			<maml:para>在当前 Windows PowerShell 会话中为 cmdlet 或其他命令元素创建或更改别名（替代名称）。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>Alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Set-Alias cmdlet 为 cmdlet 或命令元素（例如函数、脚本、文件或其他可执行程序）创建或更改别名（替代名称）。还可以使用 Set-Alias 将当前别名重新分配给一个新命令，或更改别名的任何属性（例如其说明）。除非将别名添加到 Windows PowerShell 配置文件中，否则在退出会话或关闭 Windows PowerShell 时，对该别名所做的更改将会丢失。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定新别名。别名中可以使用任何字母数字字符，但第一个字符不能是数字。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>指定作为别名的 cmdlet 或命令元素的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>指定别名的说明。可以键入任何字符串。如果说明包括空格，请将其括在引号中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 设置只读别名。使用 Option 参数可创建只读别名。Force 参数不能设置常量别名。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>设置别名的 Options 属性的值。

有效值包括：

-- None：不设置任何选项。（默认）

-- ReadOnly：除非使用 Force 参数，否则无法更改别名的属性。您可以使用 Remove-Item 来删除别名。

-- Constant：无法删除别名，也无法更改其属性。Constant 仅在您创建别名时才可用。不能将现有别名的选项更改为 Constant。

-- Private：别名只在 Scope 参数指定的作用域内可用。在所有其他作用域中它都不可见。

-- AllScope：别名将复制到创建的所有新作用域中。

若要查看别名的 Options 属性，请键入“get-alias | format-table -property Name, Definition, Options -autosize”。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadOnly</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constant</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回一个表示别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>指定别名的说明。可以键入任何字符串。如果说明包括空格，请将其括在引号中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 设置只读别名。使用 Option 参数可创建只读别名。Force 参数不能设置常量别名。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定新别名。别名中可以使用任何字母数字字符，但第一个字符不能是数字。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>设置别名的 Options 属性的值。

有效值包括：

-- None：不设置任何选项。（默认）

-- ReadOnly：除非使用 Force 参数，否则无法更改别名的属性。您可以使用 Remove-Item 来删除别名。

-- Constant：无法删除别名，也无法更改其属性。Constant 仅在您创建别名时才可用。不能将现有别名的选项更改为 Constant。

-- Private：别名只在 Scope 参数指定的作用域内可用。在所有其他作用域中它都不可见。

-- AllScope：别名将复制到创建的所有新作用域中。

若要查看别名的 Options 属性，请键入“get-alias | format-table -property Name, Definition, Options -autosize”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回一个表示别名的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>指定此别名的有效作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>指定作为别名的 cmdlet 或命令元素的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Set-Alias 生成一个表示别名的 System.Management.Automation.AliasInfo 对象。否则，此 cmdlet 将不产生任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          别名是 cmdlet 或命令元素的替代名称或昵称。若要运行 cmdlet，您可以使用其全名或任何有效别名。有关详细信息，请参阅 about_Aliases。

若要创建新别名，请使用 Set-Alias 或 New-Alias。若要删除别名，请使用 Remove-Item。

一个 cmdlet 可以具有多个别名，但一个别名一次只能与一个 cmdlet 相关联。如果使用 set-alias 将别名与其他 cmdlet 相关联，则该别名将不再与原来的 cmdlet 相关联。

您可以为 cmdlet 创建别名，但不能为带有参数和值的命令创建别名。例如，可以为 Set-Location 创建别名，但不能为“Set-Location C:\Windows\System32”创建别名。若要为某个命令创建别名，请创建一个包含该命令的函数，然后为此函数创建别名。

若要从某个会话中保存别名并将其用于其他会话中，请将 set-alias 命令添加到您的 Windows PowerShell 配置文件中。默认情况下配置文件不存在。若要在 $profile 变量中存储的路径中创建一个配置文件，请键入“new-item -type file -force $profile”。若要查看 $profile 变量的值，请键入“$profile”。

也可以通过使用 Export-Alias 将会话中的别名复制到文件中来保存别名，然后可使用 Import-Alias 将这些别名添加到新会话的别名列表中。

还可以使用 Set-Alias 的内置别名“sal”来对其进行引用。有关详细信息，请参阅 about_Aliases。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-alias -name list -value get-childitem                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令为 Get-ChildItem cmdlet 创建别名“list”。创建该别名后，您可以在命令行和脚本中使用“list”来代替“Get-ChildItem”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-alias list get-location                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将别名“list”与 Get-Location cmdlet 相关联。如果“list”是另一个 cmdlet 的别名，则此命令将更改其关联，以便让其仅作为 Get-Location 的别名。

此命令使用与上一示例中的命令相同的格式，但其省略了可选参数名称 -Name 和 -Value。在省略参数名称时，这些参数的值必须以指定的顺序出现在命令中。在此示例中，-Name 的值（“list”）必须为第一个参数，-Value 的值（“get-location”）必须为第二个参数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-alias scrub remove-item -option readonly -passthru | format-list                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将别名“scrub”与 Remove-Item cmdlet 相关联。它使用“ReadOnly”选项来防止删除该别名或防止将其分配给其他 cmdlet。

PassThru 参数指示 Windows PowerShell 将表示新别名的对象通过管道传递给 Format-List cmdlet。如果省略了 PassThru 参数，则不会显示此 cmdlet 的任何输出（以列表或其他形式）。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Set-Alias np c:\windows\notepad.exe                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将别名“np”与 Notepad 的可执行文件相关联。完成此命令后，若要从 Windows PowerShell 命令行中打开 Notepad，则只需键入“np”。

此示例演示了如何能为 cmdlet 之外的可执行文件和其他元素创建别名。

为使命令更为通用，您可以使用“Windir”环境变量 (${env:windir}) 来表示 C\Windows 目录。此命令的通用版本是“set-alias np ${env:windir}\notepad.exe”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
function CD32 {set-location c:\windows\system32}

C:\PS&gt;set-alias go cd32                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令显示了如何为带有参数的命令（甚至是包含多个命令的管道）分配别名。

您可以为 cmdlet 创建别名，但不能为由 cmdlet 及其参数组成的命令创建别名。不过，如果您将该命令放在函数或脚本中，则您可以创建一个有用函数或脚本名称，并可为该函数或脚本创建一个或多个别名。

在此示例中，用户希望为命令“set-location c:\windows\system32”（其中“set-location”是 cmdlet，而“C:\Windows\System32”是 Path 参数的值）创建一个别名。

为执行此操作，第一条命令创建了一个名为“CD32”的函数，其中包含 Set-Location 命令。

第二个命令为 CD32 函数创建别名“go”。然后，若要运行 Set-Location 命令，用户可以键入“CD32”或“go”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113390</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Date
		</command:name>
		<maml:description>
			<maml:para>将计算机上的系统时间更改为指定的时间。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>Date</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Set-Date cmdlet 将计算机上的系统日期和时间更改为指定的日期和时间。通过键入字符串或通过将 DateTime 或 TimeSpan 对象传递给 Set-Date，可以指定新的日期和/或时间。若要指定新的日期或时间，请使用 Date 参数。若要指定更改间隔，请使用 Adjust 参数。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Date</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Adjust</maml:name>
				<maml:description>
					<maml:para>向当前日期和时间中添加指定的值，或从中减去指定的值。您可以采用您的区域设置的标准日期和时间格式来键入调整，也可以使用 Adjust 参数将 TimeSpan 对象从 New-TimeSpan 传递给 Set-Date。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayHint</maml:name>
				<maml:description>
					<maml:para>确定要显示哪些日期和时间元素。

有效值包括：

-- date：仅显示日期
-- time：仅显示时间
-- datetime：显示日期和时间

此参数仅影响显示内容，而不影响 Get-Date 检索到的 DateTime 对象。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Date</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Time</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Date</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Date</maml:name>
				<maml:description>
					<maml:para>将日期和时间更改为指定的值。您可以采用短日期格式键入新日期，并以您的区域设置的标准时间格式键入时间。或者，您也可以从 Get-Date 传递 Date-Time 对象。

如果指定了日期而未指定时间，则 Set-Date 会将时间更改为指定日期的午夜 12 点。如果仅指定了时间，则不会更改日期。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>DisplayHint</maml:name>
				<maml:description>
					<maml:para>确定要显示哪些日期和时间元素。

有效值包括：

-- date：仅显示日期
-- time：仅显示时间
-- datetime：显示日期和时间

此参数仅影响显示内容，而不影响 Get-Date 检索到的 DateTime 对象。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Date</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Time</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Adjust</maml:name>
			<maml:description>
				<maml:para>向当前日期和时间中添加指定的值，或从中减去指定的值。您可以采用您的区域设置的标准日期和时间格式来键入调整，也可以使用 Adjust 参数将 TimeSpan 对象从 New-TimeSpan 传递给 Set-Date。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			<dev:type>
				<maml:name>TimeSpan</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Date</maml:name>
			<maml:description>
				<maml:para>将日期和时间更改为指定的值。您可以采用短日期格式键入新日期，并以您的区域设置的标准时间格式键入时间。或者，您也可以从 Get-Date 传递 Date-Time 对象。

如果指定了日期而未指定时间，则 Set-Date 会将时间更改为指定日期的午夜 12 点。如果仅指定了时间，则不会更改日期。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>DisplayHint</maml:name>
			<maml:description>
				<maml:para>确定要显示哪些日期和时间元素。

有效值包括：

-- date：仅显示日期
-- time：仅显示时间
-- datetime：显示日期和时间

此参数仅影响显示内容，而不影响 Get-Date 检索到的 DateTime 对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DisplayHintType</command:parameterValue>
			<dev:type>
				<maml:name>DisplayHintType</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.DateTime</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将日期传递给 Set-Date。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.DateTime</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Set-Date 返回一个表示它所设置的日期的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          请谨慎使用此 cmdlet。更改计算机上的日期和时间。此更改可能会使计算机无法接收由日期或时间触发的系统范围的事件和更新。使用 -WhatIf 和 -Confirm 参数可避免出现错误。

您可以在 Set-Date 中使用 DateTime 和 TimeSpan 对象的标准 .NET 方法，例如 AddDays、AddMonths 和 FromFileTime。有关详细信息，请参阅“DateTime 方法”和“TimeSpan 方法”。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Set-Date -Date (Get-Date).AddDays(3)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令对当前系统日期加上三天。它不会影响时间。此命令使用 Date 参数来指定日期。它使用 Get-Date cmdlet 来获取当前日期和时间，并使用值 3（天）对 DateTime 对象应用 AddDays .NET 方法。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-date -adjust -0:10:0 -displayHint time                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将当前系统时间回调 10 分钟。它使用 Adjust 参数以区域设置的标准时间格式来指定更改间隔和时间更改（减去 10 分钟）。DisplayHint 参数指示 Windows PowerShell 仅显示时间，但不会影响 Set-Date 返回的 DateTime 对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$t = get-date

C:\PS&gt;set-date -date $t                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将计算机上的系统日期和时间更改为变量 $t 中保存的日期和时间。第一条命令获取日期并将其存储在 $t 中。第二条命令使用 Date 参数将 $t 中的 DateTime 对象传递给 Set-Date cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$90mins = new-timespan -minutes 90

C:\PS&gt;set-date -adjust $90mins                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将本地计算机上的系统时间前调 90 分钟。第一条命令使用 New-Timespan cmdlet 创建具有 90 分钟间隔的 TimeSpan 对象，然后将该 TimeSpan 对象保存到 $90mins 变量中。第二条命令使用 Set-Date 的 Adjust 参数按照 $90mins 变量中的 TimeSpan 对象值来调整日期。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113393</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Date</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-TimeSpan</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-PSBreakpoint
		</command:name>
		<maml:description>
			<maml:para>在行、命令或变量上设置断点。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>PSBreakpoint</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Set-PSBreakpoint cmdlet 会在脚本或当前会话中运行的任何命令中设置一个断点。您可以在执行脚本或运行命令之前，或者在调试过程中在另一个断点处停止时，使用 Set-PSBreakpoint 设置断点。

注意：Set-PSBreakpoint 不能在远程计算机上设置断点。若要调试远程计算机上的脚本，请将该脚本复制到本地计算机，然后在本地调试。

每条 Set-PSBreakpoint 命令都创建以下三种断点中的一种：
  -- 行断点：在特定的行和列坐标处设置断点。
  -- 命令断点：在命令和函数上设置断点。
  -- 变量断点：在变量上设置断点。

您可以使用一条 Set-PSBreakpoint 命令在多个行、命令或变量上设置断点，但是每条 Set-PSBreakpoint 命令只设置一种断点。

在断点处，Windows PowerShell 会暂时停止执行，将控制权交给调试程序。命令提示符会更改为“DBG&gt;”，并且有一组调试程序命令可供使用。不过，您可以使用 Action 参数指定备用响应，如断点的条件或要执行其他任务（如日志记录或诊断）的指令。
 
Set-PSBreakpoint cmdlet 是设计用于调试 Windows PowerShell 脚本的多个 cmdlet 之一。有关 Windows PowerShell 调试程序的详细信息，请参阅 about_Debuggers。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>Command</maml:name>
				<maml:description>
					<maml:para>设置命令断点。输入命令名称（如“Get-Process”）或函数名称。允许使用通配符。

执行过程恰好在执行每个命令的每个实例之前停止。如果命令是一个函数，则每次调用函数时以及在每个 BEGIN、PROCESS 和 END 部分，执行过程都会停止。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>在每个指定的脚本文件中设置断点。输入一个或多个脚本文件的路径和文件名。如果这些文件位于当前目录，则可以省略路径。允许使用通配符。

默认情况下，变量断点和命令断点设置在当前会话中运行的任何命令上。只有在设置行断点时才需要此参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Action</maml:name>
				<maml:description>
					<maml:para>指定在每个断点处运行的命令，而不是在该处中断。输入包含命令的脚本块。您可以使用此参数设置条件断点或执行其他任务，如测试或日志记录。

如果省略此参数或不指定操作，则会在断点处停止执行并启动调试程序。

在使用 Action 参数时，会在每个断点处运行 Action 脚本块。不会停止执行，除非脚本块包括 Break 关键字。如果您在脚本块中使用 Continue 关键字，将会继续执行，直到下一个断点。

有关详细信息，请参阅 about_Script_Blocks、about_Break 和 about_Continue。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>在每个指定的脚本文件中设置断点。输入一个或多个脚本文件的路径和文件名。如果这些文件位于当前目录，则可以省略路径。允许使用通配符。

默认情况下，变量断点和命令断点设置在当前会话中运行的任何命令上。只有在设置行断点时才需要此参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>Line</maml:name>
				<maml:description>
					<maml:para>在脚本中设置行断点。输入一个或多个行号（以逗号分隔）。Windows PowerShell 会恰好在执行开始于每个指定行的语句之前停止。

行从脚本文件左上角的空白处开始计数，行号从 1（而不是 0）开始。如果您指定空白行，执行过程会在下一个非空白行之前停止。如果行超出范围，则永远不会命中该断点。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Column</maml:name>
				<maml:description>
					<maml:para>指定脚本文件中执行过程将会停止的列的列号。只输入一个列号。默认值是第 1 列。

Column 值与 Line 参数的值结合使用以指定断点。如果 Line 参数指定多行，Column 参数会在每个指定行上的指定列设置一个断点。Windows PowerShell 会在包括指定行和列位置处的字符的语句或表达式之前停止执行。

列从左上角的空白处开始计数，列号从 1（而不是 0）开始。如果您指定了脚本中不存在的列，则不会声明错误，但从不执行该断点。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Action</maml:name>
				<maml:description>
					<maml:para>指定在每个断点处运行的命令，而不是在该处中断。输入包含命令的脚本块。您可以使用此参数设置条件断点或执行其他任务，如测试或日志记录。

如果省略此参数或不指定操作，则会在断点处停止执行并启动调试程序。

在使用 Action 参数时，会在每个断点处运行 Action 脚本块。不会停止执行，除非脚本块包括 Break 关键字。如果您在脚本块中使用 Continue 关键字，将会继续执行，直到下一个断点。

有关详细信息，请参阅 about_Script_Blocks、about_Break 和 about_Continue。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-PSBreakpoint</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Variable</maml:name>
				<maml:description>
					<maml:para>设置变量断点。输入以逗号分隔的变量（无美元符号 ($)）列表。

使用 Mode 参数确定触发断点的访问模式。默认模式 Write 会恰好在将新值写入变量之前停止执行。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>在每个指定的脚本文件中设置断点。输入一个或多个脚本文件的路径和文件名。如果这些文件位于当前目录，则可以省略路径。允许使用通配符。

默认情况下，变量断点和命令断点设置在当前会话中运行的任何命令上。只有在设置行断点时才需要此参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Mode</maml:name>
				<maml:description>
					<maml:para>确定触发变量断点的访问模式。默认值为 Write。

仅当该命令中使用了 Variable 参数时，此参数才有效。该模式适用于命令中设置的所有断点。

有效值包括：

-- Write：恰好在将新值写入变量之前停止执行。

--  Read：在读取变量也就是访问变量的值（目的可能是要分配、显示或使用此值）时停止执行。在 Read 模式中，当变量的值更改时，执行过程不会停止。

--  ReadWrite：在读取或写入变量时停止执行。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Read</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Write</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadWrite</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Action</maml:name>
				<maml:description>
					<maml:para>指定在每个断点处运行的命令，而不是在该处中断。输入包含命令的脚本块。您可以使用此参数设置条件断点或执行其他任务，如测试或日志记录。

如果省略此参数或不指定操作，则会在断点处停止执行并启动调试程序。

在使用 Action 参数时，会在每个断点处运行 Action 脚本块。不会停止执行，除非脚本块包括 Break 关键字。如果您在脚本块中使用 Continue 关键字，将会继续执行，直到下一个断点。

有关详细信息，请参阅 about_Script_Blocks、about_Break 和 about_Continue。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Action</maml:name>
			<maml:description>
				<maml:para>指定在每个断点处运行的命令，而不是在该处中断。输入包含命令的脚本块。您可以使用此参数设置条件断点或执行其他任务，如测试或日志记录。

如果省略此参数或不指定操作，则会在断点处停止执行并启动调试程序。

在使用 Action 参数时，会在每个断点处运行 Action 脚本块。不会停止执行，除非脚本块包括 Break 关键字。如果您在脚本块中使用 Continue 关键字，将会继续执行，直到下一个断点。

有关详细信息，请参阅 about_Script_Blocks、about_Break 和 about_Continue。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Column</maml:name>
			<maml:description>
				<maml:para>指定脚本文件中执行过程将会停止的列的列号。只输入一个列号。默认值是第 1 列。

Column 值与 Line 参数的值结合使用以指定断点。如果 Line 参数指定多行，Column 参数会在每个指定行上的指定列设置一个断点。Windows PowerShell 会在包括指定行和列位置处的字符的语句或表达式之前停止执行。

列从左上角的空白处开始计数，列号从 1（而不是 0）开始。如果您指定了脚本中不存在的列，则不会声明错误，但从不执行该断点。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>Command</maml:name>
			<maml:description>
				<maml:para>设置命令断点。输入命令名称（如“Get-Process”）或函数名称。允许使用通配符。

执行过程恰好在执行每个命令的每个实例之前停止。如果命令是一个函数，则每次调用函数时以及在每个 BEGIN、PROCESS 和 END 部分，执行过程都会停止。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>Line</maml:name>
			<maml:description>
				<maml:para>在脚本中设置行断点。输入一个或多个行号（以逗号分隔）。Windows PowerShell 会恰好在执行开始于每个指定行的语句之前停止。

行从脚本文件左上角的空白处开始计数，行号从 1（而不是 0）开始。如果您指定空白行，执行过程会在下一个非空白行之前停止。如果行超出范围，则永远不会命中该断点。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Mode</maml:name>
			<maml:description>
				<maml:para>确定触发变量断点的访问模式。默认值为 Write。

仅当该命令中使用了 Variable 参数时，此参数才有效。该模式适用于命令中设置的所有断点。

有效值包括：

-- Write：恰好在将新值写入变量之前停止执行。

--  Read：在读取变量也就是访问变量的值（目的可能是要分配、显示或使用此值）时停止执行。在 Read 模式中，当变量的值更改时，执行过程不会停止。

--  ReadWrite：在读取或写入变量时停止执行。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">VariableAccessMode</command:parameterValue>
			<dev:type>
				<maml:name>VariableAccessMode</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>Script</maml:name>
			<maml:description>
				<maml:para>在每个指定的脚本文件中设置断点。输入一个或多个脚本文件的路径和文件名。如果这些文件位于当前目录，则可以省略路径。允许使用通配符。

默认情况下，变量断点和命令断点设置在当前会话中运行的任何命令上。只有在设置行断点时才需要此参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Variable</maml:name>
			<maml:description>
				<maml:para>设置变量断点。输入以逗号分隔的变量（无美元符号 ($)）列表。

使用 Mode 参数确定触发断点的访问模式。默认模式 Write 会恰好在将新值写入变量之前停止执行。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给 Set-PSBreakpoint。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>断点对象（System.Management.Automation.LineBreakpoint、System.Management.Automation.VariableBreakpoint、System.Management.Automation.CommandBreakpoint）</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Set-PSBreakpoint 返回一个表示它所设置的每个断点的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Set-PSBreakpoint 不能在远程计算机上设置断点。若要调试远程计算机上的脚本，请将该脚本复制到本地计算机，然后在本地调试。

当您在多个行、命令或变量上设置断点时，Set-PSBreakpoint 会为每个条目生成一个断点对象。

在命令提示符处设置函数或变量上的断点时，您可以在创建函数或变量之前或之后设置断点。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -script sample.ps1 -line 5

Column     : 0
Line       : 5
Action     :
Enabled    : True
HitCount   : 0
Id         : 0
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Sample.ps1 脚本中的第 5 行设置断点。因此，当脚本运行时，执行过程会恰好在要执行第 5 行时停止。

当您按行号设置新断点时，Set-PSBreakpoint cmdlet 会生成一个包含断点 ID 和命中计数的行断点对象 (System.Management.Automation.LineBreakpoint)，如以下输出示例中所示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -command Increment -script sample.ps1

Command    : Increment
Action     :
Enabled    : True
HitCount   : 0
Id         : 1
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Sample.ps1 cmdlet 中的 Increment 函数上创建一个命令断点。此脚本恰好在每次调用指定函数之前停止执行。

结果会生成一个命令断点对象。在脚本运行之前，HitCount 属性的值为 0。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -script sample.ps1 -variable Server -Mode ReadWrite                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Sample.ps1 脚本中的 Server 变量上设置断点。它使用值为 ReadWrite 的 Mode 参数，以便在读取变量值之后、值发生更改之前停止执行。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -script Sample.ps1 -command &quot;write*&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Sample.ps1 脚本中每个以“write”开头的命令（如“write-host”）上设置一个断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -script test.ps1 -command DiskTest `
  -action { (if $disk -gt 2) { break } }                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>只有当 $disk 变量的值大于 2 时，此命令才会在 Test.ps1 脚本中的 DiskTest 函数处停止执行。

它使用 Set-PSBreakpoint cmdlet 在 DiskTest 函数上设置命令断点。该操作值是用于测试函数中 $disk 变量值的脚本块。

该操作使用 BREAK 关键字在满足条件时停止执行。替代项（也是默认值）是 CONTINUE。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -command checkpoint-computer

Id       : 0
Command  : checkpoint-computer
Enabled  : True
HitCount : 0
Action   :

C:\PS&gt; function CheckLog {
&gt;&gt; get-eventlog -log Application | 
&gt;&gt; where {($_.source -like &quot;TestApp&quot;) -and ($_.Message -like &quot;*failed*&quot;)}
&gt;&gt;}
&gt;&gt;
C:\PS&gt; Checklog
DEBUG: Hit breakpoint(s)
DEBUG:  Function breakpoint on 'prompt:Checklog'
C:\PS&gt;&gt;&gt;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 CheckLog 函数上设置断点。由于此命令未指定脚本，因此断点会设置在当前会话中运行的任何内容上。在调用函数而不是声明函数时，调试程序会中断。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-psbreakpoint -script sample.ps1 -line 1, 14, 19 -column 2 -action {&amp;(log.ps1)}

Column     : 2
Line       : 1
Action     :
Enabled    : True
HitCount   : 0
Id         : 6
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1

Column     : 2
Line       : 14
Action     :
Enabled    : True
HitCount   : 0
Id         : 7
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1

Column     : 2
Line       : 19
Action     :
Enabled    : True
HitCount   : 0
Id         : 8
Script     : C:\ps-test\sample.ps1
ScriptName : C:\ps-test\sample.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在 Sample.ps1 脚本中设置 3 个行断点。它在脚本中的每个指定行上的第 2 列设置一个断点。Action 参数中指定的操作适用于所有断点。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113449</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Debuggers</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Enable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Disable-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSBreakpoint</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSCallStack</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-TraceSource
		</command:name>
		<maml:description>
			<maml:para>配置、启动和停止对 Windows PowerShell 组件的跟踪。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>TraceSource</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Set-TraceSource cmdlet 配置、启动和停止对 Windows PowerShell 组件的跟踪。可以使用此命令来指定要跟踪的组件以及将跟踪输出发送到的位置。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的事件的类型。

有效值包括：“None”、“Constructor”、“Dispose”、“Finalizer”、“Method”、“Property”、“Delegates”、“Events”、“Exception”、“Lock”、“Error”、“Errors”、“Warning”、“Verbose”、“WriteLine”、“Data”、“Scope”、“ExecutionFlow”、“Assert”和“All”。默认值为“All”。

以下值是其他值的组合：

-- ExecutionFlow：（Constructor、Dispose、Finalizer、Method、Delegates、Events 和 Scope）

-- Data：（Constructor、Dispose、Finalizer、Property、Verbose 和 WriteLine）

-- Errors：（Error 和 Exception）。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;Constructor,Dispose&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constructor</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Dispose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Finalizer</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Method</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Property</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Delegates</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Events</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Exception</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Lock</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">WriteLine</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Data</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Scope</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Assert</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Debugger</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到调试程序。可以在任何用户模式或内核模式的调试程序或者 Microsoft Visual Studio 中查看输出。此参数还将选择默认的跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到指定文件。此参数还将选择文件跟踪侦听程序。如果使用此参数来启动跟踪，则请使用 RemoveFileListener 参数来停止该跟踪。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 覆盖只读文件。与 FilePath 参数一起使用。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ListenerOption</maml:name>
				<maml:description>
					<maml:para>向输出中的每条跟踪消息的前缀添加可选数据。有效值包括“None”、“LogicalOperationStack”、“DateTime”、“Timestamp”、“ProcessId”、“ThreadId”和“Callstack”。“None”为默认值。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;ProcessID,ThreadID&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Timestamp</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ProcessId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ThreadId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回一个表示跟踪会话的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PSHost</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到 Windows PowerShell 主机。此参数还将选择 PSHost 跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的组件。请输入各个组件的跟踪源的名称。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>RemoveListener</maml:name>
				<maml:description>
					<maml:para>通过删除跟踪侦听程序来停止跟踪。

将以下值与 RemoveListener 结合使用：

-- 若要删除 PSHost（控制台），请键入“Host”。
-- 若要删除调试程序，请键入“Debug”。
-- 若要删除所有跟踪侦听器，请键入“*”。

若要删除文件跟踪侦听程序，请使用 RemoveFileListener 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的组件。请输入各个组件的跟踪源的名称。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>RemoveFileListener</maml:name>
				<maml:description>
					<maml:para>通过删除与指定文件相关联的文件跟踪侦听程序来停止跟踪。输入跟踪输出文件的路径和文件名。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的组件。请输入各个组件的跟踪源的名称。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Debugger</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到调试程序。可以在任何用户模式或内核模式的调试程序或者 Microsoft Visual Studio 中查看输出。此参数还将选择默认的跟踪侦听程序。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FilePath</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到指定文件。此参数还将选择文件跟踪侦听程序。如果使用此参数来启动跟踪，则请使用 RemoveFileListener 参数来停止该跟踪。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 覆盖只读文件。与 FilePath 参数一起使用。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ListenerOption</maml:name>
			<maml:description>
				<maml:para>向输出中的每条跟踪消息的前缀添加可选数据。有效值包括“None”、“LogicalOperationStack”、“DateTime”、“Timestamp”、“ProcessId”、“ThreadId”和“Callstack”。“None”为默认值。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;ProcessID,ThreadID&quot;。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TraceOptions</command:parameterValue>
			<dev:type>
				<maml:name>TraceOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>确定要跟踪的组件。请输入各个组件的跟踪源的名称。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>确定要跟踪的事件的类型。

有效值包括：“None”、“Constructor”、“Dispose”、“Finalizer”、“Method”、“Property”、“Delegates”、“Events”、“Exception”、“Lock”、“Error”、“Errors”、“Warning”、“Verbose”、“WriteLine”、“Data”、“Scope”、“ExecutionFlow”、“Assert”和“All”。默认值为“All”。

以下值是其他值的组合：

-- ExecutionFlow：（Constructor、Dispose、Finalizer、Method、Delegates、Events 和 Scope）

-- Data：（Constructor、Dispose、Finalizer、Property、Verbose 和 WriteLine）

-- Errors：（Error 和 Exception）。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;Constructor,Dispose&quot;。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSTraceSourceOptions</command:parameterValue>
			<dev:type>
				<maml:name>PSTraceSourceOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回一个表示跟踪会话的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PSHost</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到 Windows PowerShell 主机。此参数还将选择 PSHost 跟踪侦听程序。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>RemoveFileListener</maml:name>
			<maml:description>
				<maml:para>通过删除与指定文件相关联的文件跟踪侦听程序来停止跟踪。输入跟踪输出文件的路径和文件名。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>RemoveListener</maml:name>
			<maml:description>
				<maml:para>通过删除跟踪侦听程序来停止跟踪。

将以下值与 RemoveListener 结合使用：

-- 若要删除 PSHost（控制台），请键入“Host”。
-- 若要删除调试程序，请键入“Debug”。
-- 若要删除所有跟踪侦听器，请键入“*”。

若要删除文件跟踪侦听程序，请使用 RemoveFileListener 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含名称的字符串传递给 Set-TraceSource。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.PSTraceSource</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Set-TraceSource 生成一个表示跟踪会话的 System.Management.Automation.PSTraceSource 对象。否则，此 cmdlet 将不产生任何输出。

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          跟踪是开发人员用于调试和优化程序的一种方法。在跟踪过程中，程序将生成有关其内部处理过程中每个步骤的详细消息。

Windows PowerShell 跟踪 cmdlet 专为帮助 Windows PowerShell 开发人员而设计，但其可供所有用户使用。使用这些 cmdlet，您可以监控 Windows PowerShell 功能的几乎每个方面。

“跟踪源”是每个 Windows PowerShell 组件的一部分，用于管理跟踪和生成该组件的跟踪消息。若要跟踪某个组件，您应标识其跟踪源。

“跟踪侦听程序”接收跟踪的输出并将其显示给用户。您可以选择将跟踪数据发送给用户模式或内核模式的调试程序、控制台、文件，或将其发送给从 System.Diagnostics.TraceListener 类中派生的自定义侦听程序。

若要启动跟踪，请使用 -Name 参数来指定跟踪源（要跟踪的组件），并使用 FilePath、Debugger 或 PSHost 参数来指定侦听器（输出的目标）。使用 Options 参数可确定要跟踪的事件的类型，而使用 ListenerOptions 参数可配置跟踪输出。

若要更改跟踪的配置，请输入 Set-TraceSource 命令，就如同要启动跟踪一样。Windows PowerShell 可识别出跟踪源已被跟踪。它将停止跟踪、添加新配置，然后启动或重新启动跟踪。

若要停止跟踪，请使用 RemoveListener 参数。若要停止使用文件侦听程序的跟踪（即使用 -FilePath 参数启动的跟踪），请使用 RemoveFileListener 参数。在删除侦听程序后，跟踪即会停止。

若要确定可以跟踪哪些组件，请使用 Get-TraceSource。每个模块的跟踪源都是在该组件处于使用状态时自动加载的，并会显示在 Get-TraceSource 的输出中。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Set-TraceSource -Name Parameterbinding -Option ExecutionFlow -PSHost '
-ListenerOption &quot;ProcessID,TimeStamp&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令启动对 Windows PowerShell 的 ParameterBinding 组件的跟踪。它使用 Name 参数来指定跟踪源、使用 Option 参数来选择 ExecutionFlow 跟踪事件，并使用 PSHost 参数来选择 Windows PowerShell 主机侦听程序，该侦听程序会将输出发送到控制台。ListenerOption 参数将“ProcessID”和“TimeStamp”值添加到跟踪消息前缀。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-tracesource -name ParameterBinding -RemoveListener Host                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令停止对 Windows PowerShell 的 ParameterBinding 组件的跟踪。它使用 Name 参数来标识已在跟踪的组件，并使用 RemoveListener 参数来标识跟踪侦听程序。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113400</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-TraceSource</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-PSDebug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Variable
		</command:name>
		<maml:description>
			<maml:para>设置变量的值。如果不存在具有所请求名称的变量，则创建该变量。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Set</command:verb>
		<command:noun>Variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Set-Variable cmdlet 为指定变量赋值或更改当前值。如果变量不存在，cmdlet 会创建它。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>指定变量名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>Value</maml:name>
				<maml:description>
					<maml:para>指定变量的值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Description</maml:name>
				<maml:description>
					<maml:para>指定变量的说明。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>忽略指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许您创建与现有只读变量同名的变量，或更改只读变量的值。

默认情况下，您可以覆盖某个变量，除非该变量的选项值为“ReadOnly”或“Constant”。有关详细信息，请参阅 Option 参数。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Include</maml:name>
				<maml:description>
					<maml:para>只更改指定项。此参数的值对 Name 参数进行限定。输入名称或名称模式，如“c*”。允许使用通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>更改变量的 Options 属性的值。有效值包括：

-- None：不设置任何选项。（“None”为默认值。）

-- ReadOnly：除非使用 Force 参数，否则无法更改变量的属性。您可以使用 Remove-Variable 来删除该变量。

-- Constant：无法删除变量，也无法更改其属性。“Constant”仅在您创建别名时才可用。不能将现有变量的选项更改为“Constant”。

-- Private：变量只在 Scope 参数指定的作用域内可用。它由子作用域继承。

-- AllScope：变量将复制到创建的所有新作用域中。

若要查看变量的 Options 属性，请键入“get-variable| format-table -property name, options -autosize”。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadOnly</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constant</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PassThru</maml:name>
				<maml:description>
					<maml:para>返回表示新变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Scope</maml:name>
				<maml:description>
					<maml:para>确定变量的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Visibility</maml:name>
				<maml:description>
					<maml:para>确定变量在创建它的会话之外是否可见。此参数供传递给其他用户的脚本和命令使用。

有效值包括：

-- Public：变量可见。（“Public”为默认值。）
-- Private：变量不可见。

当变量为专用时，它不会出现在变量列表（如 Get-Variable 返回的变量列表）中，也不会出现在 Variable: 驱动器的显示内容中。读取或更改专用变量值的命令会返回错误。但是，用户可以运行使用专用变量的命令，前提是这些命令是在定义该变量的会话中写入的。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Public</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Private</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Description</maml:name>
			<maml:description>
				<maml:para>指定变量的说明。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exclude</maml:name>
			<maml:description>
				<maml:para>忽略指定项。此参数的值对 Path 参数进行限定。请输入路径元素或模式，例如“*.txt”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许您创建与现有只读变量同名的变量，或更改只读变量的值。

默认情况下，您可以覆盖某个变量，除非该变量的选项值为“ReadOnly”或“Constant”。有关详细信息，请参阅 Option 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Include</maml:name>
			<maml:description>
				<maml:para>只更改指定项。此参数的值对 Name 参数进行限定。输入名称或名称模式，如“c*”。允许使用通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>指定变量名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>更改变量的 Options 属性的值。有效值包括：

-- None：不设置任何选项。（“None”为默认值。）

-- ReadOnly：除非使用 Force 参数，否则无法更改变量的属性。您可以使用 Remove-Variable 来删除该变量。

-- Constant：无法删除变量，也无法更改其属性。“Constant”仅在您创建别名时才可用。不能将现有变量的选项更改为“Constant”。

-- Private：变量只在 Scope 参数指定的作用域内可用。它由子作用域继承。

-- AllScope：变量将复制到创建的所有新作用域中。

若要查看变量的 Options 属性，请键入“get-variable| format-table -property name, options -autosize”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PassThru</maml:name>
			<maml:description>
				<maml:para>返回表示新变量的对象。默认情况下，此 cmdlet 将不产生任何输出。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Scope</maml:name>
			<maml:description>
				<maml:para>确定变量的作用域。有效值包括“Global”、“Local”、“Script”或者相对于当前作用域的数字（0 到作用域数，其中 0 是指当前作用域，1 是指其父作用域）。默认值为“Local”。有关详细信息，请参阅 about_Scopes。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>Value</maml:name>
			<maml:description>
				<maml:para>指定变量的值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Visibility</maml:name>
			<maml:description>
				<maml:para>确定变量在创建它的会话之外是否可见。此参数供传递给其他用户的脚本和命令使用。

有效值包括：

-- Public：变量可见。（“Public”为默认值。）
-- Private：变量不可见。

当变量为专用时，它不会出现在变量列表（如 Get-Variable 返回的变量列表）中，也不会出现在 Variable: 驱动器的显示内容中。读取或更改专用变量值的命令会返回错误。但是，用户可以运行使用专用变量的命令，前提是这些命令是在定义该变量的会话中写入的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SessionStateEntryVisibility</command:parameterValue>
			<dev:type>
				<maml:name>SessionStateEntryVisibility</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>Public</dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将表示变量值的对象传递给 Set-Variable。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>“无”或 System.Management.Automation.PSVariable</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					如果使用 PassThru 参数，则 Set-Variable 生成一个表示新变量或已更改变量的 System.Management.Automation.PSVariable 对象。否则，此 cmdlet 将不产生任何输出。

				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-variable -name desc -value &quot;A description&quot;

C:\PS&gt;get-variable -name desc                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令将“desc”变量的值设置为“A description”，然后获取该变量的值。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
set-variable -name processes -value (Get-Process) -option constant -scope global -description &quot;All processes&quot; -passthru | format-list -property *                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令创建一个包含系统上所有进程的全局只读变量，然后显示该变量的所有属性。

此命令使用 Set-Variable cmdlet 来创建变量。它使用 PassThru 参数来创建表示新变量的对象，并使用管道运算符 (|) 将该对象传递给 Format-List cmdlet。它使用 Format-List 的值为 *（全部）的 Property 参数来显示新创建的变量的所有属性。

将值“(Get-Process)”括在圆括号内，以确保先执行该值，然后再将其存储到变量中。否则，变量将包含单词“Get-Process”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
# set-variable -name counter -visibility private

C:\PS&gt; new-variable -name counter -visibility public -value 26

C:\PS&gt; $counter
26

C:\PS&gt; get-variable c*

Name Value
---- -----
Culture en-US
ConsoleFileName
ConfirmPreference High
CommandLineParameters {}
Counter 26

C:\PS&gt; set-variable -name counter -visibility private

C:\PS&gt; get-variable c*

Name Value
---- -----
Culture en-US
ConsoleFileName
ConfirmPreference High
CommandLineParameters {}

C:\PS&gt; $counter
&quot;Cannot access the variable '$counter' because it is a private variable&quot;

C:\PS&gt; .\use-counter.ps1
Commands completed successfully.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令演示如何将变量的可见性更改为“Private”。可以使用所需权限通过脚本读取和更改此变量，但它对于用户不可见。

示例输出显示了公共变量和专用变量的行为差异。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113401</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Sort-Object
		</command:name>
		<maml:description>
			<maml:para>按属性值对对象进行排序。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Sort</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Sort-Object cmdlet 根据对象的属性值按升序或降序对对象排序。

您可以指定一个属性或多个属性（用于多键排序），也可以选择区分大小写或不区分大小写的排序。您还可以指示 Sort-Object 只显示对于特定属性具有唯一值的对象。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Sort-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>指定排序时要使用的属性。对象将基于这些属性的值进行排序。输入属性的名称。允许使用通配符。

如果您指定多个属性，则先按第一个属性对对象进行排序。如果多个对象的第一个属性的值相同，则按第二个属性对这些对象排序。此过程将一直继续，直至没有其他指定的属性或没有对象组。

如果您未指定属性，cmdlet 会根据对象类型的默认属性进行排序。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- Ascending &lt;布尔值&gt;
-- Descending &lt;布尔值&gt;
</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CaseSensitive</maml:name>
				<maml:description>
					<maml:para>指示排序应区分大小写。默认情况下，排序不区分大小写。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Culture</maml:name>
				<maml:description>
					<maml:para>指定排序时要使用的区域性配置。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Descending</maml:name>
				<maml:description>
					<maml:para>以降序对对象进行排序。默认值为升序。

Descending 参数适用于所有属性。若要按某些属性
以升序进行排序，然后按其他属性以降序进行排序，则必须使用哈希表来指定其属性值。有关详细信息，请参阅示例。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要排序的对象。

使用 InputObject 参数提交项目集合时，Sort-Object 会收到表示该集合的一个对象。因为一个对象无法排序，所以 Sort-Object 会原样返回整个集合。

若要为对象排序，请通过管道将它们传递给 Sort-Object。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Unique</maml:name>
				<maml:description>
					<maml:para>消除重复项，只返回集合的唯一成员。您可以使用此参数来代替 Get-Unique cmdlet。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CaseSensitive</maml:name>
			<maml:description>
				<maml:para>指示排序应区分大小写。默认情况下，排序不区分大小写。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Culture</maml:name>
			<maml:description>
				<maml:para>指定排序时要使用的区域性配置。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Descending</maml:name>
			<maml:description>
				<maml:para>以降序对对象进行排序。默认值为升序。

Descending 参数适用于所有属性。若要按某些属性
以升序进行排序，然后按其他属性以降序进行排序，则必须使用哈希表来指定其属性值。有关详细信息，请参阅示例。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要排序的对象。

使用 InputObject 参数提交项目集合时，Sort-Object 会收到表示该集合的一个对象。因为一个对象无法排序，所以 Sort-Object 会原样返回整个集合。

若要为对象排序，请通过管道将它们传递给 Sort-Object。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>指定排序时要使用的属性。对象将基于这些属性的值进行排序。输入属性的名称。允许使用通配符。

如果您指定多个属性，则先按第一个属性对对象进行排序。如果多个对象的第一个属性的值相同，则按第二个属性对这些对象排序。此过程将一直继续，直至没有其他指定的属性或没有对象组。

如果您未指定属性，cmdlet 会根据对象类型的默认属性进行排序。

Property 参数的值可以是新的计算属性。若要创建计算属性，请使用哈希表。有效键包括：

-- Expression &lt;字符串&gt; 或 &lt;脚本块&gt;
-- Ascending &lt;布尔值&gt;
-- Descending &lt;布尔值&gt;
</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Unique</maml:name>
			<maml:description>
				<maml:para>消除重复项，只返回集合的唯一成员。您可以使用此参数来代替 Get-Unique cmdlet。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将要排序的对象传递给 Sort-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Sort-Object 返回排序后的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Sort-Object 会根据您指定的属性或该类型对象的默认排序属性对对象进行排序。

如果某个对象不具有所指定的属性之一，则 cmdlet 会将该对象的属性值解释为 NULL，并将其放置在排序顺序的末尾。

在对对象进行排序时，Sort-Object 会对每个属性使用 Compare 方法。如果某个属性未实现 IComparable，则 cmdlet 会将属性值转换为字符串并使用 System.String 的 Compare 方法。

Sort-Object cmdlet 根据对象的属性值按升序或降序对对象排序。

如果您根据其值是枚举的属性排序，Sort-Object 会按数字顺序对枚举值排序，它不会对枚举成员名称排序。例如，如果您按状态对服务排序，则状态为“Stopped”的服务会出现在状态为“Running”的服务之前，因为状态值是一个 ServiceControllerStatus 枚举，其中“Stopped”的值为 1，“Running”的值为 4。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | sort-object 

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
-a---         9/13/2005   4:24 PM          0 0
-a---          9/6/2005   4:19 PM         12 a.csv
-a---         9/21/2005   3:49 PM        529 a.Ps
-a---         8/22/2005   4:14 PM         22 a.pl
-a---         9/27/2005  10:33 AM         24 a.txt
-a---         9/15/2005  10:31 AM        398 a.vbs
-a---         7/21/2005  12:39 PM      37066 a.xml
-a---         8/28/2005  11:30 PM       5412 a.xslt
-a---        10/25/2005   1:59 PM        125 AdamTravel.txt
-a---         7/21/2005   9:49 AM         59 add2Num.Ps
-a---         8/29/2005   5:42 PM       7111 add-content.xml
-a---         9/21/2005  12:46 PM       8771 aliens.Ps
-a---         8/10/2005   2:10 PM        798 array.xml
-a---          8/4/2004   5:00 AM        110 AUTORUN.INF
-a---          9/6/2005   4:20 PM        245 b.csv
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令对当前目录中的子目录和文件排序。由于未指定属性，因此文件和目录将按其默认排序属性 Name 的字母顺序升序排序。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | sort-object -property length 

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
-a---         12/3/2006   5:35 PM          2 pref.txt
-a---          9/6/2006   3:33 PM         15 count.txt
-a---         7/26/2006  10:01 AM         30 filenoext
-a---         8/18/2006   9:02 AM         52 temp.ps1
-a---         8/18/2006   9:02 AM         52 temp.msh
-a---          9/6/2006   3:33 PM         56 fivewords.txt
-a---         7/26/2006   9:28 AM         80 date.csv
-a---         7/29/2006   7:15 PM         84 test2.txt
-a---         7/29/2006   7:15 PM         84 test.ps1                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按文件长度以升序显示当前目录中的文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | sort-object -property WS | select-object -last 5 

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   1105      25    44236      18932   197    93.81   2032 iexplore
   2526      66    37668      36836   221   393.27    868 svchost
    974      19    22844      45928   371    88.39   3952 WINWORD
   1371      22    42192      61872   323    75.75   1584 INFOPATH
   2145      58    93088      70680   619   396.69   3908 OUTLOOK                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令根据进程的工作集大小显示计算机上占用内存最多的五个进程。

该命令使用 Get-Process cmdlet 获取进程列表。它使用管道运算符 (|) 将结果发送到 Sort-Object cmdlet，该 cmdlet 会按工作集顺序对对象进行排序。

另一个管道运算符会将结果发送到 Select-Object，后者只显示列表中的最后五项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-history | sort-object -descending 

Id CommandLine
-- -----------
51 get-history | sort -descending
50 get-history | sort -descending
49 get-history | sort -descending
48 get-history | sort -descending
47 get-history | sort -descending
46 get-history | sort -descending
45 get-history | sort -descending
44 cd $pshome
43 get-childitem | sort-object
42 gci *.txt                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 ID 属性作为默认关键字对 HistoryInfo 对象进行排序。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
C:\PS&gt; get-service | sort-object -property `
@{Expression=&quot;Status&quot;;Descending=$true}, `
@{Expression=&quot;DisplayName&quot;;Descending=$false} 

Status   Name               DisplayName
------   ----               -----------
Running  ALG                Application Layer Gateway Service
Running  Ati HotKey Poller  Ati HotKey Poller
Running  wuauserv           Automatic Updates
Running  BITS               Background Intelligent Transfer Ser...
Running  Client for NFS     Client for NFS
...
Stopped  clr_optimizatio... .NET Runtime Optimization Service v...
Stopped  Alerter            Alerter
Stopped  AppMgmt            Application Management
Stopped  aspnet_state       ASP.NET State Service
Stopped  ATI Smart          ATI Smart
Stopped  ClipSrv            ClipBook                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按 Status 的降序以及 DisplayName 的升序显示计算机上的服务。

此命令使用 Get-Service cmdlet 获取计算机上的服务。它使用管道运算符 (|) 将服务发送到 Sort-Object cmdlet。

为了按升序对一个属性排序，按降序对另一个属性排序，此命令需要对 Property 参数的值使用一个哈希表。该哈希表使用 Expression 键指定属性名称，使用 Ascending 或 Descending 键指定排序顺序。

生成的显示内容会按降序对 Status 值排序，将 Status 值为“Running”的属性列在 Status 值为“Stopped”的属性的前面。在按升序排序时，“Stopped”会出现在“Running”之前，因为 Status 是一个枚举的属性，其中“Stopped”的值 (1) 小于“Running”的值 (4)。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem *.txt | sort-object -property @{Expression={$_.LastWriteTime - $_.CreationTime}; Ascending=$false} | Format-Table LastWriteTime, CreationTime 

LastWriteTime                           CreationTime
-------------                           ------------
2/21/2006 10:22:20 AM                   10/3/2005 4:19:40 PM
2/27/2006 8:14:24 AM                    2/23/2006 10:41:08 PM
2/24/2006 1:26:19 PM                    2/23/2006 11:23:36 PM
1/5/2006 12:01:35 PM                    1/5/2006 11:35:30 AM
2/24/2006 9:25:40 AM                    2/24/2006 9:22:24 AM
2/24/2006 9:40:01 AM                    2/24/2006 9:39:41 AM
2/21/2006 10:21:30 AM                   2/21/2006 10:21:30 AM                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令按 CreationTime 与 LastWriteTime 之间的时间跨度以降序对文本文件进行排序。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-content servers.txt

localhost
test01
server01
server02
localhost
server01

C:\PS&gt; get-content servers.txt | sort-object -unique
localhost
server01
server02
test01                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令对文本文件中的服务器名称进行排序。第二条命令将 Sort-Object cmdlet 与 Unique 参数结合使用，以返回一个已排序且无重复项的列表。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113403</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Start-Sleep
		</command:name>
		<maml:description>
			<maml:para>将脚本或会话中的活动挂起指定的一段时间。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Start</command:verb>
		<command:noun>Sleep</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Start-Sleep cmdlet 会将脚本或会话中的活动挂起指定的一段时间。您可以使用它完成许多任务，如等待操作完成或在重复操作之前暂停。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Start-Sleep</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>Milliseconds</maml:name>
				<maml:description>
					<maml:para>指定资源休眠的毫秒数。该参数可以缩写为“-m”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Start-Sleep</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>Seconds</maml:name>
				<maml:description>
					<maml:para>指定资源休眠的秒数。可以省略参数名称（“Seconds”），也可以将其缩写为“-s”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>Milliseconds</maml:name>
			<maml:description>
				<maml:para>指定资源休眠的毫秒数。该参数可以缩写为“-m”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>Seconds</maml:name>
			<maml:description>
				<maml:para>指定资源休眠的秒数。可以省略参数名称（“Seconds”），也可以将其缩写为“-s”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Int32</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将该秒数传递给 Start-Sleep。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          还可以使用 Start-Sleep 的内置别名“sleep”来对其进行引用。有关详细信息，请参阅 about_Aliases。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Start-Sleep -s 15                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令让会话中的所有命令休眠 15 秒。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Start-Sleep -m 500                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令让会话中的所有命令休眠 1/2 秒（500 毫秒）。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113407</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Tee-Object
		</command:name>
		<maml:description>
			<maml:para>将命令输出保存在文件或变量中，并将其显示在控制台中。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Tee</command:verb>
		<command:noun>Object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Tee-Object cmdlet 向两个方向（类似字母“T”）发送命令的输出。它将输出存储在文件或变量中，同时通过管道向后发送。如果 Tee-Object 是管道中的最后一个命令，则会在控制台中显示该命令的输出。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Tee-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>指定 cmdlet 将对象存储于其中的文件。接受可解析为单个文件的通配符。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定 cmdlet 的对象输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Tee-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Variable</maml:name>
				<maml:description>
					<maml:para>将对输入对象的引用赋予指定的变量。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定 cmdlet 的对象输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>FilePath</maml:name>
			<maml:description>
				<maml:para>指定 cmdlet 将对象存储于其中的文件。接受可解析为单个文件的通配符。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定 cmdlet 的对象输入。请输入包含对象的变量，或者键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Variable</maml:name>
			<maml:description>
				<maml:para>将对输入对象的引用赋予指定的变量。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将对象重定向到 Tee-Object。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Tee-Object 返回它重定向的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          您也可以使用 Out-File cmdlet 或重定向运算符，它们都会将输出保存在一个文件中，但是不会通过管道向后发送。

Tee-Object 在写入到文件时使用 Unicode 编码。因此，在采用不同编码的文件中，可能无法正确设置输出内容的格式。若要指定编码，请使用 Out-File cmdlet。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process | tee-object -filepath C:\Test1\testfile2.txt 

Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)    Id ProcessName
-------  ------    -----      ----- -----   ------    -- -----------
   83       4     2300       4520    39     0.30    4032 00THotkey
  272       6     1400       3944    34     0.06    3088 alg
   81       3      804       3284    21     2.45     148 ApntEx
   81       4     2008       5808    38     0.75    3684 Apoint
...                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取在计算机上运行的进程的列表，并将结果发送给文件。因为没有指定其他路径，所以结果将显示在控制台中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-process notepad | tee-object -variable proc | select-object processname,handles 

ProcessName                              Handles
-----------                              -------
notepad                                  43
notepad                                  37
notepad                                  38
notepad                                  38                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令获取在计算机上运行的进程的列表，并将结果发送给名为“proc”的变量。然后，它通过管道将所得到的对象传递给 Select-Object，后者将选择 ProcessName 和 Handles 属性。请注意，$proc 变量包含由 Get-Process 返回的默认信息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113417</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Redirection</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Trace-Command
		</command:name>
		<maml:description>
			<maml:para>配置并启动对指定表达式或命令的跟踪。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Trace</command:verb>
		<command:noun>Command</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Trace-Command cmdlet 配置并启动对指定表达式或命令的跟踪。其工作方式与 Set-TraceSource 相似，但仅适用于指定的命令。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Trace-Command</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Command</maml:name>
				<maml:description>
					<maml:para>指定要在跟踪期间处理的命令。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>ArgumentList</maml:name>
				<maml:description>
					<maml:para>为要跟踪的命令指定参数和参数值。ArgumentList 的别名为 Args。对于调试动态参数，此功能尤其有用。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的 Windows PowerShell 组件。请输入各个组件的跟踪源的名称。允许使用通配符。若要在计算机上查找跟踪源，请键入“Get-TraceSource”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的事件的类型。

有效值包括 None、Constructor、Dispose、Finalizer、Method、Property、Delegates、Events、Exception、Lock、Error、Errors、Warning、Verbose、WriteLine、Data、Scope、ExecutionFlow、Assert 和 All。默认值为“All”。

以下值是其他值的组合：

-- ExecutionFlow：（Constructor、Dispose、Finalizer、Method、Delegates、Events 和 Scope）

-- Data：（Constructor、Dispose、Finalizer、Property、Verbose 和 WriteLine）

-- Errors：（Error 和 Exception）。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;Constructor,Dispose&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constructor</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Dispose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Finalizer</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Method</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Property</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Delegates</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Events</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Exception</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Lock</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">WriteLine</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Data</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Scope</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Assert</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Debugger</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到调试程序。可以在任何用户模式或内核模式的调试程序或者 Visual Studio 中查看输出。此参数还将选择默认的跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到指定文件。此参数还将选择文件跟踪侦听程序。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 将跟踪信息追加到只读文件。与 FilePath 参数一起使用。即使使用 Force 参数，该 cmdlet 也无法覆盖安全限制。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>为要在跟踪期间处理的表达式提供输入。

可以输入表示表达式接受的输入的变量，或通过管道传递对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ListenerOption</maml:name>
				<maml:description>
					<maml:para>向输出中的每条跟踪消息的前缀添加可选数据。有效值包括 None、LogicalOperationStack、DateTime、Timestamp、ProcessId、ThreadId 和 Callstack。“None”为默认值。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;ProcessID,ThreadID&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Timestamp</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ProcessId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ThreadId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PSHost</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到 Windows PowerShell 主机。此参数还将选择 PSHost 跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Trace-Command</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">

				<maml:name>Expression</maml:name>
				<maml:description>
					<maml:para>指定要在跟踪期间处理的表达式。将表达式放在大括号 ({}) 中。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>Name</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的 Windows PowerShell 组件。请输入各个组件的跟踪源的名称。允许使用通配符。若要在计算机上查找跟踪源，请键入“Get-TraceSource”。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Option</maml:name>
				<maml:description>
					<maml:para>确定要跟踪的事件的类型。

有效值包括 None、Constructor、Dispose、Finalizer、Method、Property、Delegates、Events、Exception、Lock、Error、Errors、Warning、Verbose、WriteLine、Data、Scope、ExecutionFlow、Assert 和 All。默认值为“All”。

以下值是其它值的组合：

-- ExecutionFlow：（Constructor、Dispose、Finalizer、Method、Delegates、Events 和 Scope）

-- Data：（Constructor、Dispose、Finalizer、Property、Verbose 和 WriteLine）

-- Errors：（Error 和 Exception）。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;Constructor,Dispose&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Constructor</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Dispose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Finalizer</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Method</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Property</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Delegates</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Events</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Exception</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Lock</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Error</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Warning</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Verbose</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">WriteLine</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Data</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Scope</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Assert</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Debugger</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到调试程序。可以在任何用户模式或内核模式的调试程序或者 Visual Studio 中查看输出。此参数还将选择默认的跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>FilePath</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到指定文件。此参数还将选择文件跟踪侦听程序。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>允许该 cmdlet 将跟踪信息追加到只读文件。与 FilePath 参数一起使用。即使使用 Force 参数，该 cmdlet 也无法覆盖安全限制。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>为要在跟踪期间处理的表达式提供输入。

可以输入表示表达式接受的输入的变量，或通过管道传递对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ListenerOption</maml:name>
				<maml:description>
					<maml:para>向输出中的每条跟踪消息的前缀添加可选数据。有效值包括 None、LogicalOperationStack、DateTime、Timestamp、ProcessId、ThreadId 和 Callstack。“None”为默认值。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;ProcessID,ThreadID&quot;。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">None</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DateTime</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Timestamp</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ProcessId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ThreadId</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PSHost</maml:name>
				<maml:description>
					<maml:para>将跟踪输出发送到 Windows PowerShell 主机。此参数还将选择 PSHost 跟踪侦听程序。</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>ArgumentList</maml:name>
			<maml:description>
				<maml:para>为要跟踪的命令指定参数和参数值。ArgumentList 的别名为 Args。对于调试动态参数，此功能尤其有用。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Command</maml:name>
			<maml:description>
				<maml:para>指定要在跟踪期间处理的命令。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Debugger</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到调试程序。可以在任何用户模式或内核模式的调试程序或者 Visual Studio 中查看输出。此参数还将选择默认的跟踪侦听程序。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Expression</maml:name>
			<maml:description>
				<maml:para>指定要在跟踪期间处理的表达式。将表达式放在大括号 ({}) 中。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>FilePath</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到指定文件。此参数还将选择文件跟踪侦听程序。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>允许该 cmdlet 将跟踪信息追加到只读文件。与 FilePath 参数一起使用。即使使用 Force 参数，该 cmdlet 也无法覆盖安全限制。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>为要在跟踪期间处理的表达式提供输入。

可以输入表示表达式接受的输入的变量，或通过管道传递对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ListenerOption</maml:name>
			<maml:description>
				<maml:para>向输出中的每条跟踪消息的前缀添加可选数据。有效值包括 None、LogicalOperationStack、DateTime、Timestamp、ProcessId、ThreadId 和 Callstack。“None”为默认值。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;ProcessID,ThreadID&quot;。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TraceOptions</command:parameterValue>
			<dev:type>
				<maml:name>TraceOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>Name</maml:name>
			<maml:description>
				<maml:para>确定要跟踪的 Windows PowerShell 组件。请输入各个组件的跟踪源的名称。允许使用通配符。若要在计算机上查找跟踪源，请键入“Get-TraceSource”。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Option</maml:name>
			<maml:description>
				<maml:para>确定要跟踪的事件的类型。

有效值包括 None、Constructor、Dispose、Finalizer、Method、Property、Delegates、Events、Exception、Lock、Error、Errors、Warning、Verbose、WriteLine、Data、Scope、ExecutionFlow、Assert 和 All。默认值为“All”。

以下值是其它值的组合：

-- ExecutionFlow：（Constructor、Dispose、Finalizer、Method、Delegates、Events 和 Scope）

-- Data：（Constructor、Dispose、Finalizer、Property、Verbose 和 WriteLine）

-- Errors：（Error 和 Exception）。

若要指定多个选项，请使用逗号分隔这些选项，但不要带有空格，并将这些选项括在引号中，例如 &quot;Constructor,Dispose&quot;。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSTraceSourceOptions</command:parameterValue>
			<dev:type>
				<maml:name>PSTraceSourceOptions</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PSHost</maml:name>
			<maml:description>
				<maml:para>将跟踪输出发送到 Windows PowerShell 主机。此参数还将选择 PSHost 跟踪侦听程序。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将表示表达式输入的对象传递给 Trace-Command。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					在调试流中返回命令跟踪。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          跟踪是开发人员用于调试和优化程序的一种方法。在跟踪过程中，程序将生成有关其内部处理过程中每个步骤的详细消息。

Windows PowerShell 跟踪 cmdlet 专为帮助 Windows PowerShell 开发人员而设计，但其可供所有用户使用。使用这些 cmdlet，您可以监控外壳程序功能的几乎每个方面。

若要查找已为跟踪启用的 Windows PowerShell 组件，请键入“Get-Help Get-TraceSource”。

“跟踪源”是每个 Windows PowerShell 组件的一部分，用于管理跟踪和生成该组件的跟踪消息。若要跟踪某个组件，您应标识其跟踪源。

“跟踪侦听程序”接收跟踪的输出并将其显示给用户。您可以选择将跟踪数据发送给用户模式或内核模式的调试程序、主机或控制台、文件，或将其发送给从 System.Diagnostics.TraceListener 类中派生的自定义侦听程序。

使用 Command 参数集时，Windows PowerShell 将采用与在管道中处理命令相似的方式来处理该命令。例如，不对每个传入对象重复执行命令发现。

Name、Expression、Option 和 Command 参数的名称为可选项。如果省略参数名称，则未命名参数的值必须按以下顺序出现：Name、Expression、Option 或 Name、Command、-Option。如果包括参数名称，则参数能够以任何顺序出现。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
trace-command -name metadata,parameterbinding,cmdlet -expression {get-process notepad} -pshost                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令启动对“get-process notepad”表达式的元数据处理、参数绑定以及 cmdlet 创建和破坏的跟踪。它使用 Name 参数来指定跟踪源、使用 Expression 参数来指定命令，并使用 PSHost 参数来将输出发送到控制台。由于该命令未指定任何跟踪选项或侦听程序选项，因此它会将默认值“All”用作跟踪选项，并将“None”用作侦听程序选项。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
trace-command -name commandprocessor,pipelineprocessor -command get-alias -argumentlist &quot;ghy&quot; -option executionflow -listenerOption &quot;timestamp,callstack&quot; -filepath c:\test\debug.txt                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令启动对处理“get-alias cd”命令过程中命令处理程序和管道处理程序的跟踪。

它使用 Name 参数来指定跟踪源、使用 Command 参数来指定命令、使用 ArgumentList 参数来指定 Get-Alias 命令的参数、使用 Option 参数来指定跟踪选项，并使用 ListenerOption 参数来指定跟踪消息前缀中的字段。FilePath 参数将输出发送到 C:\Test\Debug.txt 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$a = &quot;i*&quot;

C:\PS&gt; trace-command parameterbinding {get-alias $input} -pshost -inputobject $a                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令跟踪在 Windows PowerShell 处理从管道中获取输入的 Get-Alias 表达式时其 ParameterBinding 操作的过程。

在 Trace-Command 中，InputObject 参数将对象传递给要在跟踪期间处理的表达式。

第一条命令将字符串“i*”存储在 $a 变量中。第二条命令对 ParameterBinding 跟踪源使用 Trace-Command cmdlet。PSHost 参数将输出发送到控制台。

要处理的表达式为“get-alias $input”，其中 $input 变量与 InputObject 参数相关联。InputObject 参数将变量 $a 传递给该表达式。实际上，在跟踪期间要处理的命令是“get-alias -inputobject $a&quot; or &quot;$a | get-alias”。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113419</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-TraceSource</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-TraceSource</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Unregister-Event
		</command:name>
		<maml:description>
			<maml:para>取消事件订阅。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Unregister</command:verb>
		<command:noun>Event</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Unregister-Event cmdlet 取消使用 Register-EngineEvent、Register-ObjectEvent 或 Register-WmiEvent cmdlet 创建的事件订阅。

在取消事件订阅后，系统会将事件订阅者从会话中删除，订阅的事件不再被添加到事件队列。当您取消使用 New-Event cmdlet 创建的事件订阅时，还会将新事件从会话中删除。

Unregister-Event 不会删除事件队列中的事件。若要删除事件，请使用 Remove-Event cmdlet。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Unregister-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SubscriptionId</maml:name>
				<maml:description>
					<maml:para>取消具有指定的订阅标识符的事件订阅。

每个命令中都必须包含 SourceIdentifier 或 SubscriptionId 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>取消所有事件订阅，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的订阅。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Unregister-Event</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>取消具有指定的源标识符的事件订阅。

每个命令中都必须包含 SourceIdentifier 或 SubscriptionId 参数。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Force</maml:name>
				<maml:description>
					<maml:para>取消所有事件订阅，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的订阅。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Force</maml:name>
			<maml:description>
				<maml:para>取消所有事件订阅，包括使用 Register-ObjectEvent、Register-WmiEvent 和 Register-EngineEvent 的 SupportEvent 参数隐藏的订阅。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>取消具有指定的源标识符的事件订阅。

每个命令中都必须包含 SourceIdentifier 或 SubscriptionId 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SubscriptionId</maml:name>
			<maml:description>
				<maml:para>取消具有指定的订阅标识符的事件订阅。

每个命令中都必须包含 SourceIdentifier 或 SubscriptionId 参数。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSEventSubscriber</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					您可以通过管道将 Get-EventSubscriber 的输出传递给 Unregister-Event。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。

Unregister-Event 无法删除使用 New-Event cmdlet 创建的事件，除非您已经使用 Register-EngineEvent cmdlet 订阅了该事件。若要从会话中删除自定义事件，您必须以编程方式删除事件或关闭会话。


                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
unregister-event -sourceIdentifier ProcessStarted                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令取消源标识符为“ProcessStarted”的事件订阅。

若要查找事件的源标识符，请使用 Get-Event cmdlet。若要查找事件订阅的源标识符，请使用 Get-EventSubscriber cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
unregister-event -subscriptionId 2                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令取消订阅标识符为 2 的事件订阅。

若要查找事件订阅的订阅标识符，请使用 Get-EventSubscriber cmdlet。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-eventsubscriber -force | unregister-event -force                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令取消会话中的所有事件订阅。

此命令使用 Get-EventSubscriber cmdlet 获取会话中的所有事件订阅者对象，包括使用事件注册 cmdlet 的 SupportEvent 参数隐藏的订阅者。

它使用管道运算符 (|) 将事件订阅者对象发送到 Unregister-Event，后者将它们从会话中删除。若要完成该任务，还需要在 Unregister-Event 上使用Force 参数。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135269</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-EventSubscriber</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Update-FormatData
		</command:name>
		<maml:description>
			<maml:para>更新当前会话中的格式数据。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Update</command:verb>
		<command:noun>FormatData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Update-FormatData cmdlet 将格式设置文件中的格式数据重新加载到当前会话。使用此 cmdlet，无需重新启动 Windows PowerShell 即可更新格式数据。

在不使用参数的情况下，Update-FormatData 将重新加载它以前加载的格式设置文件。可以使用 Update-FormatData 的参数将新的格式设置文件添加到会话中。

格式设置文件是 XML 格式的文本文件，其文件扩展名为 format.ps1xml。这些文件中的格式数据定义会话中的 Microsoft .NET Framework 对象的显示。

当 Windows PowerShell 启动时，它会将 Windows PowerShell 安装目录 ($pshome) 的格式设置文件中的格式数据加载到会话。您可以使用 Update-FormatData 将格式数据重新加载到当前会话，而无需重新启动 Windows PowerShell。当您已添加或更改了格式设置文件，但不希望中断会话时，这会十分有用。

有关 Windows PowerShell 中格式设置文件的详细信息，请参阅 about_Format.ps1xml。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Update-FormatData</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>AppendPath</maml:name>
				<maml:description>
					<maml:para>将指定的格式设置文件添加到会话中。这些文件在 Windows PowerShell 加载内置格式设置文件之后加载。

在对 .NET 对象进行格式设置时，Windows PowerShell 将为每个 .NET 类型使用它所找到的第一个格式设置定义。如果使用 AppendPath 参数，则 Windows PowerShell 将从内置文件搜索数据，直到遇到要添加的格式数据。

使用此参数可添加一个文件，以用于为内置格式设置文件中未引用的 .NET 对象设置格式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PrependPath</maml:name>
				<maml:description>
					<maml:para>将指定的格式设置文件添加到会话中。这些文件在 Windows PowerShell 加载内置格式设置文件之前加载。

在对 .NET 对象进行格式设置时，Windows PowerShell 将为每个 .NET 类型使用它所找到的第一个格式设置定义。如果使用 PrependPath 参数，则 Windows PowerShell 将从要添加的文件中搜索数据，直到遇到内置文件中的格式数据。

使用此参数可添加一个文件，以用于为也在内置格式设置文件中引用的 .NET 对象设置格式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>AppendPath</maml:name>
			<maml:description>
				<maml:para>将指定的格式设置文件添加到会话中。这些文件在 Windows PowerShell 加载内置格式设置文件之后加载。

在对 .NET 对象进行格式设置时，Windows PowerShell 将为每个 .NET 类型使用它所找到的第一个格式设置定义。如果使用 AppendPath 参数，则 Windows PowerShell 将从内置文件搜索数据，直到遇到要添加的格式数据。

使用此参数可添加一个文件，以用于为内置格式设置文件中未引用的 .NET 对象设置格式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>PrependPath</maml:name>
			<maml:description>
				<maml:para>将指定的格式设置文件添加到会话中。这些文件在 Windows PowerShell 加载内置格式设置文件之前加载。

在对 .NET 对象进行格式设置时，Windows PowerShell 将为每个 .NET 类型使用它所找到的第一个格式设置定义。如果使用 PrependPath 参数，则 Windows PowerShell 将从要添加的文件中搜索数据，直到遇到内置文件中的格式数据。

使用此参数可添加一个文件，以用于为也在内置格式设置文件中引用的 .NET 对象设置格式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含追加路径的字符串传递给 Update-FormatData。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					该 cmdlet 不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Update-FormatData 也会在从模块导入的会话中更新命令的格式数据。如果模块的格式设置文件发生更改，可以运行 Update-FormatData 命令以更新已导入命令的格式数据。无需重新导入模块。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-formatdata                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令重新加载它以前加载的格式设置文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-formatdata -appendpath trace.format.ps1xml, log.format.ps1xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令将格式设置文件重新加载到会话，其中包括两个新文件 Trace.format.ps1xml 和 Log.format.ps1xml。

由于该命令使用 AppendPath 参数，因此新文件中的格式数据将在内置文件中的格式数据之后加载。

之所以使用 AppendPath 参数，是因为新文件包含内置文件中未引用的对象的格式数据。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-formatdata -prependPath c:\test\NewFiles.format.ps1xml

# Edit the NewFiles.format.ps1 file.

C:\PS&gt; update-formatdata                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明如何在编辑格式设置文件后重新加载该文件。

第一条命令将 NewFiles.format.ps1xml 文件添加到会话中。它之所以使用 PrependPath 参数，是因为该文件包含内置文件中引用的对象的格式数据。

在添加 NewFiles.format.ps1xml 文件并在这些会话中对其进行测试后，作者会编辑该文件。

第二条命令使用 Update-FormatData cmdlet 重新加载格式设置文件。由于 NewFiles.format.ps1xml 文件以前加载过，因此在不使用参数的情况下 Update-FormatData 会自动重新加载它。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113420</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Update-List
		</command:name>
		<maml:description>
			<maml:para>在包含对象集合的属性值中添加和删除项。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Update</command:verb>
		<command:noun>List</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Update-List cmdlet 在对象的属性值中添加和删除项，然后返回更新的对象。此 cmdlet 用于包含对象集合的属性。

Add 和 Remove 参数分别在集合中添加和删除各项。Replace 参数将替换整个集合。

如果不在命令中指定属性，Update-List 会返回描述更新的对象，而不是对该对象进行更新。您可以将更新对象提交给更改对象的 cmdlet，如 Set-* cmdlet。

仅当被更新的属性支持 Update-List 使用的 IList 接口时，此 cmdlet 才有效。此外，接受更新的任何 Set-* cmdlet 都必须支持 IList 接口。随 Windows PowerShell 一起安装的核心 cmdlet 不支持此接口。若要确定 cmdlet 是否支持 Update-List，请参阅该 cmdlet 的帮助主题。
</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Update-List</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Add</maml:name>
				<maml:description>
					<maml:para>指定要添加到集合中的属性值。按照值应该在集合中出现的顺序输入值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Remove</maml:name>
				<maml:description>
					<maml:para>指定要从集合中删除的属性值。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>标识包含要更新的集合的属性。如果省略此参数，Update-List 会返回一个表示更改的对象，而不是更改该对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要更新的对象。您也可以通过管道将要更新的对象传递给 Update-List。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Update-List</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>Replace</maml:name>
				<maml:description>
					<maml:para>指定新集合。此参数会将原始集合中的所有项目替换为此参数指定的项目。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Property</maml:name>
				<maml:description>
					<maml:para>标识包含要更新的集合的属性。如果省略此参数，Update-List 会返回一个表示更改的对象，而不是更改该对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要更新的对象。您也可以通过管道将要更新的对象传递给 Update-List。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Add</maml:name>
			<maml:description>
				<maml:para>指定要添加到集合中的属性值。按照值应该在集合中出现的顺序输入值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要更新的对象。您也可以通过管道将要更新的对象传递给 Update-List。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Property</maml:name>
			<maml:description>
				<maml:para>标识包含要更新的集合的属性。如果省略此参数，Update-List 会返回一个表示更改的对象，而不是更改该对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Remove</maml:name>
			<maml:description>
				<maml:para>指定要从集合中删除的属性值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>Replace</maml:name>
			<maml:description>
				<maml:para>指定新集合。此参数会将原始集合中的所有项目替换为此参数指定的项目。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将要更新的对象传递给 Update-List。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Objects 或 System.Management.Automation.PSListModifier</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Update-List 返回更新的对象，或返回一个表示更新操作的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-mailbox | update-list -Property aliases -Add &quot;A&quot;,&quot;B&quot; -Remove &quot;X&quot;,&quot;Y&quot; | set-mailbox                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在邮箱的 Aliases 属性中添加 A 和 B，删除 X 和 Y。

该命令使用 Get-MailBox cmdlet 从 Microsoft Exchange Server 获取邮箱。管道运算符会将邮箱对象发送到 Update-List cmdlet。

Update-List 命令使用 Property 参数指明要更新邮箱的 Aliases 属性，使用 Add 和 Remove 参数指定要在集合中添加和删除的项。Aliases 属性满足 Update-List 的条件，因为它存储具有 Add 和 Remove 方法的 Microsoft .NET Framework 对象的集合。

Update-List cmdlet 返回更新的邮箱，然后通过管道将其传递给 Set-MailBox cmdlet，由该 cmdlet 来更改邮箱。

有关 Get-Mailbox 的详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=111536。
</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$m = get-mailbox

C:\PS&gt; update-list -InputObject $m -Property aliases -Add &quot;A&quot;,&quot;B&quot; -Remove &quot;X&quot;, &quot;Y&quot; | set-mailbox                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在邮箱的 Aliases 属性中添加 A 和 B，删除 X 和 Y。此命令与上一个命令的效果相同，尽管其格式略有不同。

此命令使用 Get-MailBox cmdlet 获取邮箱，并将邮箱保存在 $m 变量中。它使用 Update-List 的 InputObject 参数指定邮箱。InputObject 的值为 $m 变量中的邮箱。它使用 Property 参数指定 Aliases 属性，使用 Add 和 Remove 参数指定要在 Aliases 的值中添加和删除的项目。

该命令使用管道运算符 (|) 将更新的邮箱对象发送给 Set-Mailbox cmdlet，由该 cmdlet 来更改邮箱。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-mailbox | set-mailbox -alias (update-list -Add &quot;A&quot;, &quot;B&quot; -Remove &quot;X&quot;,&quot;Y&quot;)                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令在邮箱的 Aliases 属性中添加 A 和 B，删除 X 和 Y。此命令与前两个命令的效果相同，但是它采用不同的过程来执行任务。

此命令不会在将邮箱发送到 Set-Mailbox 之前更新邮箱的 Aliases 属性，而是使用 Update-List 创建一个表示此项更改的对象。然后，它将更改提交给 Set-Mailbox 的 Alias 参数。

该命令使用 Get-MailBox cmdlet 来获取邮箱。管道运算符将邮箱对象发送给 Set-Mailbox cmdlet，由该 cmdlet 来更改邮箱。

该命令使用 Set-Mailbox 的 Alias 参数来更改邮箱对象的 Aliases 属性。Alias 参数的值是一个 Update-List 命令，该命令创建表示更新的对象。Update-List 命令括在圆括号内，以确保它在计算 Alias 参数的值之前运行。在 Set-Mailbox 命令完成后，邮箱即被更改。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-list -InputObject $a -Property aliases -replace &quot;A&quot;, &quot;B&quot; | set-mailbox                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Update-List 的 Replace 运算符将 $a 中对象的 Aliases 属性中的集合替换为新集合。

此命令使用 InputObject 参数，在此情况下等效于使用管道运算符将 $a 传递给 Update-List。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113447</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Update-TypeData
		</command:name>
		<maml:description>
			<maml:para>通过将 *.types.ps1xml 文件重新加载到内存中来更新当前的扩展类型配置。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Update</command:verb>
		<command:noun>TypeData</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Update-TypeData cmdlet 通过将 *.types.ps1xml 文件重新加载到内存，更新当前扩展的类型配置。如果 Windows PowerShell 需要扩展类型信息所包含的类型信息，则通常会加载扩展类型信息。Update-TypeData cmdlet 可用于预加载所有类型信息。在开发类型并希望加载这些新类型以进行测试时，此命令尤其有用。

有关 Windows PowerShell 中 *types.ps1xml 文件的详细信息，请参阅 about_Types.ps1xml。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Update-TypeData</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>AppendPath</maml:name>
				<maml:description>
					<maml:para>指定要包括在已加载文件列表中的可选 .ps1xml 文件的路径。在加载内置文件后，将对这些文件进行处理。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>PrependPath</maml:name>
				<maml:description>
					<maml:para>指定要包括在已加载文件列表中的可选 .ps1xml 文件的路径。不过，在加载内置文件之前，将按指定这些文件的顺序对其进行处理。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>AppendPath</maml:name>
			<maml:description>
				<maml:para>指定要包括在已加载文件列表中的可选 .ps1xml 文件的路径。在加载内置文件后，将对这些文件进行处理。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>PrependPath</maml:name>
			<maml:description>
				<maml:para>指定要包括在已加载文件列表中的可选 .ps1xml 文件的路径。不过，在加载内置文件之前，将按指定这些文件的顺序对其进行处理。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>Confirm</maml:name>
    			<maml:description>
				<maml:para>在执行命令之前提示您进行确认。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
   			 <maml:name>WhatIf</maml:name>
    			<maml:description>
				<maml:para>描述如果执行该命令会发生什么情况（无需实际执行该命令）。</maml:para>
    			</maml:description>
    			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>	
				<dev:type>
  				<maml:name>SwitchParameter</maml:name> 
					<maml:uri /> 
					</dev:type>
 			<dev:defaultValue /> 
			</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含追加路径的字符串传递给 Update-TypeData。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					此 cmdlet 不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-typedata                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例更新 *.types.ps1xml 文件中的扩展类型配置。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
update-typedata -prependpath typesA.types.Ps1xml, typesB.types.Ps1xml                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例更新 *.types.ps1xml 文件中的扩展类型配置，以便先处理 typesA 和 typesB 文件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113421</maml:uri>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Wait-Event
		</command:name>
		<maml:description>
			<maml:para>等到引发特定事件后再继续运行。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Wait</command:verb>
		<command:noun>Event</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Wait-Event cmdlet 将挂起脚本或函数的执行，直到引发特定事件。在检测到事件后会继续执行。若要取消等待，请按 CTRL+C。

此功能为事件的轮询提供了一种替代方法。它还允许您通过两种方式确定对事件的响应：使用事件订阅的 Action 参数；等待事件返回，然后通过一个操作进行响应。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Wait-Event</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>SourceIdentifier</maml:name>
				<maml:description>
					<maml:para>只等待具有指定源标识符的事件。默认情况下，Wait-Event 等待任何事件。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Timeout</maml:name>
				<maml:description>
					<maml:para>确定 Wait-Event 等待事件发生的最长时间，以秒为单位。默认值为 -1，表示无限期地等待。计时从您提交 Wait-Event 命令时开始。

如果超过指定时间，则等待结束，命令提示符返回，即使尚未引发事件也是如此。不显示错误消息。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>SourceIdentifier</maml:name>
			<maml:description>
				<maml:para>只等待具有指定源标识符的事件。默认情况下，Wait-Event 等待任何事件。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>所有事件</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Timeout</maml:name>
			<maml:description>
				<maml:para>确定 Wait-Event 等待事件发生的最长时间，以秒为单位。默认值为 -1，表示无限期地等待。计时从您提交 Wait-Event 命令时开始。

如果超过指定时间，则等待结束，命令提示符返回，即使尚未引发事件也是如此。不显示错误消息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          事件、事件订阅和事件队列仅存在于当前会话中。如果关闭当前会话，将丢弃事件队列并取消事件订阅。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
wait-event                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令等待引发下一个事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
wait-event -sourceIdentifier &quot;ProcessStarted&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令等待引发具有源标识符“ProcessStarted”的下一个事件。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$timer.Interval = 2000 
C:\PS&gt; $timer.Autoreset = $false 
C:\PS&gt; $timer.Enabled = $true; Wait-Event Timer.Elapsed

# After 2 seconds 

EventIdentifier  : 12 
Sender           : System.Timers.Timer 
SourceEventArgs  : System.Timers.ElapsedEventArgs 
SourceArgs       : {System.Timers.Timer, System.Timers.ElapsedEventArgs} 
SourceIdentifier : Timer.Elapsed 
TimeGenerated    : 6/10/2008 3:24:18 PM 
MessageData      : 
ForwardEvent     : False                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令使用 Wait-Event cmdlet 等待一个定时器事件，定时器设置为 2000 毫秒。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
wait-event -sourceIdentifier &quot;ProcessStarted&quot; -timeout 90                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令等待引发具有源标识符“ProcessStarted”的下一个事件的最长时间为 90 秒。如果达到该指定时间，则等待结束。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=135276</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-ObjectEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-EngineEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Register-WmiEvent</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Unregister-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Wait-Event</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-EventSubscriber</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Debug
		</command:name>
		<maml:description>
			<maml:para>将调试消息写入控制台。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Debug</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Debug cmdlet 将调试消息从脚本或命令写入控制台。

默认情况下，调试消息不会显示在控制台中，但您可以使用 Debug 参数或 $DebugPreference 变量来显示它们。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Debug</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>指定要发送到控制台的调试消息。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Message</maml:name>
			<maml:description>
				<maml:para>指定要发送到控制台的调试消息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含调试消息的字符串传递给 Write-Debug。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Debug 只写入调试流。它不返回任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Write-Debug &quot;Cannot open file.&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令会写入一条调试消息。由于 $DebugPreference 的值是“SilentlyContinue”，因此该消息不会显示在控制台中。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$DebugPreference

SilentlyContinue

C:\PS&gt; Write-Debug &quot;Cannot open file.&quot;
C:\PS&gt;

C:\PS&gt; Write-Debug &quot;Cannot open file.&quot; -debug
DEBUG: Cannot open file.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了如何使用 Debug 通用参数来重写特定命令的 $DebugPreference 变量的值。

第一条命令显示 $DebugPreference 变量的值，默认情况下该值为“SilentlyContinue”。

第二条命令写入一条调试消息，但由于 $DebugPreference 值的原因，该消息不会显示。

第三条命令写入一条调试消息。它使用 Debug 通用参数来重写 $DebugPreference 的值，并显示此命令生成的调试消息。

因此，即使 $DebugPreference 的值是“SilentlyContinue”，也会显示调试消息。


有关 Debug 通用参数的详细信息，请参阅 about_CommonParameters。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$DebugPreference

SilentlyContinue

C:\PS&gt; Write-Debug &quot;Cannot open file.&quot;
C:\PS&gt;

C:\PS&gt; $DebugPreference = &quot;Continue&quot;

C:\PS&gt; Write-Debug &quot;Cannot open file.&quot;
DEBUG: Cannot open file.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示更改 $DebugPreference 变量的值对显示调试消息的影响。

第一条命令显示 $DebugPreference 变量的值，默认情况下该值为“SilentlyContinue”。

第二条命令写入一条调试消息，但由于 $DebugPreference 值的原因，该消息不会显示。

第三条命令为 $DebugPreference 变量赋予值“Continue”。

第四条命令写入一条调试消息，该消息会出现在控制台上。

有关 $DebugPreference 的详细信息，请参阅 about_Preference_Variables。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113424</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Error
		</command:name>
		<maml:description>
			<maml:para>将对象写入错误流。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Error</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Error cmdlet 将错误写入 Windows PowerShell 错误流。默认情况下，将错误与输出一起发送到主机程序以进行显示。

可以通过提交错误消息字符串 ErrorRecord 对象或 Exception 对象来写入错误。使用 Write-Error 的其他参数可填充错误记录。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ErrorRecord</maml:name>
				<maml:description>
					<maml:para>指定一个错误记录对象，其中包含描述该错误的属性。

若要获取错误记录对象，请使用 New-Object cmdlet 或从 $Error 自动变量中的数组中获取错误记录对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ErrorRecord</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryActivity</maml:name>
				<maml:description>
					<maml:para>描述导致该错误的操作。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryReason</maml:name>
				<maml:description>
					<maml:para>说明活动导致出现该错误的方式或原因。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetName</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetType</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的 .NET 类型。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RecommendedAction</maml:name>
				<maml:description>
					<maml:para>描述用户应采取的措施以解决或预防该错误。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>指定错误的消息文本。如果文本包含空格或特殊字符，则使用引号将其括起来。还可以通过管道将消息字符串传递给 Write-Error。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Category</maml:name>
				<maml:description>
					<maml:para>指定错误的类别。默认值为 NotSpecified。

有关错误类别的信息，请参阅 MSDN (Microsoft Developer Network) Library 中的“ErrorCategory 枚举”，网址是 http://go.microsoft.com/fwlink/?LinkId=143600。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">NotSpecified</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OpenError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CloseError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DeviceError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DeadlockDetected</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidArgument</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidData</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidOperation</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidResult</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidType</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">MetadataError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NotImplemented</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NotInstalled</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ObjectNotFound</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OperationStopped</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OperationTimeout</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">SyntaxError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ParserError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">PermissionDenied</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceBusy</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceExists</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceUnavailable</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">WriteError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">FromStdErr</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">SecurityError</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ErrorId</maml:name>
				<maml:description>
					<maml:para>指定标识错误的 ID 字符串。该字符串对于该错误应该是唯一的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TargetObject</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象。输入对象（如字符串）、包含对象的变量或获取对象的命令。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryActivity</maml:name>
				<maml:description>
					<maml:para>描述导致该错误的操作。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryReason</maml:name>
				<maml:description>
					<maml:para>说明活动导致出现该错误的方式或原因。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetName</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetType</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的 .NET 类型。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RecommendedAction</maml:name>
				<maml:description>
					<maml:para>描述用户应采取的措施以解决或预防该错误。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Exception</maml:name>
				<maml:description>
					<maml:para>指定表示错误的异常。

您可以使用异常，而无需指定消息文本或异常记录。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Exception</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Category</maml:name>
				<maml:description>
					<maml:para>指定错误的类别。默认值为 NotSpecified。

有关错误类别的信息，请参阅 MSDN (Microsoft Developer Network) Library 中的“ErrorCategory 枚举”，网址是 http://go.microsoft.com/fwlink/?LinkId=143600。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">NotSpecified</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OpenError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">CloseError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DeviceError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DeadlockDetected</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidArgument</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidData</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidOperation</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidResult</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">InvalidType</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">MetadataError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NotImplemented</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">NotInstalled</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ObjectNotFound</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OperationStopped</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">OperationTimeout</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">SyntaxError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ParserError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">PermissionDenied</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceBusy</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceExists</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ResourceUnavailable</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">ReadError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">WriteError</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">FromStdErr</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">SecurityError</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ErrorId</maml:name>
				<maml:description>
					<maml:para>指定标识错误的 ID 字符串。该字符串对于该错误应该是唯一的。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>指定错误的消息文本。如果文本包含空格或特殊字符，则使用引号将其括起来。还可以通过管道将消息字符串传递给 Write-Error。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>TargetObject</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象。输入对象（如字符串）、包含对象的变量或获取对象的命令。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryActivity</maml:name>
				<maml:description>
					<maml:para>描述导致该错误的操作。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryReason</maml:name>
				<maml:description>
					<maml:para>说明活动导致出现该错误的方式或原因。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetName</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的名称。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CategoryTargetType</maml:name>
				<maml:description>
					<maml:para>指定出现错误时正在处理的对象的 .NET 类型。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>RecommendedAction</maml:name>
				<maml:description>
					<maml:para>描述用户应采取的措施以解决或预防该错误。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Category</maml:name>
			<maml:description>
				<maml:para>指定错误的类别。默认值为 NotSpecified。

有关错误类别的信息，请参阅 MSDN (Microsoft Developer Network) Library 中的“ErrorCategory 枚举”，网址是 http://go.microsoft.com/fwlink/?LinkId=143600。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ErrorCategory</command:parameterValue>
			<dev:type>
				<maml:name>ErrorCategory</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>NotSpecified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CategoryActivity</maml:name>
			<maml:description>
				<maml:para>描述导致该错误的操作。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CategoryReason</maml:name>
			<maml:description>
				<maml:para>说明活动导致出现该错误的方式或原因。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CategoryTargetName</maml:name>
			<maml:description>
				<maml:para>指定出现错误时正在处理的对象的名称。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CategoryTargetType</maml:name>
			<maml:description>
				<maml:para>指定出现错误时正在处理的对象的 .NET 类型。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ErrorId</maml:name>
			<maml:description>
				<maml:para>指定标识错误的 ID 字符串。该字符串对于该错误应该是唯一的。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ErrorRecord</maml:name>
			<maml:description>
				<maml:para>指定一个错误记录对象，其中包含描述该错误的属性。

若要获取错误记录对象，请使用 New-Object cmdlet 或从 $Error 自动变量中的数组中获取错误记录对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ErrorRecord</command:parameterValue>
			<dev:type>
				<maml:name>ErrorRecord</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Exception</maml:name>
			<maml:description>
				<maml:para>指定表示错误的异常。

您可以使用异常，而无需指定消息文本或异常记录。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Exception</command:parameterValue>
			<dev:type>
				<maml:name>Exception</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Message</maml:name>
			<maml:description>
				<maml:para>指定错误的消息文本。如果文本包含空格或特殊字符，则使用引号将其括起来。还可以通过管道将消息字符串传递给 Write-Error。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>RecommendedAction</maml:name>
			<maml:description>
				<maml:para>描述用户应采取的措施以解决或预防该错误。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>TargetObject</maml:name>
			<maml:description>
				<maml:para>指定出现错误时正在处理的对象。输入对象（如字符串）、包含对象的变量或获取对象的命令。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含错误消息的字符串传递给 Write-Error。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>错误对象</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Error 只写入错误流。它不返回任何对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
get-childitem | foreach-object { if ($_.gettype().tostring() -eq &quot;Microsoft.Win32.RegistryKey&quot;) {write-error &quot;Out-of-band object&quot; -errorID B1 -targetobject $_ } else {$_ } }                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>当 Get-ChildItem cmdlet 返回 Microsoft.Win32.RegistryKey 对象（如 Windows PowerShell Registry 提供程序的 HKLM: 或 HKCU 驱动器中的对象）时，此命令会写入错误。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-error  &quot;Access denied.&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令写入“Access denied”错误。此命令使用 Message 参数指定消息，但省略可选的 Message 参数名称。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-error -message &quot;Error: Too many input values.&quot; -category InvalidArgument                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令写入错误并指定错误类别。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113425</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Host
		</command:name>
		<maml:description>
			<maml:para>将自定义的输出内容写入主机。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Host cmdlet 自定义输出内容。您可以使用 ForegroundColor 参数来指定文本颜色，还可以使用 BackgroundColor 参数来指定背景色。使用 Separator 参数，您可以指定用于分隔所显示对象的字符串。特定结果取决于承载 Windows PowerShell 的程序。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Object</maml:name>
				<maml:description>
					<maml:para>要显示在控制台中的对象。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>BackgroundColor</maml:name>
				<maml:description>
					<maml:para>指定背景色。没有默认值。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Black</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkBlue</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkGreen</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkCyan</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkRed</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkMagenta</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkYellow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Gray</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkGray</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Blue</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Green</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Cyan</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Red</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Magenta</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Yellow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">White</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ForegroundColor</maml:name>
				<maml:description>
					<maml:para>指定文本颜色。没有默认值。</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false" variableLength="false">Black</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkBlue</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkGreen</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkCyan</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkRed</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkMagenta</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkYellow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Gray</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">DarkGray</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Blue</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Green</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Cyan</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Red</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Magenta</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">Yellow</command:parameterValue>
				<command:parameterValue required="false" variableLength="false">White</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>NoNewline</maml:name>
				<maml:description>
					<maml:para>指定在控制台中显示的内容不以换行符结束。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Separator</maml:name>
				<maml:description>
					<maml:para>在控制台上所显示对象之间输出的字符串。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>BackgroundColor</maml:name>
			<maml:description>
				<maml:para>指定背景色。没有默认值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ConsoleColor</command:parameterValue>
			<dev:type>
				<maml:name>ConsoleColor</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ForegroundColor</maml:name>
			<maml:description>
				<maml:para>指定文本颜色。没有默认值。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ConsoleColor</command:parameterValue>
			<dev:type>
				<maml:name>ConsoleColor</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>NoNewline</maml:name>
			<maml:description>
				<maml:para>指定在控制台中显示的内容不以换行符结束。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Object</maml:name>
			<maml:description>
				<maml:para>要显示在控制台中的对象。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Separator</maml:name>
			<maml:description>
				<maml:para>在控制台上所显示对象之间输出的字符串。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue>无</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将要写入的对象传递给主机。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Host 将对象发送到主机。它不返回任何对象。但是，主机可能显示 Write-Host 向其发送的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-host &quot;no newline test &quot; -nonewline

no newline test C:\PS&gt;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示输入到控制台的内容，但由于存在 NoNewline 参数，因此输出内容后直接跟提示符。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-host (2,4,6,8,10,12) -Separator &quot;, +2= &quot;

2, +2= 4, +2= 6, +2= 8, +2= 10, +2= 12                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示从 2 到 12 的偶数。Separator 参数用于添加字符串 , +2= （逗号、空格、+、2、=、空格）。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-host (2,4,6,8,10,12) -Separator &quot;, -&gt; &quot; -foregroundcolor DarkGreen -backgroundcolor white                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示从 2 到 12 之间的偶数。它使用 ForegroundColor 参数来输出深绿色文本，并使用 BackgroundColor 参数来显示白色背景。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-host &quot;Red on white text.&quot; -ForegroundColor red -BackgroundColor white

Red on white text.                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示字符串“Red on white text”。文本颜色为红色，如 ForegroundColor 参数定义。背景色为白色，如 BackgroundColor 参数定义。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113426</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Output
		</command:name>
		<maml:description>
			<maml:para>将指定对象发送到管道中的下一个命令。如果该命令是管道中的最后一个命令，则在控制台上显示这些对象。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Output</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Output cmdlet 将指定对象发送到管道中的下一个命令。如果该命令是管道中的最后一个命令，则会在控制台中显示该对象。

Write-Output 会沿着主要管道向下发送对象，主要管道也称为“输出流”或“成功管道”。若要沿着错误管道向下发送错误对象，请使用 Write-Error。

此 cmdlet 通常在脚本中使用以便在控制台上显示字符串和其它对象。但是，由于默认行为是在管道结束时显示对象，因此通常没必要使用该 cmdlet。例如，“get-process | write-output”与“get-process”等效。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Output</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>指定要沿着管道向下发送的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>InputObject</maml:name>
			<maml:description>
				<maml:para>指定要沿着管道向下发送的对象。输入一个包含对象的变量，或键入可获取对象的命令或表达式。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将对象传递给 Write-Output。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSObject</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Output 返回作为输入提交的对象。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$p = get-process

c:\PS&gt; write-output $p

c:\PS&gt; $p                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令获取表示计算机上所运行进程的对象，然后在控制台上显示这些对象。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-output &quot;test output&quot; | get-member                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令通过管道将字符串“test output”传递给 Get-Member cmdlet，后者显示 String 类的成员，从而表明沿着管道传递了该字符串。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113427</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Progress
		</command:name>
		<maml:description>
			<maml:para>在 Windows PowerShell 命令窗口内显示进度栏。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Progress</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Progress cmdlet 会在 Windows PowerShell 命令窗口中显示一个进度栏，描绘正在运行的命令或脚本的状态。您可以选择进度栏所反映的指示器，以及进度栏的上方和下方显示的文本。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Progress</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>Activity</maml:name>
				<maml:description>
					<maml:para>指定状态栏上方标题中的第一行文本。此文本描述正在报告其进度的活动。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>Status</maml:name>
				<maml:description>
					<maml:para>指定状态栏上方标题中的第二行文本。此文本描述活动的当前状态。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>Id</maml:name>
				<maml:description>
					<maml:para>指定区分各个进度栏的 ID。当您在一条命令中创建多个进度栏时，请使用此参数。如果不为进度栏指定不同的 ID，它们会重叠起来，而不会连续地显示。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>Completed</maml:name>
				<maml:description>
					<maml:para>指示进度栏是否可见。如果省略此参数，则 Write-Progress 会显示进度信息。</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>CurrentOperation</maml:name>
				<maml:description>
					<maml:para>指定进度栏下方的文本行。此文本描述当前正在进行的操作。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ParentId</maml:name>
				<maml:description>
					<maml:para>标识当前活动的父活动。如果当前活动没有父活动，请使用值 -1。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>PercentComplete</maml:name>
				<maml:description>
					<maml:para>指定已完成的活动的百分比。如果完成百分比未知或不适用，请使用值 -1。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SecondsRemaining</maml:name>
				<maml:description>
					<maml:para>指定预计的在完成活动之前剩余的秒数。如果剩余秒数未知或不适用，请使用值 -1。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>SourceId</maml:name>
				<maml:description>
					<maml:para>标识记录源。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>Activity</maml:name>
			<maml:description>
				<maml:para>指定状态栏上方标题中的第一行文本。此文本描述正在报告其进度的活动。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>Completed</maml:name>
			<maml:description>
				<maml:para>指示进度栏是否可见。如果省略此参数，则 Write-Progress 会显示进度信息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>CurrentOperation</maml:name>
			<maml:description>
				<maml:para>指定进度栏下方的文本行。此文本描述当前正在进行的操作。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>Id</maml:name>
			<maml:description>
				<maml:para>指定区分各个进度栏的 ID。当您在一条命令中创建多个进度栏时，请使用此参数。如果不为进度栏指定不同的 ID，它们会重叠起来，而不会连续地显示。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ParentId</maml:name>
			<maml:description>
				<maml:para>标识当前活动的父活动。如果当前活动没有父活动，请使用值 -1。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>PercentComplete</maml:name>
			<maml:description>
				<maml:para>指定已完成的活动的百分比。如果完成百分比未知或不适用，请使用值 -1。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SecondsRemaining</maml:name>
			<maml:description>
				<maml:para>指定预计的在完成活动之前剩余的秒数。如果剩余秒数未知或不适用，请使用值 -1。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>SourceId</maml:name>
			<maml:description>
				<maml:para>标识记录源。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>Status</maml:name>
			<maml:description>
				<maml:para>指定状态栏上方标题中的第二行文本。此文本描述活动的当前状态。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					不能通过管道将输入传递给此 cmdlet。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Progress 不生成任何输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          如果进度栏未显示，请检查 $ProgressPreference 变量的值。如果将值设置为 SilentlyContinue，则不会显示进度栏。有关 Windows PowerShell 首选项的详细信息，请参阅 about_Preference_Variables。

该 cmdlet 的参数对应于 ProgressRecord 类 (System.Management.Automation.ProgressRecord) 的属性。有关详细信息，请参阅 Windows PowerShell 软件开发工具包 (SDK) 中的 ProgressRecord 主题。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
for ($i = 1; $i -lt 101; $i++ ) 
{for ($j=0;$j -lt 10000;$j++) {} write-progress -activity &quot;Search in Progress&quot; -status &quot;% Complete:&quot; -percentcomplete $i;}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示两个嵌套 For 循环的进度。第一个循环数到 100，对于该循环的每次递增，第二个循环都会数到 10000。
Write-Progress 命令包括一个状态栏标题（“activity”）、一个状态行和变量 $i（For 循环中的计数器），该变量用来指明任务的相对完成程度。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
for($i = 1; $i -lt 101; $i++ ) {write-progress -activity Updating -status progress-&gt; -percentcomplete $i -currentOperation OuterLoop} for($i = 1; $i -lt 101; $i++ ) {write-progress -activity Updating -status progress -percentcomplete $i -id  1 -currentOperation InnerLoop}

Updating 
   progress -&gt;
   [oooooooooooooooooo                                                   ]

   OutsideLoop

Updating
  progress  
  [oooooooooooooooooo                                                    ]

  InnerLoop                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例显示两个嵌套 For 循环的进度，每个 For 循环都由一个进度栏表示。

第二个进度栏的 Write-Progress 命令包含用来与第一个进度栏进行区分的 Id 参数。若不使用 Id 参数，进度栏会彼此重叠，而不会按顺序上下显示。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$events = get-eventlog -logname system

C:\PS&gt; $events | foreach-object -begin {clear-host;$i=0;$out=&quot;&quot;} `
-process {if($_.message -like &quot;*bios*&quot;) {$out=$out + $_.Message};
$i = $i+1;`
write-progress -activity &quot;Searching Events&quot; `
-status &quot;Progress:&quot; -percentcomplete ($i/$events.count*100)} `
-end {$out}                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示在系统事件日志消息中查找字符串“bios”的命令的进度。

在命令的第一行中，Get-EventLog cmdlet 会获取系统日志中的事件，并将它们存储在 $events 变量中。

在第二行中，通过管道将这些事件传递给 ForEach-Object cmdlet。在开始处理前，使用 Clear-Host cmdlet 来清除屏幕、将计数器变量 $i 设置为零，并将输出变量 $out 设置为空字符串。


第三行是 ForEach-Object cmdlet 的 Process 脚本块，该 cmdlet 在每个传入对象的消息属性中搜索“bios”。如果找到该字符串，则会将消息添加到 $out。

在第四行中，计数器变量 $i 将递增以记录又检查了一个事件。

第五行将 Write-Progress cmdlet 与 Activity 和 Status 文本字段的值结合使用，分别创建进度栏标题的第一行和第二行。通过将已处理的事件数 ($i) 除以检索到的事件总数 ($events.count)，然后再乘以 100 计算得出 PercentComplete 参数值。

在最后一行中，ForEach-Object cmdlet 的 End 参数用于显示 $out 变量中存储的消息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113428</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Verbose
		</command:name>
		<maml:description>
			<maml:para>将文本写入详细消息流。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Verbose</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Verbose cmdlet 将文本写入 Windows PowerShell 中的详细消息流。通常，详细消息流用来提供有关命令处理的信息，以用于调试某个命令。

默认情况下不显示详细消息流，但是您可以通过更改 $VerbosePreference 变量的值或在任何命令中使用 Verbose 通用参数来显示它。

</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Verbose</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>指定要显示的消息。此参数是必需的。还可以通过管道将消息字符串传递给 Verbose-Message。

</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Message</maml:name>
			<maml:description>
				<maml:para>指定要显示的消息。此参数是必需的。还可以通过管道将消息字符串传递给 Verbose-Message。

</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含消息的字符串传递给 Write-Verbose。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Verbose 只写入详细消息流。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
Write-Verbose -message &quot;Searching the Application Event Log.&quot;

C:\PS&gt; Write-Verbose -message &quot;Searching the Application Event Log.&quot; -verbose



                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令使用 Write-Verbose cmdlet 显示一条状态消息。默认情况下不显示该消息。

第二条命令使用 Verbose 通用参数显示任何详细消息，无论 $VerbosePreference 变量的值如何。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$VerbosePreference = &quot;Continue&quot;

C:\PS&gt; Write-Verbose &quot;Copying file $filename&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>这些命令使用 Write-Verbose cmdlet 显示一条状态消息。默认情况下不显示该消息。

第一条命令为 $VerbosePreference 首选项变量赋予值“Continue”。默认值“SilentlyContinue”禁止显示详细消息。

第二条命令写入一条详细消息。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113429</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Preference_Variables</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<!-- v 1.1.0.9 -->
<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Warning
		</command:name>
		<maml:description>
			<maml:para>写入警告消息。</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>Write</command:verb>
		<command:noun>Warning</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Write-Warning cmdlet 会将警告消息写入 Windows PowerShell 主机。对警告的响应取决于用户的 $WarningPreference 变量的值以及 WarningAction 通用参数的使用。</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Warning</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>Message</maml:name>
				<maml:description>
					<maml:para>指定警告消息。</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>Message</maml:name>
			<maml:description>
				<maml:para>指定警告消息。</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri />
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.String</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>
			<maml:description>
				<maml:para>
					<!-- description  -->
					可以通过管道将包含警告的字符串传递给 Write-Warning。
				</maml:para>
			</maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>无</maml:name>
				<maml:uri />
				<maml:description />
			</dev:type>   
			<maml:description>
				<maml:para>
					<!-- description  -->
					Write-Warning 只写入警告流。它不会生成任何其他输出。
				</maml:para>
			</maml:description> 
		</command:returnValue>
	</command:returnValues>
	<!-- Error section-->
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
		<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          $WarningPreference 变量的默认值是“Continue”，它显示警告，然后继续执行命令。若要确定诸如 $WarningPreference 等首选项变量的有效值，请将其设置为由随机字符（如“abc”）组成的字符串。所得到的错误消息将列出有效值。
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>

		<command:example>
			<maml:title>
				-------------------------- 示例 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-warning &quot;This is only a test warning.&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此命令显示消息“WARNING: This is only a test warning.”</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$w = &quot;This is only a test warning.&quot;

C:\PS&gt; $w | write-warning                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例说明如何使用管道运算符 (|) 将字符串发送至 Write-Warning。您可以将字符串保存在变量中，如此命令中所示，或者通过管道直接将字符传递给 Write-Warning。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
$warningpreference

Continue

C:\PS&gt; write-warning &quot;This is only a test warning.&quot;
This is only a test warning.

C:\PS&gt; $warningpreference = &quot;SilentlyContinue&quot;

C:\PS&gt; write-warning &quot;This is only a test warning.&quot;
C:\PS&gt;

C:\PS&gt; $warningpreference = &quot;Stop&quot;

C:\PS&gt; write-warning &quot;This is only a test warning.&quot;
WARNING: This is only a test message.
Write-Warning : Command execution stopped because the shell variable &quot;WarningPreference&quot; is set to Stop.
At line:1 char:14
+ write-warning &lt;&lt;&lt;&lt;  &quot;This is only a test message.&quot;                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了 $WarningPreference 变量的值对 Write-Warning 命令的影响。

第一条命令显示 $WarningPreference 变量的默认值，即“Continue”。因此，当您写入警告时，会显示该警告消息并且执行过程将会继续。

当您更改 $WarningPreference 变量的值时，Write-Warning 命令的作用又发生变化。值为“SilentlyContinue”时会禁止警告。值为“Stop”时会显示警告，然后停止执行该命令。

有关 $WarningPreference 变量的详细信息，请参阅 about_Preference_Variables。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>

		<command:example>
			<maml:title>
				-------------------------- 示例 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>
write-warning &quot;This is only a test warning.&quot; -warningaction Inquire

WARNING: This is only a test warning.

Confirm
Continue with this operation?
[Y] Yes  [A] Yes to All  [H] Halt Command  [S] Suspend  [?] Help (default is &quot;Y&quot;):                        </dev:code>
       			<dev:remarks>
                                <maml:para>说明</maml:para>
                                <maml:para>-----------</maml:para>
  			        <maml:para>此示例演示了 WarningAction 通用参数的值对 Write-Warning 命令的影响。您可以将 WarningAction 通用参数与任何 cmdlet 结合使用，来确定 Windows PowerShell 如何响应从该命令生成的警告。WarningAction 通用参数只为该特定命令覆盖 $WarningPreference 的值。

此命令使用 Write-Warning cmdlet 显示警告。值为“Inquire”的 WarningAction 通用参数指示系统在命令显示警告时提示用户。

有关 WarningAction 通用参数的详细信息，请参阅 about_CommonParameters。</maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
	                        <maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Online version:</maml:linkText>
			<maml:uri>http://go.microsoft.com/fwlink/?LinkID=113430</maml:uri>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_Preference_Variables</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_CommonParameters</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri />
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


</helpItems>

